<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>07、建造者模式</title>
      <link href="/2019/07/07/builder/"/>
      <url>/2019/07/07/builder/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/07/builder/builder_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 FactoryPatttern/Builder 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是建造者模式"><a href="#一、什么是建造者模式" class="headerlink" title="一、什么是建造者模式"></a>一、什么是建造者模式</h3><h4 id="1、生活中的建造者模式"><a href="#1、生活中的建造者模式" class="headerlink" title="1、生活中的建造者模式"></a>1、生活中的建造者模式</h4><blockquote><p>1、盖房子</p></blockquote><p>我们在生活中盖房子，一般就是打地基，盖框架「用砖头或钢筋混凝土」，然后是粉刷。基本上就是这个路子。当然我们这些工作全部可以自己做，可也以找几个工人去干，当然还可以可以直接找一个设计师，直接说我就要这样的房子，然后就不管了，最后问设计师「设计师给一张纸给工人，工人就啪啪的干了」验收房子即可「至于你是如何建的过程我不关心，我只要结果」—这就是建造者模式</p><blockquote><p>2、组装电脑</p></blockquote><p>我们买的电脑都是由主板、内存、cpu、显卡等组成，如何把这些东西组装起来给用户这就是建造者模式的作用，不同的人对电脑的配置需求不一样的「打游戏的对显卡要求高」，但是电脑构成部件是固定的，我们找电脑城的装机人员把电脑装起来这一过程就是建造模式</p><blockquote><p>3、软件开发</p></blockquote><p>我们开发一款产品，需要技术主管、产品经理、苦逼的程序员。在这里，产品经理就是指挥者「Director」和客户沟通，了解产品需求，技术主管是抽象的建造者[Builder]，让猿们杂做就杂做，而程序员就是体力劳动者「即具体的建造者，按照技术主管下发的任务去做」— 这就是一个接近完美的建造者模式「为什么说接近呢？因为没有百分之百，靠：又忘记吃药了」</p><h4 id="2、程序中的建造者模式"><a href="#2、程序中的建造者模式" class="headerlink" title="2、程序中的建造者模式"></a>2、程序中的建造者模式</h4><blockquote><p>建造者模式的定义</p></blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示，这是官方定义，通俗的说就是：建造者模式就是如何一步步构建一个包含多个组成部件的对象，相同的构建过程可以创建不同的产品</p><blockquote><p>建造者模式的特点</p></blockquote><p>建造者模式是一种创建型模式，适用于那些流程固定「顺序不一定固定」，建造的目标对象会有所改变这种场景「比如画一条狗，这个目标不变，但是不同的是有黄狗，胖狗，瘦狗等」，还有一种场景是代替多参数构造器</p><blockquote><p>建造者模式的作用</p></blockquote><ul><li>1、用户不知道对象的建造过程和细节就可以创建出复杂的对象「屏蔽了建造的具体细节」</li><li>2、用户只需给出复杂对象的内容和类型可以创建出对象</li><li>3、建造者模工按流程一步步的创建出复杂对象</li></ul><blockquote><p>建造者模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Builder</td><td>接口或抽象类</td><td>抽象的建造者，不是必须的</td></tr><tr><td>ConcreateBuilder</td><td>具体的建造者</td><td>可以有多个「因为每个建造风格可能不一样」</td></tr><tr><td>Product</td><td>普通的类</td><td>具体的产品「即被建造的对象」</td></tr><tr><td>Director</td><td>导演也叫指挥者</td><td>统一指挥建造者去建造目标，导演不是必须的</td></tr></tbody></table><blockquote><p>建造者模式简单的 UML</p></blockquote><img src="/2019/07/07/builder/BuilderPattern.jpg" title="建造者模式简单的 UML"><h3 id="二、建造者模式的举例"><a href="#二、建造者模式的举例" class="headerlink" title="二、建造者模式的举例"></a>二、建造者模式的举例</h3><blockquote><p>1、组装电脑</p></blockquote><p>小明想组装一个台式电脑，小明对电脑配置一窍不通，就直接跑到电脑城给装机老板说我要一台打游戏非常爽的电脑，麻烦你给装一下「配置什么的你给我推荐一下吧」，于是老板就让它的员工「小美」按小明的要求装了一个性能灰常牛 B 的电脑，1 个小时后电脑装好了，小明交钱拿电脑走人。不一会儿小张又来了，要一个满足平时写文章就可以的电脑，老板针对小张的要求给不同的装机配置。不同的人有不同的配置方案「但是装机流程是一样的」，这就是一个典型的建造者模式</p><p><code>组装电脑简单的 UML</code></p><img src="/2019/07/07/builder/AssemblerComputerBuilderUml.jpg" title="组装电脑简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、创建被建造的对象电脑 — Computer.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 产品类--被建造的对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String cpu <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cpu</span>    <span class="token keyword">private</span> String hardDisk <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//硬盘</span>    <span class="token keyword">private</span> String mainBoard <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 主板</span>    <span class="token keyword">private</span> String memory <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内存</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略 getter 和 setter<span class="token punctuation">}</span></code></pre><ul><li>2、抽象的建造者 — Builder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象的建造者，即装电脑的步骤 * 至于安装什么型号的主板，不是我关心，而是具体的建造者关心的 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 安装主板</span>    <span class="token keyword">void</span> <span class="token function">createMainBoard</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 安装 cpu</span>    <span class="token keyword">void</span> <span class="token function">createCpu</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 安装硬盘</span>    <span class="token keyword">void</span> <span class="token function">createhardDisk</span><span class="token punctuation">(</span>String hardDisk<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 安装内存</span>    <span class="token keyword">void</span> <span class="token function">createMemory</span><span class="token punctuation">(</span>String memory<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 组成电脑</span>    Computer <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、具体建造者，也就是装机工人小美 — AssemblerBuilder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的建造者，这里是商场的一个装机人员 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssemblerBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createCpu</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createhardDisk</span><span class="token punctuation">(</span>String hardDisk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setHardDisk</span><span class="token punctuation">(</span>hardDisk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createMainBoard</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMainBoard</span><span class="token punctuation">(</span>mainBoard<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createMemory</span><span class="token punctuation">(</span>String memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Computer <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> computer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、还有老板「”指手画脚的人”」安排装机工工作 — Direcror.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 声明一个导演类「指挥者，这里可以装电脑的老板」，用来指挥组装过程，也就是组装电脑的流程 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Direcror</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Builder builder <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用多态，装机工非常多，我管你小美，小兰，小猪，我统统收了</span>    <span class="token keyword">public</span> <span class="token function">Direcror</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 老板最后只想看到装成的成品---要交到客户手中</span>    <span class="token keyword">public</span> Computer <span class="token function">createComputer</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">,</span>String hardDisk<span class="token punctuation">,</span>String mainBoard<span class="token punctuation">,</span>String memory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体的工作是装机工去做</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createMainBoard</span><span class="token punctuation">(</span>mainBoard<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createCpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createMemory</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createhardDisk</span><span class="token punctuation">(</span>hardDisk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 装机员小美</span>      Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AssemblerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 老板把小明的需求转给小美</span>      Direcror direcror <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Direcror</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 老板最后拿到成品机子，工作全由小美去做</span>      Computer computer <span class="token operator">=</span> direcror<span class="token punctuation">.</span><span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token string">"Intel 酷睿i9 7900X"</span><span class="token punctuation">,</span><span class="token string">"三星M9T 2TB （HN-M201RAD）"</span><span class="token punctuation">,</span><span class="token string">"技嘉AORUS Z270X-Gaming 7"</span><span class="token punctuation">,</span><span class="token string">"科赋Cras II 红灯 16GB DDR4 3000"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明这台电脑使用的是：\n"</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">getMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 主板\n"</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">getCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" CPU\n"</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">getHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"硬盘\n"</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">getMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 内存\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/07/builder/computer_builder.png" title="装机结果"><p>怎么样，至于小张，小猪要装机把自己要的配置给老板即可，然后老板如何装机不用你管，你就等着收装好的机子吧</p><blockquote><p>2、盖房子</p></blockquote><p>盖房子的基本步骤和流程是固定的无非就是打地基、盖框架、然后浇筑「至于盖平房、还是楼房那是每个客户的具体需求」。总体来说盖房子以有以三种方式：</p><ul><li>1、自己盖房子「没有办法有的人就是牛 B ,自己设计，自己动手，当然这属于小房子，你让一个人盖个32 层让我看看」</li><li>2、想盖房子的人是一个包工头，自己找一帮工人自己就把房子搞定了</li><li>3、想盖房子的人就是一个普通人，啥也不会，找一个设计师说“我就要盖个房子，南北通透，四秀常春”，设计师说没有问题，设计师把设计出来的图纸扔给包工头说：“就照这个样子盖”，包工头拿着图纸给工人们分工派活，最后完工</li></ul><p><code>盖房子建造者模式简单的 UML</code></p><img src="/2019/07/07/builder/houseBuilderUml.jpg" title="盖房子建造者模式简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、房子对象 House.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 最终的产品---房子 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打地基</span>    <span class="token keyword">private</span> String foundation <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 盖框架</span>    <span class="token keyword">private</span> String frame <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 浇筑</span>    <span class="token keyword">private</span> String pouring <span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略 setter 和 getter <span class="token punctuation">}</span></code></pre><ul><li>2、抽象建造者「包工头」 HouseBuilder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打地基</span>    <span class="token keyword">void</span> <span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 盖框架</span>    <span class="token keyword">void</span> <span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 浇灌</span>    <span class="token keyword">void</span> <span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 房子建成 </span>    House <span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、具体建造者「工人」–盖平房 PingFangBuilder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 盖平房 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PingFangBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> House house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setFoundation</span><span class="token punctuation">(</span><span class="token string">"盖平房的地基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"盖平房的框架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setPouring</span><span class="token punctuation">(</span><span class="token string">"盖平房不用浇灌，直接人工手刷就可以"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> House <span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> house<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、具体建造者「工人」–盖楼房 LouFangBuilder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 盖楼房 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LouFangBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> House house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setFoundation</span><span class="token punctuation">(</span><span class="token string">"盖楼房的地基就打十米深"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"楼房的框架要使用非常坚固钢筋混凝土"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setPouring</span><span class="token punctuation">(</span><span class="token string">"楼房拿个罐车把框架拿混凝土灌满即可"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> House <span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> house<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、指挥者「设计师」 HouseDirector.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 设计师 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseDirector</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 指挥包工头</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHouse</span><span class="token punctuation">(</span>HouseBuilder houseBuilder<span class="token punctuation">)</span><span class="token punctuation">{</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、测试一下 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 方式一、客户自己盖房子，亲力亲为</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========客户自己建房子，必须知道盖房的细节========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        House house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        house<span class="token punctuation">.</span><span class="token function">setFoundation</span><span class="token punctuation">(</span><span class="token string">"用户自己建造房子：打地基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        house<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"用户自己建造房子：盖框架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        house<span class="token punctuation">.</span><span class="token function">setPouring</span><span class="token punctuation">(</span><span class="token string">"用户自己建造房子：浇筑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span><span class="token function">getFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span><span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span><span class="token function">getPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式二、客户找一个建造者盖房子「充当包工头角色」，但是要知道如何盖房子「调用建造者盖房子的顺序」</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========客户直接找盖房子的工人「建造者」，客户要调用建造者方法去盖房子，客户必须得知道房子如何造========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HouseBuilder houseBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PingFangBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        House house1 <span class="token operator">=</span> houseBuilder<span class="token punctuation">.</span><span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house1<span class="token punctuation">.</span><span class="token function">getFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house1<span class="token punctuation">.</span><span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house1<span class="token punctuation">.</span><span class="token function">getPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式三、使用建造者模式，找一个设计师「设计师拉一帮建造者去干活」，告诉他我想要什么样的房子，最后客户只问设计师要房子即可</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========客户直接找一个设计师，设计师统一指挥建造者盖房子，房子杂盖，客户不关心，最后只是找设计师要房子即可========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HouseBuilder pingFangBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PingFangBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        HouseDirector houseDirector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        houseDirector<span class="token punctuation">.</span><span class="token function">buildHouse</span><span class="token punctuation">(</span>pingFangBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        House houseCreateByBuilder <span class="token operator">=</span> pingFangBuilder<span class="token punctuation">.</span><span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>houseCreateByBuilder<span class="token punctuation">.</span><span class="token function">getFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>houseCreateByBuilder<span class="token punctuation">.</span><span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>houseCreateByBuilder<span class="token punctuation">.</span><span class="token function">getPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们对比了三种方式，自己盖房子，找工人盖房子，找设计师盖房子来逐步感受一下建造者模式的优点</p><ul><li>6、运行查看结果</li></ul><img src="/2019/07/07/builder/housebuild_result.png" title="盖房子结果"><p>可以看到最后一种最舒服，盖房子的时候直接外包给设计师自己就不用管了，到时候问设计师要建好的成品房子即可，这样对客户来说具体如何盖房子我不需要知道，屏蔽细节「只能说有钱就是任性」</p><blockquote><p>3、替代多参数构造函数的建造者模式，以组装电脑为例子</p></blockquote><p>前面我们说了在建造者模式中 Director 不是必须的，Director 的作用不是构造产品「建造产品是建造者的事情」而是指挥协调建造的步骤「当有一个新的建造者的时候直接实现抽象建造者，而不用关心具体的执行步骤，这就是 Director 干的事情」，我们直接看代码吧</p><ul><li>1、原始的 Computer.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String mainBoard <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 主板</span>    <span class="token keyword">private</span> String cpu <span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// cpu</span>    <span class="token keyword">private</span> String hd <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 硬盘</span>    <span class="token keyword">private</span> String powerSupplier <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 电源</span>    <span class="token keyword">private</span> String graphicsCard<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显卡</span>    <span class="token comment" spellcheck="true">// 其它一些可选配置</span>    <span class="token keyword">private</span> String mouse <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 鼠标</span>    <span class="token keyword">private</span> String computerCase <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//机箱</span>    <span class="token keyword">private</span> String mousePad <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//鼠标垫</span>    <span class="token keyword">private</span> String other <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//其它配件</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">,</span>String cpu<span class="token punctuation">,</span>String hd<span class="token punctuation">,</span>String powerSupplier<span class="token punctuation">,</span>                      String graphicsCard<span class="token punctuation">,</span>String mouse<span class="token punctuation">,</span>String computerCase<span class="token punctuation">,</span>String mousePad<span class="token punctuation">,</span>String other<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> mainBoard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hd <span class="token operator">=</span> hd <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>powerSupplier <span class="token operator">=</span> powerSupplier <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>graphicsCard <span class="token operator">=</span> graphicsCard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computerCase <span class="token operator">=</span> computerCase <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mousePad <span class="token operator">=</span> mousePad <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>other <span class="token operator">=</span> other <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">,</span>String cpu<span class="token punctuation">,</span>String hd<span class="token punctuation">,</span>String powerSupplier<span class="token punctuation">,</span>                    String graphicsCard<span class="token punctuation">,</span>String mouse<span class="token punctuation">,</span>String computerCase<span class="token punctuation">,</span>String mousePad<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> mainBoard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hd <span class="token operator">=</span> hd <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>powerSupplier <span class="token operator">=</span> powerSupplier <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>graphicsCard <span class="token operator">=</span> graphicsCard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computerCase <span class="token operator">=</span> computerCase <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mousePad <span class="token operator">=</span> mousePad <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略其它的构造方法和 setter 和 getter 方法<span class="token punctuation">}</span></code></pre><p>如果我们想要调用这个类就得在构参数方法中传递“无数个参数”「如果有的参是一些可选项，我们还得重写构造方法」，要么就要调用多个 setter 方法，才能给一个对象赋值，方法虽然可行，但是也太扯淡了「谁能记住那些参数呀」，那么建造者模式可以解决多参数构造方法来建造对象</p><ul><li>2、使用建造者建立 ComputerB.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 替代多参构造方法--建造者模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerB</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String mainBoard <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 主板</span>    <span class="token keyword">private</span> String cpu <span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// cpu</span>    <span class="token keyword">private</span> String hd <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 硬盘</span>    <span class="token keyword">private</span> String powerSupplier <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 电源</span>    <span class="token keyword">private</span> String graphicsCard<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显卡</span>    <span class="token comment" spellcheck="true">// 其它一些可选配置</span>    <span class="token keyword">private</span> String mouse <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 鼠标</span>    <span class="token keyword">private</span> String computerCase <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//机箱</span>    <span class="token keyword">private</span> String mousePad <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//鼠标垫</span>    <span class="token keyword">private</span> String other <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//其它配件</span>    <span class="token comment" spellcheck="true">// ComputerB 自己充当 Director </span>    <span class="token keyword">private</span> <span class="token function">ComputerB</span><span class="token punctuation">(</span>ComputerBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> builder<span class="token punctuation">.</span>mainBoard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> builder<span class="token punctuation">.</span>cpu <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hd <span class="token operator">=</span> builder<span class="token punctuation">.</span>hd <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>powerSupplier <span class="token operator">=</span> builder<span class="token punctuation">.</span>powerSupplier <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>graphicsCard <span class="token operator">=</span> builder<span class="token punctuation">.</span>graphicsCard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> builder<span class="token punctuation">.</span>mouse <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computerCase <span class="token operator">=</span> builder<span class="token punctuation">.</span>computerCase <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mousePad <span class="token operator">=</span> builder<span class="token punctuation">.</span>mousePad <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>other <span class="token operator">=</span> builder<span class="token punctuation">.</span>other <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明一个静态内存类 Builder</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ComputerBuilder</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一个电脑的必须配置</span>        <span class="token keyword">private</span> String mainBoard <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 主板</span>        <span class="token keyword">private</span> String cpu <span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// cpu</span>        <span class="token keyword">private</span> String hd <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 硬盘</span>        <span class="token keyword">private</span> String powerSupplier <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 电源</span>        <span class="token keyword">private</span> String graphicsCard<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显卡</span>        <span class="token comment" spellcheck="true">// 其它一些可选配置</span>        <span class="token keyword">private</span> String mouse <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 鼠标</span>        <span class="token keyword">private</span> String computerCase <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//机箱</span>        <span class="token keyword">private</span> String mousePad <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//鼠标垫</span>        <span class="token keyword">private</span> String other <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//其它配件</span>        <span class="token comment" spellcheck="true">// 这里声明一些必须要传的参数「规定这些参数是必须传的，这里只是举例，再实中可能参数都是可选的」</span>        <span class="token keyword">public</span> <span class="token function">ComputerBuilder</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">,</span>String cpu<span class="token punctuation">,</span>String hd<span class="token punctuation">,</span>String powerSupplier<span class="token punctuation">,</span>String graphicsCard<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> mainBoard <span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu <span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hd <span class="token operator">=</span> hd <span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>powerSupplier <span class="token operator">=</span> powerSupplier <span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>graphicsCard <span class="token operator">=</span> graphicsCard <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> ComputerBuilder <span class="token function">setMainBoard</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> mainBoard<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> ComputerBuilder <span class="token function">setCpu</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 其它的一些 <span class="token function">setXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法        <span class="token comment" spellcheck="true">// 生成最终的产品</span>        <span class="token keyword">public</span> ComputerB <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputerB</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码注释非常详细，乍一看好像和建造者模式没有毛关系，但是我们细细一分析这个确实是一个建造者模式，我们看一看：产品是–&gt;ComputerB,具体的建造者是一个静态内存类–&gt;ComputerBuilder,但是没有抽象的建造者和指挥者「其实 ComputerB 充当的就是指挥者的角色」，我们说过建造者模式中指挥者和抽象建造者都不是必须的，所以这是一个典型的建造者模式</p><ul><li>3、如何调用来个测试类 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不使用建造者模式</span>        Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">"主板"</span><span class="token punctuation">,</span><span class="token string">"cpu"</span><span class="token punctuation">,</span><span class="token string">"hd"</span><span class="token punctuation">,</span><span class="token string">"电源"</span><span class="token punctuation">,</span><span class="token string">"显卡"</span>        <span class="token punctuation">,</span><span class="token string">"鼠标"</span><span class="token punctuation">,</span><span class="token string">"机箱"</span><span class="token punctuation">,</span><span class="token string">"鼠标垫"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用普通的构造方法组装电脑："</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用建造者模式</span>        ComputerB computerB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerB<span class="token punctuation">.</span>ComputerBuilder</span><span class="token punctuation">(</span><span class="token string">"主板"</span><span class="token punctuation">,</span><span class="token string">"cpu"</span><span class="token punctuation">,</span><span class="token string">"hd"</span><span class="token punctuation">,</span><span class="token string">"电源"</span><span class="token punctuation">,</span><span class="token string">"显卡"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMouse</span><span class="token punctuation">(</span><span class="token string">"鼠标"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMousePad</span><span class="token punctuation">(</span><span class="token string">"垫子"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用建造者模式组装电脑："</span><span class="token operator">+</span>computerB<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们分别使用普通构造方法「调用者能吐血」和建造者模式组装电脑，可以看到建造者模式调用 new ComputerB.ComputerBuilder(xxx).setxxx().setxxx().build() 调用方法直接打点调用「也叫流式调用，这样调用方便多了，想点那个就点那个」，如果使用过 rx 的话会非常有感觉</p><ul><li>4、运行查看一下结果</li></ul><img src="/2019/07/07/builder/computer_replace_cons.png" title="替代多参数构造方法的的建造者模式结果"><p>如果在以后如果遇到多参数构造对象的时候不仿考虑使用建造者模式</p><h3 id="三、Android-源码中的建造者模式"><a href="#三、Android-源码中的建造者模式" class="headerlink" title="三、Android 源码中的建造者模式"></a>三、Android 源码中的建造者模式</h3><blockquote><p>1、AlertDialog</p></blockquote><p>做 Android 的朋友一定不会对 AlertDialog 陌生，它是一个可以添加列表、单选列表、文本输入框，多选列表等弹窗组件，内部使用的是典型的建造者模式，我们看看 AlertDialog 的基本使用方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建构建器</span>   AlertDialog<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用建造者模式代替多参构造函数</span>   Dialog dialog<span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>XXX<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>XXX<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setXXX</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   dialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><p><code>AlertDialog 简单的 UML</code></p><img src="/2019/07/07/builder/AlertDialogUml.jpg" title="AlertDialog 简单的 UML"><p><code>AlertDialog 核心代码剥离</code></p><img src="/2019/07/07/builder/AlertDialog_Code.png" title="AlertDialog 核心代码剥离"><p>上图明显的显示出了 AlertDialog 的建造者模式「AlertDialog.Builder 同时扮演了 Builder、ConcreateBuilder、Director 等角色」</p><blockquote><p>2、Notification 的 setLatestEventInfo 方法「过时了，但是思想可以学习」</p></blockquote><p>我们看看 Notification 的 setLatestEventInfo 一看便知道使用的是建造者模式，我们看下图</p><img src="/2019/07/07/builder/notification.png" title="setLatestEventInfo"><p>以上的方法被 Notification.Builder 替代了「setLatestEventInfo 从终也是调用 Notification.Builder」，真正的建造者模式是 Notification.Builder </p><p>如果要支持到低版本可以使用 android.support.v4.app.NotificationCompat.Builder 来创建 Notification 名字一看又是一个建造者模式，感兴趣的可以看看 NotificationCompat.Builder 的源码</p><blockquote><p>3、AnimatorSet.Builder</p></blockquote><p>AnimatorSet 用作将一个动画集合按选定的顺序执行，我们可以使用 AnimatorSet.Builder 添加播放动画顺序「这只是其中一个方法」</p><p><code>使用方法举例</code></p><pre class=" language-java"><code class="language-java">AnimatorSet animSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatorSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//AnimatorSet.Builder 不能直接建立 ，只能通过 play(Animation)</span>AnimatorSet<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> animSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>anim2<span class="token punctuation">)</span><span class="token punctuation">;</span>  builder<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>anim3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>anim1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>anim4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// anim1先执行，然后再同步执行anim2、anim3，最后执行anim4  </span>animSet<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  animSet<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p><code>核心代码</code></p><img src="/2019/07/07/builder/AnimatorSet_builder.png" title="AnimatorSet.Builder 部分代码"><h3 id="四、建造者模式的优缺点"><a href="#四、建造者模式的优缺点" class="headerlink" title="四、建造者模式的优缺点"></a>四、建造者模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、使创建产品的步骤「把创建产品步骤放在不同的方法中，更加清晰直观」和产品本身分离，即使用相同的创建过程要吧创建出不同的产品</li><li>2、每个建造者都是独立的互不影响，这样就达到解耦的目的，所以如果想要替换现有的建造者那非常方便，添加一个实现即可。</li></ul><blockquote><p>缺点</p></blockquote><ul><li>1、只适用于产品具有相同的特点「过程和步骤」，如果产品之间差异非常大，则不适用「使用范围受限」</li><li>2、万一那天产品内部发生改变，那多个建造者都要修改，成本太大</li></ul><h3 id="五、建造者模式的使用场景"><a href="#五、建造者模式的使用场景" class="headerlink" title="五、建造者模式的使用场景"></a>五、建造者模式的使用场景</h3><ul><li>1、如果一个对象有非常复杂的内部结构「这些产品通常有很多属性」，那么使用建造者模式</li><li>2、如果想把复杂对象的创建和使用分离开来，那么使用建造者模式「使用相同的创建步骤可以创建不同的产品」</li></ul><h3 id="六、建造者模式-VS-简单工厂模式"><a href="#六、建造者模式-VS-简单工厂模式" class="headerlink" title="六、建造者模式 VS 简单工厂模式"></a>六、建造者模式 VS 简单工厂模式</h3><blockquote><p>相似点</p></blockquote><p>它们都属于创建型模式「都是创建产品的」</p><blockquote><p>区别 </p></blockquote><ul><li>1、创建对象的粒度不同</li></ul><p>工厂模式创建的对象都是一个鸟样子，而建造者模式创建的是一个复合产品，由各个复杂的部件组成，部件不同所构成的产品也不同</p><ul><li>2、关注点不同：</li></ul><p>工厂模式注重只要把这个对象创建出来就 o 了「不关心这个产品的组成部分」，而建造者模式不仅要创造出这个产品，还有知道这个产品的组成部分</p><p>到此为止，我们就介绍完了建造者模式，一定要动手试一下哦！你们的支持是我最大的动力</p><p>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容<br>本文出自 <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">人人都会设计模式</a></p><p><a href="https://mp.weixin.qq.com/s/Qiu8koRHd9oSWQO05Wumhw" target="_blank" rel="noopener">阅读原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06、观察者模式</title>
      <link href="/2019/07/06/observer/"/>
      <url>/2019/07/06/observer/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/06/observer/observer.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 FactoryPatttern/Observer 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是观察者模式"><a href="#一、什么是观察者模式" class="headerlink" title="一、什么是观察者模式"></a>一、什么是观察者模式</h3><h4 id="1、生活中的观察者模式"><a href="#1、生活中的观察者模式" class="headerlink" title="1、生活中的观察者模式"></a>1、生活中的观察者模式</h4><blockquote><p>1、警察抓小偷</p></blockquote><p>在现实生活中，警察抓小偷是一个典型的观察者模式「这以一个惯犯在街道逛街然后被抓为例子」，这里小偷就是被观察者，各个干警就是观察者，干警时时观察着小偷，当小偷正在偷东西「就给干警发送出一条信号，实际上小偷不可能告诉干警我有偷东西」，干警收到信号，出击抓小偷。这就是一个观察者模式</p><blockquote><p>2、装模作样写作业</p></blockquote><p>小时候家里家活比较多，爸妈让我去干活的时候，我偶尔会说我要学习「其实不想去干活，当然只是偶尔，我还是常常干家务的」，然后爸妈就去地里了，我一个人在家里，先摆出一张桌子「上面放好想看的书」，然后打开电视机看起电视剧，但是又怕家里人回到家中看到我在看电视，于是把家里的大门锁住「当爸妈回的时候肯定要开门」，当我听见开门声就会立马关掉电视，做到作业桌上「装模作样写作业」—-在这过程中：我充当的就是观察者，爸妈就是被观察者，他们开门就会触发门响「相当于告诉我说他们回来了」，我听到响声「关电视，写作业」，有过类似的经验的朋友们下面点个赞</p><blockquote><p>3、远程视频会议等</p></blockquote><p>老板和员工远程开会：老板是被观察者，员工是观察者。微信公号：微信公号作者是被观察者，微信用户是观察者「当公号作者发送一篇文章，关注了公号的观察者都可以收到文章」等</p><h4 id="2、程序中的观察者模式"><a href="#2、程序中的观察者模式" class="headerlink" title="2、程序中的观察者模式"></a>2、程序中的观察者模式</h4><blockquote><p>观察者模式的定义</p></blockquote><p>观察者模式描述的是一种一对多的关系「一个被观察者对应多个观察者」，当被观察者的状态发生改变时，所有观察者都会得到通知。通俗的理解：观察者模式就是在特定的时刻「被观察者发送通知」干特定的事情「观察者收到通知处理自己相应的事件」</p><img src="/2019/07/06/observer/one_more.png" title="观察者模式是一种一对多关系"><blockquote><p>观察者模式的特点</p></blockquote><p>观察者模式的三要素：观察者，被观察者，事件「订阅」</p><blockquote><p>观察者模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Subject</td><td>接口或抽象类</td><td>主题也叫被观察者</td></tr><tr><td>RealSubject</td><td>真实的主题类</td><td>具体的被观察者，内部维护了观察者的列表</td></tr><tr><td>IObserver</td><td>观察者接口或抽象类</td><td>抽象出观察者的接口</td></tr><tr><td>RealObserver</td><td>具体的观察者</td><td>被观察者有更新，观察者立马响应更新</td></tr></tbody></table><blockquote><p>观察者模式简单的 UML</p></blockquote><img src="/2019/07/06/observer/Observer_UML.jpg" title="观察者模式简单的 UML"><h3 id="二、观察者模式举例"><a href="#二、观察者模式举例" class="headerlink" title="二、观察者模式举例"></a>二、观察者模式举例</h3><p>在举例之前，我们先看看一个概念–回调，什么是回调：就调用一圈又回到自已了「通俗的就可以这样认为」</p><h4 id="1、回调"><a href="#1、回调" class="headerlink" title="1、回调"></a>1、回调</h4><blockquote><p>例子一：小明叫爸爸吃饭</p></blockquote><p>举个例子，小明妈妈做好了饭，让小明去地里叫他爸回来吃饭，小明说好的我马上去，过了半个小时小明和他爸一起来了，小明给妈妈的说：“妈，爸回来了”，妈妈说：“好的我知道了，让你爸洗洗手吃饭吧”，在这一过程中，小明给妈妈的说：“妈，爸回来了”就是一个回调，不好理解？那看代码吧</p><p><code>小明叫爸爸吃饭简单的 UML</code></p><img src="/2019/07/06/observer/xiaomingUML.jpg" title="小明叫爸爸吃饭简单的 UML"><p><code>写代码</code></p><ul><li>1、定义一个回调接口</li></ul><img src="/2019/07/06/observer/xm_callback.png" title="回调接口"><ul><li>2、定义妈妈类</li></ul><img src="/2019/07/06/observer/mom_class.png" title="妈妈"><ul><li>3、定义小明类</li></ul><img src="/2019/07/06/observer/xiaoming_class.png" title="小明类"><ul><li>4、测试</li></ul><img src="/2019/07/06/observer/xiaoming_test.png" title="测试类"><ul><li>5、运行查看结果</li></ul><img src="/2019/07/06/observer/xiaoming_result.png" title="结果"><p>这就是回调，我们看看的数据的走向 Mom–&gt;xiaoming–&gt;Mom 转了一圈回来了，这就是回调</p><blockquote><p>例子二，模拟Android 中 View 的点击事件</p></blockquote><p>经过例子一，我敢保证多数朋友对回调还是稀里糊涂，不要紧，我们再来一个例子感受一下，做过 Android 的朋友一定调用过 View.setOnclickListener(OnClickListener onClickListener) 点击函数,没错 OnClickListener 就是一个回调接口，我们来使用  代码模拟一下这个过程 </p><p><code>先看一下 UML</code></p><img src="/2019/07/06/observer/moniviewclick.jpg" title="自定义 View 点击事件的 UML"><p><code>根据 UML 写代码</code></p><ul><li>1、 定义一个 View 类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> OnClickListener onClickListener <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 触发点击事件</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>onClickListener <span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            onClickListener<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置回调</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnClickListener</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onClickListener <span class="token operator">=</span> onClickListener <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义回调方法</span>        <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义一个 Button 类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一个按钮 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、测试类 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Button button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//看到了没，看到这里是不是很亲切，是不是发现 次哦！ 这就是回调</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"自定义 View 的回调事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟用户点击这个运作，Android 系统的 View 是重写手势来调用这个方法的，没有暴露给用户</span>        button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、运行查看结果</li></ul><img src="/2019/07/06/observer/cutomview_result.png" title="测试自定义 View 点击事件结果"><p>如果你看 Android 源码，或是三方的源码会发现好多这样的回调方法，比如网络请求成功失败的回调等。</p><blockquote><p>使用观察者模式实现自定义 View</p></blockquote><ul><li>定义 View 「被观察者」</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被观察者的列表</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>OnClickListener<span class="token operator">></span> onClickListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 触发通知</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token operator">:</span>onClickListeners<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>onClickListener <span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                onClickListener<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注册观察者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnClickListener</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>        onClickListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义通知的方法</span>        <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unRegister</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>onClickListeners<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            onClickListeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>这里的 OnClickListener 就是抽象的观察者</p><ul><li>2、定义一个 Button </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>3、测试 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个被观察者</span>        Button button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册其中一个观察者</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TigerChain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册另一个观察者</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"never give up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 被观察者触发事件</span>        button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、运行查看结果</li></ul><img src="/2019/07/06/observer/observer_view.png" title="观察者实现 View 的点击事件"><p><strong>PS:总结</strong>看到了没，观察者模式和回调是如此的相似，如果我们把上面的注册观察者改成一个「和 View 回调一模一样」，可以说回调是一种特殊的观察者模式，回调和观察者联系和区别</p><ul><li>1、回调可以说只有一个观察者，是一对一，是一种特殊的观察者模式「我是这样的认为的，个人观点，如果有误欢迎指出」</li><li>2、观察者：被观察者持有观察的列表，是一种一对多的关系</li><li>3、回调是一种监听方式，观察者模式是一种解决方案「设计模式」</li></ul><p>有了回调的基础，下面我们来看看观察者模式的几个精典例子</p><h4 id="2、观察者举例"><a href="#2、观察者举例" class="headerlink" title="2、观察者举例"></a>2、观察者举例</h4><blockquote><p>1、微信公号推送文章</p></blockquote><p>最近看了我文章的人都知道我最近在写关于设计模式这一系列，在这里我「TigerChain」就是一个被观察者，普通的微信用户就是观察者，如果微信用户关注了 TigerChain ,那么我推送的每一篇的文章，微信用户就会第一时间收到我的文章「订阅 TigerChain的用户」，这就是一个典型的观察者模式</p><p><code>微信公号推送文章简单的 UML</code></p><img src="/2019/07/06/observer/TigerChainWxObserver.jpg" title="微信公号推送文章简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、定义抽象的被观察者 IWxServerSubject.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义主题「被观察者接口」，所有的公号作者共同属性「其实这里功能上微信系统的功能，直接抽象成被观察者」 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWxServerSubject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加观察者</span>    <span class="token keyword">void</span> <span class="token function">attchObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移除观察者</span>    <span class="token keyword">void</span> <span class="token function">detachObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知观察者</span>    <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义抽象的观察者接口 IObserver.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义观察者接口,即关注公号的微信用户共同属性 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IObserver</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 观察者收到信息,内容为 info</span>    <span class="token keyword">void</span> <span class="token function">reciveContent</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义具体的被观察者「公号作者 TigerChain」 TigerChainSubject.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一个真实的被观察者 TigerChain「公号的作者」 * 里面存了订阅 TigerChain 微信公众账号的读者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TigerChainSubject</span> <span class="token keyword">implements</span> <span class="token class-name">IWxServerSubject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 订阅者列表「观察者列表」，即关注 TigerChain 公号的读者</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>IObserver<span class="token operator">></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//作者更新公号的内容 </span>    <span class="token keyword">private</span> String updateContent <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attchObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>iObserver<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>iObserver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>iObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>IObserver iObserver<span class="token operator">:</span>observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            iObserver<span class="token punctuation">.</span><span class="token function">reciveContent</span><span class="token punctuation">(</span>updateContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否关注我的公号     * @param iObserver     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAttchObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>iObserver<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * TigerChain 在公号中发布文章     * @param updateContent     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitContent</span><span class="token punctuation">(</span>String updateContent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>updateContent <span class="token operator">=</span> updateContent <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义一个具体的观察者「普通的微信用户」 ReaderObserver.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 微信用户 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReaderObserver</span> <span class="token keyword">implements</span> <span class="token class-name">IObserver</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 微信用户的姓名</span>    <span class="token keyword">private</span> String uname <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ReaderObserver</span><span class="token punctuation">(</span>String uname<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reciveContent</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uname<span class="token operator">+</span><span class="token string">"注意，TigerChain 发送了文章---"</span><span class="token operator">+</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到微信用户有接收推送文章的能力「前提是要关注公号作者」</p><ul><li>5、来个 Test 类测试一下吧</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        IWxServerSubject iWxServerSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TigerChainSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 微信用户</span>        ReaderObserver zhangsai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReaderObserver</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        ReaderObserver lisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReaderObserver</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        ReaderObserver wangwu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReaderObserver</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        ReaderObserver zhaoLiu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReaderObserver</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 微信用户张三关注我的公号「即订阅」</span>        iWxServerSubject<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span>zhangsai<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 微信用户李四关注我的公号「即订阅」</span>        iWxServerSubject<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span>lisi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 微信用户王五关注我的公号「即订阅」</span>        iWxServerSubject<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span>wangwu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 我「被观察者」发布了一篇文章--观察者模式</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>TigerChainSubject<span class="token punctuation">)</span>iWxServerSubject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submitContent</span><span class="token punctuation">(</span><span class="token string">"人人都会设计模式：观察者模式"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isAttch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TigerChainSubject<span class="token punctuation">)</span>iWxServerSubject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAttchObserver</span><span class="token punctuation">(</span>zhaoLiu<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isAttch<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zhaoLiu<span class="token punctuation">.</span><span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"你好！你还没有关注 TigerChain ，请关注先，谢谢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们看到和现实情况一样，普通微信用户关注公号作者，然后作者发送文章，用户就可以收到文章了</p><ul><li>6、运行查看结果</li></ul><img src="/2019/07/06/observer/wx_result.png" title="TgierChain 发送一篇文章结果"><blockquote><p>2、狼王开会</p></blockquote><p>话说冬天来了，狼得找过冬的食物，狼王组织如开了紧急会议，下面的群狼都看着狼王传递会议精神和安排任务，此时狼王就是被观察者，群狼就是观察者，我们来看看 UML</p><p><code>狼王开会简单的 UML</code></p><img src="/2019/07/06/observer/wolf_observer.jpg" title="狼王开会简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、抽象被观察者功能 IWolf.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象的被观察者 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加观察者</span>    <span class="token keyword">void</span> <span class="token function">attchObserver</span><span class="token punctuation">(</span>NormalWolf observer<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移除观察者</span>    <span class="token keyword">void</span> <span class="token function">detchObserver</span><span class="token punctuation">(</span>NormalWolf observer<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知观察者</span>    <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、抽象观察者普通的狼 NormalWolf.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by 抽象的观察者，普通的狼 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">NormalWolf</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拿到被观察者的引用</span>    <span class="token keyword">protected</span> IWolf iWolf <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 收到狼王下达的命令     * @param str     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">reciveCommand</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义具体的被观察者狼王 LangWang.</li></ul><p>由于一个狼群中只有一个狼王，所以狼王是一个单例「顺便把单例模式也用一把」</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 狼王「被观察者，下面的狼都看狼王的眼色行事」，是一个单例模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LangWang</span> <span class="token keyword">implements</span> <span class="token class-name">IWolf</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LangWang instance <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">LangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LangWang <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LangWang<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 除过狼王外的狼「观察者」</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>NormalWolf<span class="token operator">></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 狼王下达的命令</span>    <span class="token keyword">private</span> String mingLing  <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attchObserver</span><span class="token punctuation">(</span>NormalWolf observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detchObserver</span><span class="token punctuation">(</span>NormalWolf observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>NormalWolf observer<span class="token operator">:</span>observers<span class="token punctuation">)</span><span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">reciveCommand</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 下达命令     * @param mingLing     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xiaDaMingling</span><span class="token punctuation">(</span>String mingLing<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mingLing <span class="token operator">=</span> mingLing <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyObserver</span><span class="token punctuation">(</span>mingLing<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义一个观察者侦查狼 ZhenChaLang.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 侦查狼，另一个观察者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhenChaLang</span> <span class="token keyword">extends</span> <span class="token class-name">NormalWolf</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ZhenChaLang</span><span class="token punctuation">(</span>IWolf iWolf<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iWolf <span class="token operator">=</span> iWolf <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iWolf<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reciveCommand</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"侦查狼：狼王开会传递的信息是 \n"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这里我们实例化一个侦查狼的时候就会把它注册到被观察者中，也就是狼王开会的时候，群狼肯定狼群中的一员「外来狼可不行」，只有内部狼「内部会员」才有资格开会「这种关系就相当于注册这个过程」</p><ul><li>5、定义另一个观察者捕猎狼 BuLieLang.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 捕猎狼---观察者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuLieLang</span> <span class="token keyword">extends</span> <span class="token class-name">NormalWolf</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">BuLieLang</span><span class="token punctuation">(</span>IWolf iWolf<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iWolf <span class="token operator">=</span> iWolf <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加观察者，即捕猎狼放在狼王组织中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iWolf<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reciveCommand</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"捕猎狼：狼王开会传递的信息是 \n"</span><span class="token operator">+</span>string<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>测试类 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用单例模式</span>        LangWang langWang <span class="token operator">=</span> LangWang<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        BuLieLang buLieLang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuLieLang</span><span class="token punctuation">(</span>langWang<span class="token punctuation">)</span> <span class="token punctuation">;</span>        ZhenChaLang zhenChaLang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhenChaLang</span><span class="token punctuation">(</span>langWang<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 狼王下达命令就是发送通知</span>        langWang<span class="token punctuation">.</span><span class="token function">xiaDaMingling</span><span class="token punctuation">(</span><span class="token string">"1、分工合作，捕猎狼根据侦查狼反馈看机行事 \n"</span> <span class="token operator">+</span>                                     <span class="token string">"2、侦查狼永远把危险放在第一位，遇到危险第一时间提醒大家撤退"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/06/observer/langwang_observer.png" title="狼王观察者 demo 结果"><p>狼王下达命令就是发送通知，那么现场中的狼都会收到通知，典型的观察者模式</p><blockquote><p>3、自定义 EventBus</p></blockquote><p>在 Android 中我们常常使用 EventBus,它相当于是一个单例广播，我们来自定义一个简单的 EventBus 「不考虑线程切换」，其实它也是一种观察者模式「俗称发布、订阅模式」</p><p><code>自定义　EventBus 简单的 UML</code></p><img src="/2019/07/06/observer/CustomEventBus_UML.jpg" title="自定义 EventBus 简单的 UML"><p>代码这里不贴了，我已经上传到 github 上了，大家可以自行看看：<a href="https://github.com/tigerchain/DesignPattern/tree/master/app/src/main//designpattern/jun/com/designpattern/Observer/CustomEventBus" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern/tree/master/app/src/main//designpattern/jun/com/designpattern/Observer/CustomEventBus</a></p><h3 id="三、Android-源码中的观察者模式"><a href="#三、Android-源码中的观察者模式" class="headerlink" title="三、Android 源码中的观察者模式"></a>三、Android 源码中的观察者模式</h3><blockquote><p>1、RecyclerView 中使用观察者模式</p></blockquote><p><code>RecyclerView 中观察者模式简单的 UML</code></p><img src="/2019/07/06/observer/RecyclerViewObserverUml.jpg" title="RecyclerView 中观察者模式简单的 UML"><p>源码就不分析了「贴出代码估计又得一篇来说」，给出下面流程，大家自行看一下就明白了，动动手印象更深</p><p><code>从 setAdapter 开始看一下观察者流程</code></p><img src="/2019/07/06/observer/setadapter_call_step.png" title="setAdapter 观察者流程"><blockquote><p>2、ViewTreeObserver </p></blockquote><p>ViewTreeObserver 是用来监听视图树的观察者，如果视图树发生全局改变的时候就会收到通知</p><p>其中，被观察者是 ViewTree ，观察者是 ViewTreeObserver</p><img src="/2019/07/06/observer/viewtreeobserver_listener.png" title="观察者 ViewTreeObserver"><p><code>抽取 ViewTreeObserver 部分代码讲解</code></p><p>这里说说 view.getViewTreeObserver().addOnGlobalLayoutListener(xxx) 场景，其它的雷同</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ViewTreeObserver</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnGlobalLayoutListener</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 添加监听器</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOnGlobalLayoutListener</span><span class="token punctuation">(</span>OnGlobalLayoutListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkIsAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnGlobalLayoutListeners <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnGlobalLayoutListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArray</span><span class="token operator">&lt;</span>OnGlobalLayoutListener<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mOnGlobalLayoutListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 分发事件相当于发送通知，即被观察者调用--View</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">dispatchOnGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> CopyOnWriteArray<span class="token operator">&lt;</span>OnGlobalLayoutListener<span class="token operator">></span> listeners <span class="token operator">=</span> mOnGlobalLayoutListeners<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> listeners<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            CopyOnWriteArray<span class="token punctuation">.</span>Access<span class="token operator">&lt;</span>OnGlobalLayoutListener<span class="token operator">></span> access <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> access<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    access<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                listeners<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>现在我们有了观察者 ViewTreeObserver ，观察者是 ViewTree 我们说了，主要问题的就是 dispatchOnGlobalLayout 谁调用了，只有触发了这个方法那么事件就回调回来了「这个方法肯定是被观察者调用了，系统调用的」，方法在 ViewRootImpl「关于 ViewRootImpl 可自行去查看，不在本篇的范围」 中体现出来了</p><p><code>看看 ViewRootImpl 的部分代码</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ViewRootImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ViewParent</span><span class="token punctuation">,</span>        View<span class="token punctuation">.</span>AttachInfo<span class="token punctuation">.</span>Callbacks<span class="token punctuation">,</span> ThreadedRenderer<span class="token punctuation">.</span>DrawCallbacks <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 执行测量</span>    <span class="token function">performMeasure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 执行布局</span>    <span class="token function">performLayout</span><span class="token punctuation">(</span>lp<span class="token punctuation">,</span> mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>triggerGlobalLayoutListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mAttachInfo<span class="token punctuation">.</span>mRecomputeGlobalAttributes <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意看这里，这里触发了 dispatchOnGlobalLayout 方法，系统调用</span>        mAttachInfo<span class="token punctuation">.</span>mTreeObserver<span class="token punctuation">.</span><span class="token function">dispatchOnGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 执行绘制</span>    <span class="token function">performDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>看到了没，mAttachInfo.mTreeObserver.dispatchOnGlobalLayout() 方法是在 ViewRootImpl 中调用了「即是 View 调用了，只要 View 树而已发生改变，就会调用」，是由系统调用的「View 的布局完成这后，就会调用」，并且还调用了自定义 View 的测量，布局，绘制方法。</p><p>使用场景：比如我们想在 Activity 的 onCreate() 方法中取得某个 View 的宽高，此时是取不到的，由于布局还没有完成加载之前取到的是 0 ,所以使用 view.getViewTreeObserver().addOnGlobalLayoutListener(xxx) 里面就可以获取到 view 的宽高了,demo 代码如下</p><pre class=" language-java"><code class="language-java">  view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 当layout执行结束后回调</span>                <span class="token comment" spellcheck="true">//使用完必须撤销监听（只测量一次），否则，会一直不停的不定时的测量，这比较耗性能</span>                view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Added in API level 16</span>                <span class="token comment" spellcheck="true">//view.getViewTreeObserver().removeGlobalOnLayoutListener(this);//废弃了</span>                <span class="token keyword">int</span> width <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> width2 <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//和上面的值是一样的</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>3、ListView</p></blockquote><p>ListView 中使用观察者模式和 RecyclerView 类似，大家可以扒扒这部分源码，这里就不说了</p><h3 id="四、观察者模式的优缺点"><a href="#四、观察者模式的优缺点" class="headerlink" title="四、观察者模式的优缺点"></a>四、观察者模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、解耦，被观察者只知道观察者列表「抽象接口」，被观察者不知道具体的观察者</li><li>2、被观察者发送通知，所有注册的观察者都会收到信息「可以实现广播机制」</li></ul><blockquote><p>缺点</p></blockquote><ul><li>1、如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时</li><li>2、观察者知道被观察者发送通知了，但是观察者不知道所观察的对象具体是如何发生变化的</li><li>3、如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃</li></ul><p>到此为止，我们的观察者模式就说完了，一定要扒扒 Android 源码中相应的观察者模式，你会有一种恍然大悟的感觉，转发是一种美德</p><p>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容<br>本文出自 <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">人人都会设计模式</a></p><p><a href="https://mp.weixin.qq.com/s/8yRv41V3dkXOzwoeLBnqNQ" target="_blank" rel="noopener">阅读原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05、代理模式</title>
      <link href="/2019/07/05/proxy/"/>
      <url>/2019/07/05/proxy/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/05/proxy/proxy_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 FactoryPatttern/Proxy 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是代理模式"><a href="#一、什么是代理模式" class="headerlink" title="一、什么是代理模式"></a>一、什么是代理模式</h3><h4 id="1、生活中的代理"><a href="#1、生活中的代理" class="headerlink" title="1、生活中的代理"></a>1、生活中的代理</h4><blockquote><p>1、微商代理</p></blockquote><p>代理在生活中就太多了，比如微商，在朋友圈中很多时候都可以看到微商说城招全国代理「不需要货源，不需要启动资金，只需要一个电话就能做生意，好吧我口才不好，没有人家吹的好」，这类代理就是替卖家出售商品</p><blockquote><p>2、追女孩</p></blockquote><p>遥想当年情窦初开「初中的时候」，喜欢上了一个女子，可是迫于害羞，就给女孩子写了几封情书，买了一束花「但是自己没有那个贼胆送」，就让我们班里一个和女孩认识的朋友交给她，现在想来原来帮我送情书的女生就是我的代理呀「帮我完成我想要完成的事」~~嘻嘻。话说谁还干类似的事，就在文章末尾点个赞</p><blockquote><p>3、代销店等</p></blockquote><p>其实就是现在的商店，以前小的时候听家乡人叫代销店，也是一种代理模式。细细一想，跑业务的也是代理，律师也是代理，明星的助理就是代理，京东送货机器人是代理，共享”女友”,那个”女友”也是代理「你懂得」，等等等等。不敢再说了，再说万物都成代理了「不好意思，又忘了吃药了」</p><h4 id="2、程序中的代理"><a href="#2、程序中的代理" class="headerlink" title="2、程序中的代理"></a>2、程序中的代理</h4><p>其实程序中使用的代理是非常多的，我们在编写 MVC 业务的时候就可以使用代理模式「可以让客户端使用代理仿问接口」，一般使用最多的是动态代理 </p><blockquote><p>代理模式的定义</p></blockquote><p>所谓代理就是代表某个真实对象，也就是代理拿到真实对象的引用然后就可以实现真实对象中的功能了</p><blockquote><p>代理模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>AbstractObject</td><td>接口或抽象类</td><td>抽象出共同的属性</td></tr><tr><td>RealObject</td><td>真实的类</td><td>实现了抽象角色</td></tr><tr><td>Prxoy</td><td>代理的类</td><td>实现了抽象角色，持有真实类的引用</td></tr></tbody></table><blockquote><p>代理模式简单的 UML</p></blockquote><img src="/2019/07/05/proxy/proxy_uml.jpg" title="代理模式简单的 UML"><blockquote><p>代理模式的分类</p></blockquote><ul><li>远程代理：为不同地理的对象提供局域网代表对象</li><li>虚拟代理：根据需要将资源消耗很大的对象进行延迟，真正需要的时候再创建</li><li>安全代理：控制用户的访问权限</li><li>智能代理：提供对目标对象额外的服务「使用最多的」</li></ul><blockquote><p>代理模式的实现方式「属于智能代理」</p></blockquote><ul><li>静态代理方法</li><li>动态代理方法</li></ul><h3 id="二、代理模式举例"><a href="#二、代理模式举例" class="headerlink" title="二、代理模式举例"></a>二、代理模式举例</h3><blockquote><p>1、帮忙追 MM</p></blockquote><p>话说在高中期间，小明看上了我们班一位女同学，可是小明是一个害羞胆小的人「有贼心没贼胆」，于是小明跑到我的跟前:Chain 哥，我看上了咱们班的小倩，你能帮我追一下吗 …. 。听小明巴拉巴拉一大堆，本着哥们义气的我非常爽快的答应了，就有了下面的追 MM 手段</p><p><code>简单的 UML</code></p><img src="/2019/07/05/proxy/prxoy_mm.jpg" title="我帮小明追 MM"><p><code>根据 UML 撸码--这里使用静态代理方法</code></p><ul><li>1、要追 MM 首先肯定有 MM ，定义 MM.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MM</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 姓名 </span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄 </span>    <span class="token keyword">private</span> String address <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 住址</span>    <span class="token keyword">public</span> <span class="token function">MM</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义一个追 MM 方法的接口 ZhuimmWay.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 追 MM 的方法，是一个抽象角色 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ZhuimmWay</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 送花</span>    <span class="token keyword">void</span> <span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写情书</span>    <span class="token keyword">void</span> <span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 买衣服</span>    <span class="token keyword">void</span> <span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 干一些其它的事</span>    <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、主人公小明上场 XiaoMing.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 主人公小明，真正的角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token keyword">implements</span> <span class="token class-name">ZhuimmWay</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 要追的 MM</span>    <span class="token keyword">private</span> MM mm <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">like</span><span class="token punctuation">(</span>MM mm<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mm <span class="token operator">=</span> mm <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 送给你一朵花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 给你八封情书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 这是给你买的衣服"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给 "</span><span class="token operator">+</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"说好听的话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给 "</span><span class="token operator">+</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"洗衣服，买单等等一系列手段"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、代理人 TigerChain 上场 ProxyTigerChain.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 代理人，我上场了，感觉像媒婆 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTigerChain</span> <span class="token keyword">implements</span> <span class="token class-name">ZhuimmWay</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> XiaoMing xiaoMing <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyTigerChain</span><span class="token punctuation">(</span>XiaoMing xiaoMing<span class="token punctuation">,</span> MM mm<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>xiaoMing <span class="token operator">=</span> xiaoMing <span class="token punctuation">;</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、一切准备就绪，开始追吧，来个测试类 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 主人公小明</span>        XiaoMing xiaoMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要追的人小倩</span>        MM xiaoqian <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MM</span><span class="token punctuation">(</span><span class="token string">"小倩"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小明委托我去帮他追小倩</span>        ProxyTigerChain proxyChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyTigerChain</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">,</span>xiaoqian<span class="token punctuation">)</span> <span class="token punctuation">;</span>        proxyChain<span class="token punctuation">.</span><span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyChain<span class="token punctuation">.</span><span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyChain<span class="token punctuation">.</span><span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyChain<span class="token punctuation">.</span><span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/05/proxy/mm_result.png" title="追 MM 方法验证"><p>上面的代码完美吗？完美个鸟鸟，试想把 Test 比做一个场景：比如是在 KTV ，我靠，小明不是害羞吗？竟然也出现在 KTV 中「如果小明能当明看着你帮他追小倩，早就自己动手了」，所以按正常逻辑小明不应该出现在 KTV「Test 中」</p><ul><li>7、修改代码，我们添加一个 ZhuimmFactory.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一个工厂类，这样就屏蔽了客户端对代理的感知 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhuimmFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ZhuimmWay <span class="token function">getInstance</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProxyTigerChain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MM</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>嘻嘻，不知不觉又用到以前学到的简单工厂模式了「学以致用，不错不错」，我们把代理事情都放在工厂中去做，这样客户端对代理是无感知的，这也符合程序开发的正常逻辑</p><ul><li>8、修改 Test 端调用代码 </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用者不知道调用的是代理类还是真实类，这才是正常的逻辑呀</span>        ZhuimmWay zhuimmWay <span class="token operator">=</span> ZhuimmFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"小倩"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        zhuimmWay<span class="token punctuation">.</span><span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhuimmWay<span class="token punctuation">.</span><span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhuimmWay<span class="token punctuation">.</span><span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhuimmWay<span class="token punctuation">.</span><span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>9、运行查看结果</li></ul><img src="/2019/07/05/proxy/mm_result.png" title="追 MM 方法验证"><p>想知道结局吗？很不幸，小倩也有点”白痴”，我提醒好多次是小明喜欢她「其实我最多是代理小明送花等这些事情，也就是说钱花小明的，美女我来追」，可是她最终还是看上我了「有点自恋」，所以以后追 MM 的时候，千万千万不要找代理「以上故事纯属虚构，如有雷同，那么小明以后就张点心吧」</p><blockquote><p>2、真假美猴王</p></blockquote><h5 id="1、使用静态代理完成"><a href="#1、使用静态代理完成" class="headerlink" title="1、使用静态代理完成"></a>1、使用静态代理完成</h5><p><code>六耳猕猴梦想简单的 UML</code></p><img src="/2019/07/05/proxy/Liuer.jpg" title="六耳猕猴梦想简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、定义抽象接口 IToWest.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created 抽象类，去西天的条件 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IToWest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保护唐僧</span>    <span class="token keyword">void</span> <span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//降妖除魔</span>    <span class="token keyword">void</span> <span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//上天入地</span>    <span class="token keyword">void</span> <span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义孙悟空类 SunWuKong.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Tigerchain * 悟空 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SunWuKong</span> <span class="token keyword">implements</span> <span class="token class-name">IToWest</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能 保护唐僧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能 降妖除魔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能 能上天入地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义六耳猕猴类「代理角色」 LiuErMiHou.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> prxoy<span class="token punctuation">.</span>monkeyking<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by Tigerchain * 悟空的代理六耳猕猴 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiuErMiHou</span> <span class="token keyword">extends</span> <span class="token class-name">SunWuKong</span> <span class="token keyword">implements</span> <span class="token class-name">IToWest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、测试 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 六耳 代理悟空 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        IToWest liuErMiHou <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiuErMiHou</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        liuErMiHou<span class="token punctuation">.</span><span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        liuErMiHou<span class="token punctuation">.</span><span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        liuErMiHou<span class="token punctuation">.</span><span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能去得了西天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、运行查看结果</li></ul><img src="/2019/07/05/proxy/liuer_result.png" title="六耳猕猴代理结果"><p>好了，上面我们看到我们使用代理类直接继承了真实的类「这也是代理的一个变种」，但是根据多用类组合少用继承的规则，我们还是少用这种继承形式的代理</p><p>以上是静态代理，静态代理有局限性，想如果悟空多了项技能，六耳猕猴就得学此项技能「感觉很像我们搞技术的，技术日新月异，得不断的学习才能进步」</p><p><code>静态代理的缺点：</code></p><ul><li>1、代理的方法如果很多，那么就要为每个方法都要代理，规模大的程序受不了</li><li>2、如果真实类中新添加一个方法或功能，那么代理类中就一一对应的写出来，这样不利于扩展并且增加代码维护成本</li><li>3、一个代理类只能代理一个真实的对象</li></ul><h5 id="2、使用动态代理完成"><a href="#2、使用动态代理完成" class="headerlink" title="2、使用动态代理完成"></a>2、使用动态代理完成</h5><p>动态代理就是代理类不是在代码中定义的，而是根据我们的指示动态生成的「通过反射机制动态生成代理者对象」，在编码阶段，你从代码上根本不知道谁代理谁，具体代理谁，好吧太绕了，直接看代码</p><blockquote><p>1、Proxy 类</p></blockquote><p>说动态代理之前，我们先来看看 java 中提供的 Proxy 类</p><p>看看这个类的注释一部分</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span><span class="token operator">*</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> Proxy<span class="token punctuation">}</span> provides <span class="token keyword">static</span> methods <span class="token keyword">for</span> creating dynamic proxy <span class="token operator">*</span> classes and instances<span class="token punctuation">,</span> and it is also the superclass of all <span class="token operator">*</span> dynamic proxy classes created by those methods<span class="token punctuation">.</span> <span class="token operator">*</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">*</span><span class="token operator">/</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略代码  <span class="token punctuation">}</span></code></pre><p>从注释可以看出 Proxy 提供一些静态方法来创建动态代理类和实例</p><p><code>Proxy 简单的 UML</code></p><img src="/2019/07/05/proxy/Proxy.jpg" title="Proxy 简单的 UML"><p><code>Proxy 主要方法讲解</code></p><p>Proxy 主要方法就是 newProxyInstance 这个方法</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>                                          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                          InvocationHandler h<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略若干代码 </span>    <span class="token comment" spellcheck="true">// 取得代理类</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl <span class="token operator">=</span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略若干代码 </span>    <span class="token comment" spellcheck="true">// 调用代理类的构造方法</span>    <span class="token keyword">final</span> Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>constructorParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略若干代码 </span>    <span class="token keyword">final</span> InvocationHandler ih <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略若干代码 </span>    <span class="token comment" spellcheck="true">// 通过代理类的构造方法生成代理类的实例</span>    <span class="token keyword">return</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>h<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>其中三个参数：</p><ul><li><strong>ClassLoader loader</strong>：代理类的类加载器</li><li><strong>Class&lt;?&gt;[] interfaces</strong>：代理类要实现的接口列表</li><li><strong>InvocationHandler h</strong>：调用处理程序</li></ul><p>从 newProxyInstance 方法中我们知道了代理对象是如何产生的了「注释很清楚了」</p><p><code>再看看 InvocationHandler</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Throwable<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中三个参数：</p><ul><li>Object proxy: 被代理的对象</li><li>Method method：要操作的方法</li><li>Object[] args：方法要传入的参数，可以没有，也可以有多个或 null </li></ul><p>InvocationHandler 接口中的方法就是执行被代理对象中的方法</p><blockquote><p>2、使用动态代理修改真假美猴王代码</p></blockquote><p><code>动态代理悟空 简单的UML</code></p><img src="/2019/07/05/proxy/LiuErdyproxy_uml.jpg" title="动态代理悟空 简单的UML"><p><code>根据 UML 撸码</code></p><p>只需要在原有代码的基础上添加一个动态类并且删掉六耳猕猴类「动态代理来了，小六你还不快撤」，然后修改 Test 即可</p><ul><li>1、添加动态代理类 ToWestProxy.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 动态代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToWestProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需要代理的对象即真实对象</span>    <span class="token keyword">private</span> Object delegate <span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span>Object delegate<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态构建一个代理</span>        <span class="token keyword">return</span>  Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>delegate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>delegate<span class="token punctuation">,</span>args<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过反射调用真实对象对应的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们看到上在被代理的对象是一个 Object 类型，所以可以看出这个代理类就是一个万能的代理，不仅仅可以代理悟空，牛魔王也能代理「扯远了」</p><ul><li>2、修改 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        IToWest sunWuKong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SunWuKong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取得动态代理</span>        IToWest proxy <span class="token operator">=</span> <span class="token punctuation">(</span>IToWest<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ToWestProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>sunWuKong<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能去得了西天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看到了，真实对象悟空随便你改，我再添加接口，方法，我动态代理不用动「如果是静态代理六耳猕猴，那就得随着悟空的修改必须得修改自己」</p><p>而且，我们还可以得出，这个动态代理不仅仅可以代理悟空，简直可以代理一切对象「不信你定义一个牛魔王试试」</p><ul><li>3、运行查看结果</li></ul><img src="/2019/07/05/proxy/liuer_result.png" title="查看结果"><p>简直 perfect</p><blockquote><p>3、自动售票机</p></blockquote><p>随着科技的发达，我们现在买车票的时候可以在自动售票机「代理售票人员」上购买</p><p><code>自动售票机简单的 UML</code></p><img src="/2019/07/05/proxy/dy_sller.jpg" title="自动售票机简单的 UML"><p><code>根据 UML 撸码--采用动态代理技术</code></p><ul><li>1、先来一个抽象角色 ISellTicket.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一个抽象接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISellTicket</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 售票</span>    <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、要出票，当然有买的票的人 User.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 买票的人 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String uname <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> String address <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 地址</span>    <span class="token keyword">private</span> String sex <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 性别</span>    <span class="token keyword">private</span> String idNum <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 身份证号</span>    <span class="token keyword">private</span> String pay <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 掏票钱</span>    <span class="token keyword">public</span> String <span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> uname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUname</span><span class="token punctuation">(</span>String uname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getIdNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> idNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdNum</span><span class="token punctuation">(</span>String idNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idNum <span class="token operator">=</span> idNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pay<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPay</span><span class="token punctuation">(</span>String pay<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pay <span class="token operator">=</span> pay<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、真实对象售票员小张 XiaoZhangSeller.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created 真实的售票员小张 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoZhangSeller</span> <span class="token keyword">implements</span> <span class="token class-name">ISellTicket</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> User user <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">XiaoZhangSeller</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者的信息==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者姓名："</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票性别："</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者身份证号："</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getIdNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者住址："</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============================="</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在验证信息...信息无误,请支付票钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者支付:"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请稍等正在出票....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出票成功:从西安到宝鸡大巴进站去坐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、动态代理 DyAutoSellerProxy.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 自动出票机,为了演示名字这样想,其实这是一个万能的动态代理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DyAutoSellerProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object object <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DyAutoSellerProxy</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span>args<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、测试一下 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义个买票者</span>        User tigerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span><span class="token string">"TigerChain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中国陕西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setIdNum</span><span class="token punctuation">(</span><span class="token string">"610326************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setPay</span><span class="token punctuation">(</span><span class="token string">"45.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 真实的买票员小张</span>        ISellTicket iSellTicket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoZhangSeller</span><span class="token punctuation">(</span>tigerChain<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态代理</span>        DyAutoSellerProxy dyAutoSellerProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DyAutoSellerProxy</span><span class="token punctuation">(</span>iSellTicket<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态创建一个出票机，把出票交给出票机去处理</span>        ISellTicket iSellTicket1 <span class="token operator">=</span> <span class="token punctuation">(</span>ISellTicket<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>iSellTicket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>iSellTicket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dyAutoSellerProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        iSellTicket1<span class="token punctuation">.</span><span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/05/proxy/autoseller_result.png" title="自动出票机结果"><p>自么样一个自动售票机就完成了「完全代理了人工去卖票」</p><p><strong>PS：</strong>这个 Demo 使用动态代理实现的，请大家自行使用静态代理实现本 Demo ，一定要动手实践哦</p><blockquote><p>4、AIDL 进行进程间通讯「远程代理」</p></blockquote><p>AIDL「Android 接口定义语言，是一种语言，其实就是 Android 中的远程 Service」，再说 AIDL 之前就不得不说 Binder「这里简洁明了的说一下 Binder 是什么，不展开深入讨论，如果深入展开，三天三夜也说不完」</p><p><code>什么是 Binder</code></p><p>由于两个进程不能直接进行通讯「为了安全系统有进程隔离机制」，所以两个进程之间是不能<strong>直接</strong>进行通讯的。Binder 可以说是 Android 系统中最重要的架构之一。Binder 是连接 Client「进程」 和 Server「进程」 的一个桥梁,Binder 是进程间通信的方式之一，在 Android 用的灰常灰常的多</p><p>我们先来看看 Android 的架构图像</p><img src="/2019/07/05/proxy/ape_fwk_all.png" title="Android 的架构图像"><p>图片来自 Android 的源码官站:<a href="https://source.android.com/devices/" target="_blank" rel="noopener">https://source.android.com/devices/</a></p><p>从 Android 的框架图中我们可以看到，应用程序框架层和系统服务层之间就是通过 Binder IPC 进行通讯的,说 Binder 机制前，我们先了解几个特点</p><ul><li>1、两个进程之间不能直接通信</li><li>2、内核可以仿问进程中的所有数据</li><li>3、两个进程之间不能直接进行通信，我们可以借助内核做中转达到间接通信的目的「Binder 就是这种机制」</li></ul><p><code>Binder 下两个进程通信的简易流程</code></p><img src="/2019/07/05/proxy/binder_arc.png" title="Binder 两个进程通信简易流程"><p><strong>PS:</strong> 以上图是便于理解所以抽象出来一张图，真实的 Binder 比这个过程复杂的多，这牵扯到 java 层的 Binder ，native 层的 Binder 等等「这不是我们讨论的重点」，方便我们理解，我们可以认为客户端的进程拿到服务端的引用，所以就可以调用服务端进程的方法了</p><p>说了这么多，这跟代理有个毛关系呢，别急我们写一个 AIDL 的实例分析一下：</p><p><code>AIDL demo 简单的 UML</code></p><img src="/2019/07/05/proxy/aidl_demo.jpg" title="AIDL demo 简单的 UML"><p><code>根据 uml 写代码</code></p><p>我们写一个简单的通过 Client 进程调用 Server 进程返回一个字符串功能，为了方便起见，我们直接在一个项目中创建「Server 开启在另一个进程中，开两个 APP 进行通信大家可以自行试一下，道理一模一样的」</p><ul><li>1、在项目中新建一个 AIDL 文件「在 AS 中的 APP上直接右键　new AIDL 即可」</li></ul><pre class=" language-aidl"><code class="language-aidl">interface CustomAIDL {    String getStr() ;}</code></pre><p>此时我们点击一下图标构造一下项目，此时会在 <code>app\build\generated\source\aidl\debug\包名\CustomAIDL.java</code> 文件「把 AS 切换到 project 视图下很容易找到」，这是 IDE 帮我们自动生成的</p><ul><li>2、定义一个远程服务 AIDLRemoteService.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 创建一个远程服务 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AIDLRemoteService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CustomAIDL<span class="token punctuation">.</span>Stub aidl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomAIDL<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">" 我是远程服务返回的 HELLO "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> aidl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义 AidlActivity 测试调用 「核心代码给出，其余代码看 Demo 即可」</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AidlActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">{</span> <span class="token keyword">private</span> CustomAIDL customAIDL <span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略若干代码<span class="token comment" spellcheck="true">// 客户端连接服务</span><span class="token keyword">private</span> ServiceConnection serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">,</span> IBinder service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            customAIDL <span class="token operator">=</span> CustomAIDL<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span> <span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"service:"</span><span class="token punctuation">,</span><span class="token string">"onServiceConnected"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            isServerStarted <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            customAIDL <span class="token operator">=</span> null <span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"service:"</span><span class="token punctuation">,</span><span class="token string">"onServiceDisconnected"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            isServerStarted <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">;</span> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_bind_service<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 绑定服务</span>                <span class="token function">bindService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>AidlActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>AIDLRemoteService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>serviceConnection<span class="token punctuation">,</span> Context<span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_test_method<span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isServerStarted<span class="token punctuation">)</span><span class="token punctuation">{</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>AidlActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"请先绑定服务先"</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    String str <span class="token operator">=</span> customAIDL<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>AidlActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略若干代码<span class="token punctuation">}</span></code></pre><ul><li>4、在 mainifests 中注册服务</li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.Proxy.AIDL.AIDLRemoteService<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:reomte<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span></code></pre><p>我这里给服务定义了一个 process ，那说明这个服务是运行在一个新进程中的</p><ul><li>5、测试一下，运行查看结果</li></ul><p>我们看一下当前项目进程情况 </p><img src="/2019/07/05/proxy/aidl_remote.png" title="AIDL 运行结果"><p>的确是两个进程「AidlActivity 和 AIDLRemoteService 分别在两个进程中」，我们定义的 remote 也显示出来了,看一下结果</p><img src="/2019/07/05/proxy/aidl.gif" title="AIDL 结果"><p>怎么样，两个进程之间完美的进行了通信了</p><p>通个毛呢？这和 proxy 有个啥关系呀「巴拉巴拉这么久」，不要急吗？软件开发有一条宗旨：先让它运行起来「我们先把 Demo 运行起来再说吗：咳咳又到了吃药的时间了」，我们来分析一下上面的调用过程</p><p><code>过程分析</code></p><ul><li>1、还记得我们上面说的 AD 帮我们自动生成的 CustomAIDL.java 文件吗，我们来一窥它的真容「以下代码是格式化后的」</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这里的 IInterface 代表远程 Server　对象有什么能力</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomAIDL</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Local-side IPC implementation stub class.     */</span>    <span class="token comment" spellcheck="true">// 在 server 端调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder</span> <span class="token keyword">implements</span> <span class="token class-name">designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String DESCRIPTOR <span class="token operator">=</span> <span class="token string">"designpattern.jun.com.designpattern.CustomAIDL"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Construct the stub at attach it to the interface.         */</span>        <span class="token keyword">public</span> <span class="token function">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Cast an IBinder object into an designpattern.jun.com.designpattern.CustomAIDL interface,         * generating a proxy if needed.         * 其中的 android.os.IBinder obj 对象是驱动给们的，这个就是我们绑定 service ,在 onServiceConnecttion 回调里面这个对象拿到一个远程的 Service          */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL <span class="token function">asInterface</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface iin <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iin <span class="token keyword">instanceof</span> <span class="token class-name">designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// client 和 Server 在同一个进程调用 后面 debug 可以验证</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL<span class="token punctuation">)</span> iin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// cliet 和 Server 不在同一个进程调用代理对象 后面 debug 可以验证</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel data<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 给客户端写数据</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> INTERFACE_TRANSACTION<span class="token operator">:</span> <span class="token punctuation">{</span>                    reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> TRANSACTION_getStr<span class="token operator">:</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String _result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>_result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 运行在客户端 server 进程的远程代理，实现对远程对象的仿问</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder mRemote<span class="token punctuation">;</span>            <span class="token function">Proxy</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mRemote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> DESCRIPTOR<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 读取服务端写过来的数据</span>                android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _data <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _reply <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String _result<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>Stub<span class="token punctuation">.</span>TRANSACTION_getStr<span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _result <span class="token operator">=</span> _reply<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TRANSACTION_getStr <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这下看到 Proxy 了吧「是不是有点小激动呢」，我们来分析一下</p><img src="/2019/07/05/proxy/aidl_lc.png" title="AIDL 简单的流程图"><p>上面的图就是一个简单的 AIDL 的流程图，方便理解认为 CustomAIDL.stub 就是远程进程，它把信息注册到 Binder 中， CustomAIDL.Stub.Proxy 就是一个代理，代理什么呢？代理远程的 Binder ，远程 Binder 把方法传给 Client 就完成了两个进程间通信「详细过程比这个复杂」，对于 Binder 的入门介绍可以参看：<a href="http://weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="noopener">Binder 学习指南</a> 还是非常不错的，建议看三遍以上</p><p><strong>PS:</strong>这里再说一点，以上情况是针对 client 和 server 在两个进程间的通信，如果 client 和 server 在一个进程中，则 CustomAIDL.Stub.Proxy 就不会调用「在同一个进程中，我自己就能调自己还代理个毛呀」，不信？以结果征服你</p><p><code>client 和 server 同一进程和不同进程分析</code></p><ul><li>1、不同进程</li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.Proxy.AIDL.AIDLRemoteService<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:reomte<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span></code></pre><p>通过以上配置，我们可以看到 AIDLRemoteService 是运行在单独进程中的，我们在 CustomAIDL.java 中的 asInterface 方法中 debug 跟一下看看结果</p><img src="/2019/07/05/proxy/aidl_proxy.gif" title="AIDL 调用 Proxy"><p>通过图我们可以看出，如果 client 和 server 不在同一个进程中，那么代码就会走到</p><img src="/2019/07/05/proxy/aidl_call_proxy.png" title="调用代理"><p>调用代理的地方—CustomAIDL.Stub.Proxy,并传递远程代理的对象</p><ul><li>2、在同一进程</li></ul><p>去掉 service 中的 android:process=”:reomte” 则 client 和 server 就在同一进程了</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.Proxy.AIDL.AIDLRemoteService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       </code></pre><p>同理 debug 看结果</p><img src="/2019/07/05/proxy/aidl_notcall_proxy.png" title="不调用 proxy"><p>对比上面的图我们就知道了，这里的 iin 不为空，进入了　if 的方法体「没有调用代理」，至此上面的结果验证完毕</p><p>关于 AIDL 远程代理就说到这里了，如果对 Binder 想要深入了解，可以自行回去研究「这不在本节的范围内」</p><p>WTF 一个 AIDL 说了这么大半天，希望大家不要晕「我都有点晕了」</p><p><strong>源码地址：</strong> <a href="https://github.com/githubchen001/DesignPattern" target="_blank" rel="noopener">https://github.com/githubchen001/DesignPattern</a> 看 proxy/aidl 这部分</p><h3 id="三、Android-源码中的代理模式"><a href="#三、Android-源码中的代理模式" class="headerlink" title="三、Android 源码中的代理模式"></a>三、Android 源码中的代理模式</h3><p>其实通过上面的 AIDL 实验，我们就可以知道 Binder 使用的就是远程代理模式，Android 中的源码使用非常多，我就不一一分析了「说的太多人会受不鸟」，感兴趣的朋友可以自行分析，我这里贴出一张图，大家可以看</p><img src="/2019/07/05/proxy/ipc.png" title="IPC"><p>我们看看应用程序框架层的 XXXManager 对应田系统层的 XXXService 它们之间通过使用 AIDL 来进行跨进程通信，有兴趣可以扒扒这部分的源码看一下</p><h3 id="四、代理模式的优缺点"><a href="#四、代理模式的优缺点" class="headerlink" title="四、代理模式的优缺点"></a>四、代理模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、代理模式拿到的真实对象的引用，把真实对象很好的保护起来安全性高</li><li>2、扩展性好</li></ul><blockquote><p>缺点</p></blockquote><ul><li>增加了系统的复杂度，增加了额外好多的代码「设计模式好像都是这样」</li></ul><p>到此为止，我们把代理模式就说完了，由于这篇篇幅比较大，Android 源码也没有给大家分析「希望大家自行去看看，希望你有一种哦~原来是这样的赶脚」，其它的虚拟代理，缓存代理大家有兴趣也可以试试</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://segmentfault.com/a/1190000007997113" target="_blank" rel="noopener">小米开放平台:彻底理解ANDROID BINDER通信架构（上）</a></li><li><a href="http://weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="noopener">Binder学习指南</a> 建议看三遍以上，非常基础的一步步介绍 Binder </li></ul><p>到此为止我们简单明了的介绍完了策略模式，最后说一下：一定要亲手试试哦！</p><p>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容<br>本文出自 <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">人人都会设计模式</a></p><p><a href="https://mp.weixin.qq.com/s/JNRTSwQz4W1C2QxKdfe84A" target="_blank" rel="noopener">阅读原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04、适配器模式</title>
      <link href="/2019/07/04/adapter/"/>
      <url>/2019/07/04/adapter/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/04/adapter/adapter_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 Adapter 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是适配器模式"><a href="#一、什么是适配器模式" class="headerlink" title="一、什么是适配器模式"></a>一、什么是适配器模式</h3><h4 id="1、生活中的适配器"><a href="#1、生活中的适配器" class="headerlink" title="1、生活中的适配器"></a>1、生活中的适配器</h4><p>比如电脑转接器「这里主要是指连接电脑和投影仪的」，以我的 MAC 电脑为例子，我们公司的投影支持 VGA 和 HDMI ，但是我的 MAC 电脑只有一个 MINI DP 接口，如何把 MINI DP 转成 VGA 或 HDMI ，那么我就卖了这个玩意「全称 MINI DP 转 VGA &amp; HDMI 适配器」，这东西就是一个适配器</p><img src="/2019/07/04/adapter/converter.jpg" title="MINI DP 转 VGA & HDMI 适配器"><p>这个适配器就可以把 MAC 和有 VGA 或 HDMI 的设备连接起来了，如下：</p><img src="/2019/07/04/adapter/converter2.jpg" title="MINI DP 转 VGA & HDMI 适配器"><p>类似的还有电脑电源适配器，变压器「也是一种适配器」，其实净水器也可以看作是一种适配器「把杂水变成纯净水」，等等</p><h4 id="2、程序中的适配器"><a href="#2、程序中的适配器" class="headerlink" title="2、程序中的适配器"></a>2、程序中的适配器</h4><p>比如我们对接第三方的接口到我们的系统「对方给我们的接口，我们现在的接口对接不起来」</p><img src="/2019/07/04/adapter/sysnoadapter.png" title="我们接口和三方接口"><p>我们就需要写一个中间层「适配器」，做为一个桥梁，把两个接口连接起来</p><img src="/2019/07/04/adapter/syshasadapter.png" title="接口或系统之间的适配器"><blockquote><p>适配器模式的定义 </p></blockquote><p>通俗的说适配器模式就是把两个不兼容的接口连接起来，类似一个桥梁的作用</p><img src="/2019/07/04/adapter/adapter_define.jpg" title="适配器模式类比"><p><strong>注：</strong>适配器模式类比一个桥梁作用「它的作用不仅仅连接这么简单，还有转化等操作，桥梁就是为了方便理解」</p><blockquote><p>适配器模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Target</td><td>目标角色</td><td>是一个接口，也就是我们期待要转化成的接口</td></tr><tr><td>Adaptee</td><td>源角色</td><td>原始的类或接口对象</td></tr><tr><td>Adapter</td><td>适配器角色</td><td>把源角色转化成目标角色的类</td></tr></tbody></table><blockquote><p>适配器模式的分类 </p></blockquote><ul><li>1、类适配器模式</li></ul><p><code>类适配器简单的 UML</code></p><img src="/2019/07/04/adapter/ClassAdapter.jpg" title="类适配器简单的 UML"><p><strong>总结一下就是</strong>：适配器「Adapter」继承源类「Src」并且实现目标「Dst」接口,来实现 Src–&gt;Dst 的转换</p><ul><li>2、对象适配器模式</li></ul><p><code>对象适配器简单的 UML</code></p><img src="/2019/07/04/adapter/ObjectAdapter.jpg" title="对象适配器简单的 UML"><p><strong>总结一下就是</strong>：适配器「Adapter」持有源类「Src」的引用,并实现目标「Dst」接口,来实现 Src–&gt; Dst 的转化</p><ul><li>3、接口适配器模式</li></ul><p>对于这种模式「资料上也没有说有这种模式，我是在写代码的过程中发现可以这样写」，我持保留意见，如果有什么问题，大家完全可以说适配器模式的分类就有以上两种模式，可我认为这是适配器模式的一个变种</p><p><code>接口适配器简单的 UML</code></p><img src="/2019/07/04/adapter/interadapter.jpg" title="接口适配器"><p><strong>*总结一下就是:</strong> 适配器实现源和目标，把源转化成目标这么一个过程</p><h3 id="二、适配器模式举例"><a href="#二、适配器模式举例" class="headerlink" title="二、适配器模式举例"></a>二、适配器模式举例</h3><blockquote><p>1、Mac 电脑连接投影仪适配器</p></blockquote><p>以开头的例子为例子, MAC 电脑要连接投影仪器，需要一个 MINI DP 转 VGA &amp; HDMI 适配器，然后才能连接上投影仪</p><p>所以这里目标是 VGAORHDMI ，源是 MINI DP 适配器就是上面的那根线</p><p><code>类适配投影仪和 MAC 电脑简单的 UML</code></p><img src="/2019/07/04/adapter/MINIDP2HDMI.jpg" title="适配投影仪和 MAC 电脑简单的 UML"><p><code>根据 UML 撸码</code></p><blockquote><p>使用类适配器模式</p></blockquote><ul><li>1、定义目标接口 VgaOrHdmi </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 目标角色，对投影仪来说就要 VAG 或 HDMI * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VgaOrHdmi</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**输出 VGA 或是 Hdmi 接口*/</span>    String <span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义源类 MiniDp</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 源角色，MAC 电脑上的 MINIDP 接口 * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiniDp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">outPutMinkDp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是 mac 上的 MiniDp 输入接口"</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义适配器类 MidiDp2VgaOrHdmiAdapter </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 适配器，既是 MINIDP 接口也是 VAGORHDMI 接口，这样就可以把 MINIDP 转成 * VAG OR HDMI 接口 * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MidiDp2VgaOrHdmiAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MiniDp</span> <span class="token keyword">implements</span> <span class="token class-name">VgaOrHdmi</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token function">convertMiniDp2VgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 把 MINIDP 转化成 VAG 或 HDMI 方法     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">convertMiniDp2VgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//拿到源</span>        String str <span class="token operator">=</span> <span class="token function">outPutMinkDp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token string">" \n 经过适配器转化 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为这简单起见，这里直接修改源</span>        str <span class="token operator">=</span> <span class="token string">"输出变成  VGA 和 HDMI 接口"</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> str <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义打印机类 Projector</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 这是投影仪，我就是 VGA 和 HDMI 接口的 * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Projector</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 我要的就是 VGA 或者 HDMI 接口</span>        <span class="token keyword">public</span> String <span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span>VgaOrHdmi vgaOrHdmi<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> vgaOrHdmi<span class="token punctuation">.</span><span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、定义测试类 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试类 * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//投影仪</span>        Projector projector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Projector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//适配器</span>        VgaOrHdmi adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MidiDp2VgaOrHdmiAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后得到投影仪想要的 VAG or HDMI 即可</span>        String str <span class="token operator">=</span> projector<span class="token punctuation">.</span><span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/04/adapter/classadapter_mini2vga.png" title="适配投影仪和 MAC 电脑简单的结果"><p>完美转化了有木有</p><blockquote><p>对象适配器实现上述例子</p></blockquote><p><code>对象适配投影仪和 MAC 电脑简单的 UML</code></p><p>是不是和上面的图一样？错，肯定不一样，一样我还贴出来「我又没病」，只有一点改变，就是适配器不是继承源，而是持有源的引用，代码修改起来非常简单，只是修改适配器即可「别的代码都是一样的」</p><ul><li>1、修改 MidiDp2VgaOrHdmiAdapter </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 适配器，既是 MINIDP 接口也是 VAGORHDMI 接口，这样就可以把 MINIDP 转成 * VAG OR HDMI 接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MidiDp2VgaOrHdmiAdapter</span>  <span class="token keyword">implements</span> <span class="token class-name">VgaOrHdmi</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 修改之处 1 </span>    <span class="token keyword">private</span> MiniDp miniDp <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改之处 2</span>    <span class="token keyword">public</span> <span class="token function">MidiDp2VgaOrHdmiAdapter</span><span class="token punctuation">(</span>MiniDp miniDp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>miniDp <span class="token operator">=</span> miniDp <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token function">convertMiniDp2VgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 把 MINIDP 转化成 VAG 或 HDMI 方法     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">convertMiniDp2VgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改之处 3  拿到源</span>        String str <span class="token operator">=</span> miniDp<span class="token punctuation">.</span><span class="token function">outPutMinkDp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token string">" \n 经过适配器转化 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为这简单起见，这里直接修改源</span>        str <span class="token operator">=</span> <span class="token string">"输出变成  VGA 和 HDMI 接口"</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> str <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>2、修改测试类，并运行查看结果</li></ul><p>修改测试类</p><img src="/2019/07/04/adapter/objectadatper_test.png" title="对象适配器测试类"><p>结果和上面是一样的</p><img src="/2019/07/04/adapter/classadapter_mini2vga.png" title="对象适配器实现 mini2vga"><p>适配器模式一般情况下不是软件设计的时候就要考虑的一种模式，它是一种随着软件的维护可能由于不同的开发人员，不同的产品，不同的厂家造成的功能类似而接口不相同的情况下一种解决方案「只有碰到无法改变原有设计和代码的情况下，才考虑适配」</p><blockquote><p>2、成龙初探好莱坞</p></blockquote><p>我们的功夫明星成龙初闯好莱坞的时候有一个最大的障碍就是语言问题「英文不太熟悉」，那么最早的时候都是有翻译者的，那么这个翻译员就充当了适配器的角色「把英文翻译成中文，或者把中文翻译成英文」</p><p><code>翻译员简单的 UML</code></p><img src="/2019/07/04/adapter/jackiechan.jpg" title="翻译员简单的 UML]"><p><code>根据 UML 擼代码</code></p><ul><li>1、新建 ISpeakEn 接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISpeakEn</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 说英文</span>    String <span class="token function">speakEnglish</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、新建 ISpeakCn 接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISpeakCn</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 说中文</span>    String <span class="token function">speakCn</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、翻译的接口「适配器」 Iinterpreter </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. * 翻译的接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iinterpreter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 中文翻译成英文</span>    <span class="token keyword">void</span> <span class="token function">chinese2English</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 英文翻译成中文</span>    <span class="token keyword">void</span> <span class="token function">english2Chinese</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>4、具体的翻译员小张 ZhangTranslation</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. * 举个例子，成龙有一个张翻译，能把英文翻译成中文，也能把中文翻译成英文 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangTranslation</span> <span class="token keyword">implements</span> <span class="token class-name">Iinterpreter</span><span class="token punctuation">,</span>ISpeakCn<span class="token punctuation">,</span>ISpeakEn<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chinese2English</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">translationC2E</span><span class="token punctuation">(</span><span class="token function">speakCn</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">english2Chinese</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">translationE2C</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 翻译英文--> 中文</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">translationE2C</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小张把 "</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">" 翻译成中文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 翻译中文--> 英文</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">translationC2E</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小张把 "</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">" 翻译成英文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">speakCn</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">speakEnglish</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、来一个老外「要对话肯定要有关建人物呀」 Foreigner </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. * 一个老外用英文给成龙打招呼 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foreigner</span> <span class="token keyword">implements</span> <span class="token class-name">ISpeakEn</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">speakEnglish</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String say <span class="token operator">=</span> <span class="token string">"Wills say："</span><span class="token operator">+</span>str <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> say <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、成龙上场「另一个关建人物」 JackieChan</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JackieChan</span> <span class="token keyword">implements</span> <span class="token class-name">ISpeakCn</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">speakCn</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String say <span class="token operator">=</span> <span class="token string">"成龙说："</span><span class="token operator">+</span>str <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> say <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>7、测试对话 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. * 这是一个成龙对话老外的测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 成龙说了一句话</span>        JackieChan jackieChan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JackieChan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        String str <span class="token operator">=</span> jackieChan<span class="token punctuation">.</span><span class="token function">speakCn</span><span class="token punctuation">(</span><span class="token string">"你好 wills"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 老外说了一句</span>        Foreigner foreigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foreigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> foreigner<span class="token punctuation">.</span><span class="token function">speakEnglish</span><span class="token punctuation">(</span><span class="token string">"Hello Jackie Chain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 张翻译翻译</span>        ZhangTranslation zhangTranslation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhangTranslation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        zhangTranslation<span class="token punctuation">.</span><span class="token function">chinese2English</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangTranslation<span class="token punctuation">.</span><span class="token function">english2Chinese</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>8、运行查看结果</li></ul><img src="/2019/07/04/adapter/sayresult.png" title="成龙对话结果"><p>怎么样这个张翻译「适配器」还不错吧，当然适配器模式也会进化，会变种，但是万变不离其宗「上面 Demo 就可以看作是一个变种的适配器模式」</p><h3 id="三、Android-源码中的适配器模式"><a href="#三、Android-源码中的适配器模式" class="headerlink" title="三、Android 源码中的适配器模式"></a>三、Android 源码中的适配器模式</h3><p><code>ListAdapter</code></p><p>没有搞错吧，上一节不是说了 ListAdapter 是一种策略模式吗？没错它也是一种适配器模式「从名字就可以看出来」</p><p><code>ListAdapter 适配器简单的 UML</code></p><img src="/2019/07/04/adapter/ListAdapter.jpg" title="ListAdapter 适配器 UML"><p>从上图可以看出，BaseAdapter 是一个基础适配器，下面子类是具体各自的适配器，这些适配器的作用就是把数据 List<t>，Cusor 等转化成 ListAdapter 接口，最终让客户端 ListView 来调用「可以通俗的说就是把数据适配到 View 上面」</t></p><p><code>以 ArrayAdapter&lt;T&gt; 源码分析一下</code></p><ul><li>1、先看看 Adapter </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasStableIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">,</span> View var2<span class="token punctuation">,</span> ViewGroup var3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getItemViewType</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getViewTypeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><ul><li>2、ListAdapter 继承 Adapter 接口，所以拥有 Adapter 所有功能</li><li>3、BaseAdapter 实现 ListAdapter 所以不仅拥有 ListAdapteer 的所有能力</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ListAdapter</span><span class="token punctuation">,</span> SpinnerAdapter<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//省略苦干代码</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">areAllItemsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> View <span class="token function">getDropDownView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getView</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> convertView<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemViewType</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getViewTypeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>3、再来看看 ArrayAdapter<t></t></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayAdapter</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Filterable</span><span class="token punctuation">,</span> ThemedSpinnerAdapter <span class="token punctuation">{</span> <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> mObjects<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//列出其中一个构造方法 </span>     <span class="token keyword">public</span> <span class="token function">ArrayAdapter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@LayoutRes</span> <span class="token keyword">int</span> resource<span class="token punctuation">,</span>            <span class="token annotation punctuation">@IdRes</span> <span class="token keyword">int</span> textViewResourceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> textViewResourceId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mObjects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@Nullable</span> T <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> T item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mObjects<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> View convertView<span class="token punctuation">,</span>            <span class="token annotation punctuation">@NonNull</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">createViewFromResource</span><span class="token punctuation">(</span>mInflater<span class="token punctuation">,</span> position<span class="token punctuation">,</span> convertView<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> mResource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//其它代码流省略</span><span class="token punctuation">}</span></code></pre><p>我们通过源码可以看到 ArrayAdapter<t> 就是把 List<t> 的数据源采用一系列方法转化成 ListAdapter 需要的几种方法 getView getPosition 等等「这就是一个适配的过程」</t></t></p><p><code>ListAdapter 既是策略模式又是适配器模式</code></p><p>根据选择模式使用那种适配器 ListAdapter 就是策略模式，但是根据每个策略所实现功能「它就是适配器模式」</p><h3 id="四、适配器模式的优缺点"><a href="#四、适配器模式的优缺点" class="headerlink" title="四、适配器模式的优缺点"></a>四、适配器模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、客户端只关心适配器，对客户端来说更简单</li><li>2、现有类的复用而不需要改变，解决了现有类和目标类环境不一致的问题</li><li>3、解耦「目标类和适配器解耦」，不用改变原有的代码，再一个就是某天目标大变了，那么我们再编写一个适配器就可以了「原来的适配器可以扔掉了，就像某天你的 MAC 笔记本坏了，电源适配器就可以扔了–这是一个玩笑，除非是适配器不适用新买的 MAC」</li></ul><blockquote><p>缺点</p></blockquote><ul><li>1、适配器编写过程需要多方考虑「可能会很复杂」</li><li>2、适配器把一个接口转化成另一个接口，在客户端会给人误导，明明传入的是 A 接口，最后成 B 了，让人很晕</li></ul><p>到此为止，我们就介绍完了适配器模式，亲自尝试一下吧</p><p>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容<br>本文出自 <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">人人都会设计模式</a></p><p><a href="https://mp.weixin.qq.com/s/zEDfH6faQfkWDeoRcaRKRA" target="_blank" rel="noopener">阅读原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03、策略模式</title>
      <link href="/2019/07/03/strategy/"/>
      <url>/2019/07/03/strategy/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/03/strategy/strategy.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 Strategy 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是策略模式"><a href="#一、什么是策略模式" class="headerlink" title="一、什么是策略模式"></a>一、什么是策略模式</h3><h4 id="1、-生活中的策略"><a href="#1、-生活中的策略" class="headerlink" title="1、 生活中的策略"></a>1、 生活中的策略</h4><p>比如说我要出行旅游，那么出行方式有–飞机、自驾游、火车等，这几种方式就是策略。再比如：某大型商场搞活动–满 100 元送杯子，满 300 减 50 ，满 1000 元抽奖「一等将彩色电视机」，这种活动也是策略。在游戏中，我们打一个普通的怪使用普通的招即可，打大 BOSS 就要是用大招，这也是一种策略 …</p><h4 id="2、程序中的策略"><a href="#2、程序中的策略" class="headerlink" title="2、程序中的策略"></a>2、程序中的策略</h4><p>就是对各个算法的一个封装「不是实现算法，而是封装算法」，让客户端非常容易的调用，省掉了客户端　if else 恶心的判断，让客户端独立于各个策略</p><p>这里举一个简单的例子：比如我们在 Android 中一定会使用到 http 网络请求，请求库太多了，大概有 AsyncHttpclient,OkhttpClient,Volley 等「具体的策略」，那么我们完全可以使用一个策略模式，定义一个抽像策略，然后把各个请求策略封装，客户想使用哪个就使用哪个，非常灵活和方便</p><p>策略模式和简单工厂很相似，确有不同，策略是一种行为模式，而简单工厂是创建型模式「创建对象」 后面再说</p><blockquote><p>策略模式的定义 </p></blockquote><p>策略是对算法的封装，是一种形为模式，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换</p><blockquote><p>策略的特点</p></blockquote><ul><li>是一种行为模式，对算法封装，使得客户端独立于各个策略</li><li>扩展性强，添加策略无非就是添加一个具体的实现类而已，代价非常低</li></ul><blockquote><p>策略模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Strategy</td><td>抽象的策略</td><td>是一个接口或抽象类</td></tr><tr><td>ConcreteStrategy</td><td>具体的策略类</td><td>实现了抽象的策略</td></tr><tr><td>Context</td><td>一个普通的类</td><td>上下文环境，持有 Stragegy 的引用</td></tr></tbody></table><blockquote><p>策略模式简单的 UML</p></blockquote><img src="/2019/07/03/strategy/Strategy.jpg" title="策略模式"><h3 id="二、策略模式举例"><a href="#二、策略模式举例" class="headerlink" title="二、策略模式举例"></a>二、策略模式举例</h3><blockquote><p>1、曹操败走华荣道</p></blockquote><p>我们知道三国演义中曹操败走华容道的故事，相传在赤壁之战之后，曹操的船舰被刘备烧了，曹操逃离时面前有两条路：1、平坦的大路。2、泥泞的华容道。面对这两条路，曹操没有选择大路而选择有炊烟的小路「华容道路」，理由—实则虚之，虚则实之，那么曹操在选择道路的时候其实就是选择策略</p><p><code>败走华容道的简单的 UML</code></p><img src="/2019/07/03/strategy/huarong.jpg" title="败走华荣道"><p><code>根据 UML 编码</code></p><ul><li>1、定义一个路的抽象策略</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象的策略，定义逃跑路线 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRunStrategy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 逃跑线路</span>    <span class="token keyword">void</span> <span class="token function">escapeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义具体的路径–大路</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体的策略一走大路 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Highroad</span> <span class="token keyword">implements</span> <span class="token class-name">IRunStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">escapeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"走大路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义具体路线–华容道</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体的策略二走华容道 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaRongRoad</span> <span class="token keyword">implements</span> <span class="token class-name">IRunStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">escapeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"走华容道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义上下文，选择方式</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 上下文 持有 IRunStrategy 的引用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextRunStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IRunStrategy iRunStrategy <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ContextRunStrategy</span><span class="token punctuation">(</span>IRunStrategy iRunStrategy<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iRunStrategy <span class="token operator">=</span> iRunStrategy <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 选择道路     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">choiceRoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        iRunStrategy<span class="token punctuation">.</span><span class="token function">escapeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、主角曹操登场，看看曹操是如何选择道路的</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 曹操选择路线 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaoCao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 曹操疑心重，选择了华容道，对曹操来说至于杂样走华容道，不关心，死多少人也不关心，只关心我要走这条道就好         */</span>        IRunStrategy huaRongRoad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaRongRoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        ContextRunStrategy contextRunStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextRunStrategy</span><span class="token punctuation">(</span>huaRongRoad<span class="token punctuation">)</span> <span class="token punctuation">;</span>        contextRunStrategy<span class="token punctuation">.</span><span class="token function">choiceRoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>真的走了华容道，好吧 no zuo no die ，我们可以看到上面曹操选择逃跑路线都是行为，所以很适合策略模式「策略模式就是一种选择模式，当你举棋不定的时候就使用策略模式」</p><p><strong>注意：</strong> 策略的核心不是如何实现算法，而是如何更优雅的把这些算法组织起来，让客户端非常好调用「虽然策略非常多，可以自由切换，但是同一时间客户端只能调用一个策略，其实也很好理解，你不可能同时既坐飞机，又坐火车」。</p><blockquote><p>2、出行旅行方式</p></blockquote><p>经过上面的曹操败走华荣道，我们对策略有了感觉了吧，那么下来我们趁热打铁，再来一发，我们都知道出去旅行一般方式：坐飞机、坐火车、坐大巴、自驾游等等，这一个个的出行方式就是策略，接下来我给出简单的 UML 图，代码部分请各自自行实现「道理都懂，你的生活质量还是没有提高，方法再多也不见有多成功，就是因为实践太少，动手才是真理，靠–忘记吃药了，脉动回来」</p><p><code>出行方式简单的 UML</code></p><img src="/2019/07/03/strategy/travel_strategy.jpg" title="出行策略 UML"><p><code>代码实现</code></p><p>大家根据出行的 UML 图实现代码即可「非常简单，相信都可以实现」</p><blockquote><p>3、Android 中使用策略场景</p></blockquote><p><code>段子来了</code></p><p>先看个段子，轻松一下「注以下只是一个简单举例，库不分先后，俗话说没有最好，只有最适合」</p><p>相信做 Android 的朋友都离不开网络请求，有一天你「小明」发现了一个传说中很好的网络请求库 AsyncHttpClient ，你高兴的把网络请求相关的 API 都实现了，经理看到了说不错不错，写的很快吗，突然有一天，经理说：小明 AsyncHttpClient 好多 API 过时了「随着 Android 版本的更新」，并且对 RestFul 支持的不太友好，我看到一个叫 Retorfit2「听说是最好的网络」 的库，默认支持 OkHttp ，用 Retorfit 把 AsyncHttpClient 替换了吧，非常简单对你来说，小明这时估计心里飘过了一千匹羊驼「我靠，为麻不早说」，又过了一些时间，经理又说，小明呀，Volley 是 Google 推荐的网络请求库，你换成 Volley 库吧，小明此时估计把经理的八辈祖宗都问候了一遍，又是一通加班加点的改，最后 Happy 的改好了。后面又有一个牛 B 的库，经理又让替换，小明哭了「为什么受伤的总是我」…</p><p>看到这里大家应该想到了，上面的请求场景就是一个个的策略，如果小明按照策略模式走下来，只是添加扩展子策略，压根原来的方法毛都不用改，只能说，小明呀，你可张点心吧。</p><p><code>MVP + 策略模式</code></p><p>下面我们使用 MVP + 策略模式模拟一个简单的登录功能，实现上面小明的需求</p><p><code>MVP+retorfit+rx 请求策略简单的 UML</code></p><img src="/2019/07/03/strategy/mvp+http.jpg" title="MVP+策略登录 UML"><p><code>根据 UML 撸码</code></p><p>首先我们要使用　AsyncHttpClient、Retorfit 等，先添加配置 Gradle「项目 Module 的 build.gradle中」</p><pre class=" language-gradle"><code class="language-gradle">compile 'com.squareup.retrofit2:retrofit:2.3.0'compile 'io.reactivex.rxjava2:rxandroid:2.0.1'compile 'io.reactivex.rxjava2:rxjava:2.1.5'compile 'com.loopj.android:android-async-http:1.4.9'</code></pre><p><strong>注：</strong> 以下代码纯粹是为了演示策略模式，顺手写的，好多细节可能没有考虑到，但是基本框架就是这样的，可以自行完善</p><ul><li>1、分别新建 MVP 的基类接口,IPresenter,IModel,IView</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description MVP 中的 Presnter 基类 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPresenter</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description MVP 中的 Model 基类 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IModel</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description MVP 中的 View 基类 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IView</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>2、新建 MVP 的关联接口 <code>ILoginContact.java</code> 「当然也可以不写此类，直接写登录 MVP 的直接子类」</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> designpattern<span class="token punctuation">.</span>tigerchain<span class="token punctuation">.</span>com<span class="token punctuation">.</span>mvphttpstrategy<span class="token punctuation">.</span>mvp<span class="token punctuation">;</span><span class="token keyword">import</span> designpattern<span class="token punctuation">.</span>tigerchain<span class="token punctuation">.</span>com<span class="token punctuation">.</span>mvphttpstrategy<span class="token punctuation">.</span>mvp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>Observable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Description MVP 的关联类「也可以单独创建 MVP 就是有点乱」 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoginContact</span> <span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">LoginView</span> <span class="token keyword">extends</span> <span class="token class-name">IView</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//显示进度条</span>        <span class="token keyword">void</span> <span class="token function">showProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//隐藏进度条</span>        <span class="token keyword">void</span> <span class="token function">hideProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//登录成功</span>        <span class="token keyword">void</span> <span class="token function">loadSuccess</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//登录失败</span>        <span class="token keyword">void</span> <span class="token function">loadFailed</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取得用户名</span>        String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取得用户密码</span>        String <span class="token function">getUserPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清除输入框</span>        <span class="token keyword">void</span> <span class="token function">clearEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户名和密码不能为空</span>        <span class="token keyword">void</span> <span class="token function">editnotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">LoginPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">IPresenter</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 登录功能         */</span>        <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 清除输入框架内容         */</span>        <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">ILoginModel</span> <span class="token keyword">extends</span> <span class="token class-name">IModel</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/***         * 登录的方法，其实这里就是一个抽象策略，至于你使用 retrofit 还是 asynchttpClient 还是 Volley 那是自己的事情         * @param uName         * @param uPass         * @return         */</span>        Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span>String uName<span class="token punctuation">,</span> String uPass<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中 ILoginModel 就是一个抽象策略，这里是登录功能</p><ul><li>3、分别实现具体的策略「使用不同的网络请求库调用登录 API」</li></ul><p><code>具体策略1：使用 AsyncHttpClient 调用登录</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 具体策略使用 AsyncHttpClient 来调用登录 API * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsynchHppClientImplLogimModel</span> <span class="token keyword">implements</span> <span class="token class-name">ILoginContact<span class="token punctuation">.</span>ILoginModel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">final</span> String uName<span class="token punctuation">,</span> <span class="token keyword">final</span> String uPass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> ObservableEmitter<span class="token operator">&lt;</span>User<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                AsyncHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 这里就是一个请求 没有真正的对接服务器，只是一个演示</span>                client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AsyncHttpResponseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token keyword">int</span> statusCode<span class="token punctuation">,</span> Header<span class="token punctuation">[</span><span class="token punctuation">]</span> headers<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responseBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>uName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"TigerChain"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> uPass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                            user<span class="token punctuation">.</span><span class="token function">setuName</span><span class="token punctuation">(</span>uName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            user<span class="token punctuation">.</span><span class="token function">setUpass</span><span class="token punctuation">(</span>uPass<span class="token punctuation">)</span><span class="token punctuation">;</span>                            e<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                            e<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                            e<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token keyword">int</span> statusCode<span class="token punctuation">,</span> Header<span class="token punctuation">[</span><span class="token punctuation">]</span> headers<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responseBody<span class="token punctuation">,</span> Throwable error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>具体策略2：使用 Volley 调用登录 API</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 具体策略使用 Volley 实现登录功能 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolleyImplLoginModel</span> <span class="token keyword">implements</span> <span class="token class-name">ILoginContact<span class="token punctuation">.</span>ILoginModel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">final</span> String uName<span class="token punctuation">,</span> <span class="token keyword">final</span> String uPass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> ObservableEmitter<span class="token operator">&lt;</span>User<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/***                 * 这里调用和 Volley 相关的 API 实现登录即可                 */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>具体策略3：使用 RetorFit 调用登录 API</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 具体策略 使用 RetorFit 实现登录功能性 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetorFitImplLoginModel</span> <span class="token keyword">implements</span> <span class="token class-name">ILoginContact<span class="token punctuation">.</span>ILoginModel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">final</span> String uName<span class="token punctuation">,</span> <span class="token keyword">final</span> String uPass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ILoginRetorfitApi loginService <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ILoginRetorfitApi<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>uName<span class="token punctuation">,</span>uPass<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中 User 和 ILoginRetorfitApi 类分别是：</p><pre class=" language-java"><code class="language-java"># User<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">/** * @Description 普通人的 Java * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String uName <span class="token punctuation">;</span>    <span class="token keyword">private</span> String Upass <span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> uName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setuName</span><span class="token punctuation">(</span>String uName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uName <span class="token operator">=</span> uName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUpass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Upass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpass</span><span class="token punctuation">(</span>String upass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Upass <span class="token operator">=</span> upass<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"># ILoginRetorfitApi<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">/** * @Description Retorfit API * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoginRetorfitApi</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span>                            <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span>String passWord<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>4、策略中的上下文「这里就是我们具体的 P」 LoginPresenterImpl.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description MVP 中的P ，就相当于策略中Context * @Creator junjun（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginPresenterImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ILoginContact<span class="token punctuation">.</span>LoginPresenter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ILoginContact<span class="token punctuation">.</span>ILoginModel iLoginModel <span class="token punctuation">;</span>    <span class="token keyword">private</span> ILoginContact<span class="token punctuation">.</span>LoginView loginView <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LoginPresenterImpl</span><span class="token punctuation">(</span>ILoginContact<span class="token punctuation">.</span>LoginView loginView<span class="token punctuation">,</span>ILoginContact<span class="token punctuation">.</span>ILoginModel iLoginModel<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iLoginModel <span class="token operator">=</span> iLoginModel <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loginView <span class="token operator">=</span> loginView <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uName <span class="token operator">=</span> loginView<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        String uPass <span class="token operator">=</span> loginView<span class="token punctuation">.</span><span class="token function">getUserPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>uName<span class="token punctuation">)</span> <span class="token operator">||</span> TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>uPass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            loginView<span class="token punctuation">.</span><span class="token function">editnotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        loginView<span class="token punctuation">.</span><span class="token function">showProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iLoginModel<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>uName<span class="token punctuation">,</span>uPass<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//                subscribeOn(Schedulers.io()) 由于 AsyncHttpClient 本身就是在子线程去请求的，所以这里为了演示把这个去掉</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loginView<span class="token punctuation">.</span><span class="token function">loadSuccess</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loginView<span class="token punctuation">.</span><span class="token function">loadFailed</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误，登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        loginView<span class="token punctuation">.</span><span class="token function">hideProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loginView<span class="token punctuation">.</span><span class="token function">hideProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        loginView<span class="token punctuation">.</span><span class="token function">clearEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>到此为止，我们的 MVP+RX+Retorfit 带策略的登录功能就完成了。</p><ul><li>5、客户端调用「在 Activity 中调用」</li></ul><p>下面来看客户调用，不贴代码了「放一张部分代码截图」，后面放出全部 DEMO 大家自行查看</p><img src="/2019/07/03/strategy/mvpLoginStrategy.png" title="mvpLoginStrategy"><p>怎么样，通过以上几个例子，相信我们对策略模式有了很好的理解了</p><ul><li>6、最后运行看一下</li></ul><img src="/2019/07/03/strategy/login.gif" title="登录 DEMO"><p>demo 没有实现完毕，其中 Retorfit 和 Volley 没有完善，有兴趣的可以自行完善</p><blockquote><p>Demo 地址：<a href="https://github.com/githubchen001/mvp-rx-loginStrategy" target="_blank" rel="noopener">https://github.com/githubchen001/mvp-rx-loginStrategy</a></p></blockquote><h3 id="三、Android-源码中的策略模式"><a href="#三、Android-源码中的策略模式" class="headerlink" title="三、Android 源码中的策略模式"></a>三、Android 源码中的策略模式</h3><blockquote><p>1、TimeInterpolator 时间插值器</p></blockquote><p>做过动画的朋友都知道，插值器的概念，一句话就是：设置不同的插值器，动画可以以不同的速度模型来执行</p><p><code>先看看 TimeInterpolator 和它的直接子类</code></p><img src="/2019/07/03/strategy/interploator.png" title="TimeInterpolator"><p><code>TimeInterpolator 的 UML</code></p><img src="/2019/07/03/strategy/TimeInterpolator.jpg" title="TimeInterpolator 的 UML"><p>从 UML 图就可以看出 TimeInterpolator 是一个典型的策略模式，你想使用那种插件器，是客户端的事情，并且结合工厂模式创建各自的插件器</p><blockquote><p>2、ListAdapter </p></blockquote><p>乍一看好像没有见过这个东东呀，但是我说一个你肯定知道 ListView 知道吧，BaseAdapter「实现了 ListAdapter」 知道吧 ，大家以前肯定都使用过 ListView 「虽然现在推荐使用 RecyclerView ，但是它依然被很多人使用」,它就是一个策略，我们来分析一下</p><p><code>ListAdaper 和它的直接子类</code></p><img src="/2019/07/03/strategy/listadapter.png" title="listadapter"><p><code>ListAdapter 的简单的 UML</code></p><img src="/2019/07/03/strategy/ListAdapter.jpg" title="listadapter 简单的 UML"><p>以上只是 ListAdapter 简单的一个 UML 图「问题说明即可，真正的 ListAdapter 比这复杂多」，从上面可以看到 ListAdapter 典型的一个策略模式，有兴趣的朋友可以自行跟一下源码</p><blockquote><p>3、RecyclerView.LayoutManager</p></blockquote><p><code>RecyclerView.LayoutManager 和它的子类</code></p><img src="/2019/07/03/strategy/layoutmanager.png" title="layoutmanager"><p><code>RecyclerView.LayoutManager 简单的 UML</code></p><img src="/2019/07/03/strategy/RecyclerView.LayoutManager.jpg" title="RecyclerView.LayoutManager"><p>可以看到 RecyclerView.LayoutManager 也是一个策略模式</p><p>其实不知不觉中我们使用了好多策略模式，只是没有注意罢了，细细想想，是不是那么回事，再多例子不再举了。有兴趣的朋友可以自已去扒扒 Android 源码看看那部分使用的是策略模式</p><h3 id="四、策略模式和简单工厂模式"><a href="#四、策略模式和简单工厂模式" class="headerlink" title="四、策略模式和简单工厂模式"></a>四、策略模式和简单工厂模式</h3><p>策略模式和简单工厂非常相似，结构基本上一样，但是它们侧重点不一样</p><ul><li>策略模式：是一个行为模式，解决策略的切换和扩展，让策略独立于客户端</li><li>简单工厂模式：是一种创建模式「创建对象」，接收指令创建出具体的对象，让对象的创建和具体的使用客户无关</li></ul><p>但是我们在策略模式中可以使用简单工厂模式「把生成策略这一过程使用工厂去实现，这样好不好呢？适合就是最好的」</p><h3 id="五、策略模式的优缺点"><a href="#五、策略模式的优缺点" class="headerlink" title="五、策略模式的优缺点"></a>五、策略模式的优缺点</h3><p>既然策略模式使用这么广泛，那么策略模式是不是就是无敌了呢，没有一点点缺点？肯定不是的。</p><blockquote><p>优点：</p></blockquote><ul><li>1、结构清晰，把策略分离成一个个单独的类「替换了传统的 if else」</li><li>2、代码耦合度降低，安全性提高「各个策略的细节被屏蔽」</li></ul><blockquote><p>缺点：</p></blockquote><ul><li>1、客户端必须要知道所有的策略类，否则你不知道该使用那个策略，所以策略模式适用于提前知道所有策略的情况下</li><li>2、增加了类的编写，本来只需要 if else 即可「但是这是所有模式和架构的通病呀」</li></ul><p>到此为止我们简单明了的介绍完了策略模式，最后说一下：一定要亲手试试哦！</p><p>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容<br>本文出自 <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">人人都会设计模式</a></p><p><a href="https://mp.weixin.qq.com/s/QL1yj0D6I7Ij0uYQyQmX5Q" target="_blank" rel="noopener">阅读原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02、单例模式</title>
      <link href="/2019/07/02/singleton/"/>
      <url>/2019/07/02/singleton/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/02/singleton/singleton_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 SingleTon 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是单例模式"><a href="#一、什么是单例模式" class="headerlink" title="一、什么是单例模式"></a>一、什么是单例模式</h3><h4 id="1、-生活中的单例"><a href="#1、-生活中的单例" class="headerlink" title="1、 生活中的单例"></a>1、 生活中的单例</h4><p>一个男人只能有一个媳妇「正常情况」，一个人只能有一张嘴，通常一个公司只有一个 CEO ，一个狼群中只有一个狼王等等</p><h4 id="2、程序中的单例"><a href="#2、程序中的单例" class="headerlink" title="2、程序中的单例"></a>2、程序中的单例</h4><p>一句话，就是保证一个类仅有一个实例即可「new 一次」，其实好多人都不把单例当作成一个设计模式，只是当作是一个工具类而已，因为它的确很简单，并且当你面视的时候面视官问你设计模式的时候估计都会说：可以说说你的你了解的设计模式吗「单例除外」。虽然很简单，但是我们还是要掌握和了解它</p><blockquote><p>单例模式的定义</p></blockquote><p>单例单例就是单一的实例，单例模式就保证一个类仅有一个实例，并且提供一个可以仿问的全局方法可以访问它</p><blockquote><p>单例模式的应用</p></blockquote><ul><li>网站的计数器</li><li>应用配置</li><li>多线程池一般也采用单例去设计</li><li>数据库配置,数据库连接池</li><li>其它等等</li></ul><blockquote><p>单例的特点</p></blockquote><ul><li>不能被外部实例化，只能自己内部实例化自己</li><li>单例生成的对象是独一无二的「节省资源」</li></ul><blockquote><p>单例模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Singleton</td><td>单例类</td><td>就是一个普通的类</td></tr><tr><td>getInstance()</td><td>一个静态方法</td><td>提供类的实例</td></tr></tbody></table><blockquote><p>单例模式的 UML </p></blockquote><img src="/2019/07/02/singleton/SingleTon.jpg" title="单例 UML"><p>从上图我们可以了解到编写一个单例的基本步骤「我称之为三步法」</p><ul><li>1、成员变量静态化</li><li>2、构造方法私有化</li><li>3、实例方法静态化</li></ul><p>简单的代码结构就是</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SingleTon</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon instance <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在实际开发中，我们按照以上三步法就可以创建出一个单例来「直接用方法套用即可」</p><h3 id="二、单例模式举例"><a href="#二、单例模式举例" class="headerlink" title="二、单例模式举例"></a>二、单例模式举例</h3><blockquote><p>单例模式举例</p></blockquote><p>比如在一个狼群当中，只有一个狼王，有若干侦察员、捕猎员等等，这样就组成了一个狼群，下面看简单的 java 代码「代码只是用来演示单例模式，参考即可」</p><p><code>先看看狼王单例简单的 UML</code></p><img src="/2019/07/02/singleton/wolf.png" title="狼王单例"><p><code>根据 UML 编码</code></p><ul><li>1、定义一个狼的接口，比如这里是下达任务</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义一个侦察狼，它是放哨和探路的</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 侦察狼 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhenChaLang</span> <span class="token keyword">implements</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行狼王交行的任务</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 去探路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fangShao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 去放哨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义一个捕猎狼，猎羊</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 捕猎狼 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuLieLang</span> <span class="token keyword">implements</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 去猎羊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、主角狼王上场，统一安排规划</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 狼王 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LangWang</span> <span class="token keyword">implements</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LangWang langWang <span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token function">LangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狼王产生了--构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LangWang <span class="token function">getLangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> langWang<span class="token punctuation">)</span><span class="token punctuation">{</span>            langWang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狼王对应的地址："</span><span class="token operator">+</span>langWang<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> langWang <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LangWang<span class="token punctuation">.</span><span class="token function">getLangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LangWang<span class="token punctuation">.</span><span class="token function">getLangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buLie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 安排一些工作给下属狼 比如侦查狼</span>        ZhenChaLang zhenChaLang1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhenChaLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"侦察狼 "</span><span class="token operator">+</span>zhenChaLang1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhenChaLang1<span class="token punctuation">.</span><span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZhenChaLang zhenChaLang2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhenChaLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"侦察狼 "</span><span class="token operator">+</span>zhenChaLang2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhenChaLang2<span class="token punctuation">.</span><span class="token function">fangShao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buLie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BuLieLang buLieLang1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuLieLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"捕猎狼 "</span><span class="token operator">+</span>buLieLang1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buLieLang1<span class="token punctuation">.</span><span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BuLieLang buLieLang2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuLieLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"捕猎狼 "</span><span class="token operator">+</span>buLieLang2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buLieLang1<span class="token punctuation">.</span><span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到狼王是一个单例的「一个狼群确实只有一个狼王」，下面我们来验证一下结果</p><img src="/2019/07/02/singleton/singleton_deom.png" title="狼王单例 demo"><p>我们可以看到，虽然我们调用了两次狼王实例方法确实都是同一个狼王，而不侦查狼和捕猎狼分别是不同的狼，这就是一个单例的使用，各自体会一下。</p><p>上面狼王的例子中我们使用的是非线程安全的懒汉式单例模式，单例模式有好几种实现方式，下面我们来说说这几种实现方式</p><blockquote><p>单例模式的几种实现方式</p></blockquote><h4 id="1、饿汉式"><a href="#1、饿汉式" class="headerlink" title="1、饿汉式"></a>1、饿汉式</h4><p>饿汉式单例模式如其名，是一个饿货，类的实例在类加载的时候就初始化出来「把这一过程当作一个汉堡，也就是说必须要把汉堡提前准备好，饿货就知道吃」</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>1、是线程安全的</li><li>2、类不是延时加载「直接是类加载的时候就初始化」</li></ul><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li><code>优点：</code>没有加锁，执行效率非常高「其实是以空间来换时间」</li><li><code>缺点：</code>在类加载的时候就会初始化，浪费内存「你知道我要不要使用这个实例吗，你就给我初始化，太任性了」</li></ul><h5 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、成员变量静态化  饿汉式直接在类加载的时候就初始化实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2、构造方法私有化</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3、实例公有方法静态化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2、懒汉式线程不安全"><a href="#2、懒汉式线程不安全" class="headerlink" title="2、懒汉式线程不安全"></a>2、懒汉式线程不安全</h4><p>懒汉式单例模式，是在我需要的时候才去初始化实例，也就是说在类加载的时候，静态成员变量是 null 的，只有需要它的时候才去初始化实例，所以懒汉式可以延时加载</p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li>1、线程不安全</li><li>2、延时初始化类，在我需要的时候「也就调用 getInstance」的时候才去初始化化</li></ul><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>延时初始化类，省资源，不想用的时候就不会浪费内存</li><li>2、<code>缺点：</code>线程不安全，多线程操作就会有问题</li></ul><h5 id="演示代码-1"><a href="#演示代码-1" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、类变量静态化 类加载的时候是空的，所以不开辟内存</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon instance <span class="token operator">=</span> null <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2、构造方法私有化，这没什么好说的</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3、实例方法公有并且静态化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span>             instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3、懒汉式线程安全"><a href="#3、懒汉式线程安全" class="headerlink" title="3、懒汉式线程安全"></a>3、懒汉式线程安全</h4><p>懒汉式线程安全比懒汉式线程不全多了一个线程安全</p><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><ul><li>1、线程安全</li><li>2、延时初始化类，在我需要的时候「也就调用 getInstance」的时候才去初始化化</li></ul><h5 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>延时初始化类，省资源，不想用的时候就不会浪费内存，并且线程安全</li><li>2、<code>缺点：</code>虽然线程安全，但是加了锁对性能影响非常大「相当于排队获取资源，没有拿到锁子就干等」</li></ul><h5 id="演示代码-2"><a href="#演示代码-2" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon instance <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在这里加一个同步锁，这样就保证线程安全了</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instalce<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4、DCL「双重检查锁-double-checked-locking」-单例"><a href="#4、DCL「双重检查锁-double-checked-locking」-单例" class="headerlink" title="4、DCL「双重检查锁:double-checked locking」 单例"></a>4、DCL「双重检查锁:double-checked locking」 单例</h4><p>如其名，双检锁，这种方式单例模式在多线程的情况下能提高性能</p><h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h5><ul><li>1、线程安全</li><li>2、延时初始化类，在我需要的时候「也就调用 getInstance」的时候才去初始化化</li></ul><h5 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>延时初始化类，省资源，不想用的时候就不会浪费内存，并且线程安全，双重加锁，多线程仿问性能达到提升「后面详细说 WHY」</li><li>2、<code>缺点：</code>虽然线程安全，但是加了锁对性能影响非常大「相当于排队获取资源，没有拿到锁子就干等」</li></ul><h5 id="演示代码-3"><a href="#演示代码-3" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DCLSingleTon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**1、成员变量静态化**/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DCLSingleTon instance <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**2、构造方法私有化*/</span>    <span class="token keyword">private</span> <span class="token function">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**3、实例方法静态化**/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DCLSingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//第一次检查</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DCLSingleTon<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　<span class="token comment" spellcheck="true">//加锁</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第二次检查</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>双检锁性能提高</p></blockquote><p>那么这种方式，如何保证线程并且有很好的性能呢，首先安全安全不说了看到 synchronized 关键字我们就知道了，这里说一下为什么说性能比 3 中的提高了呢</p><p>我们知道线程安全性能主要是出在 synchronized 锁上，我们只要能保证锁最小化调用即可</p><p>从上面代码可以看出，只有第一次当 instance 为空的时候，才会去调用 synchronized 中的方法，以后就直接返回 synchronized 实例了，也就说 synchronized 只调用一次，所以在多线程上性能会大大的提升</p><blockquote><p>指令重排引起 DCL 问题</p></blockquote><p>这样做看起来很不错，解决了多线程问题并延时加载，并且同步一次性能有了不错的提升，但是这样做仍然会有问题，这和 Java 的内存模型有关「这种内存模型可以让处理器大大的提高执行效率」</p><p>如果再深入的说，就要说 JAVA 的内存模型了「这不在本节范围之内」，大家只要记住，Java 的指令重排会导致多线程问题「单线程不会受影响」，指令排序通俗的说就是代码执行顺序改变了，比如:以下一个简单的例子「下面代码只是为了说明问题，并不是真实情况下的代码」</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"b = "</span><span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果按照正常情况下肯定结果是 a=1,b=2。但是如果指令排序多线程情况下就有可能会出现 a=0,b=2 ，也就是 a = 1 和 b =2 调用顺序反过来了「便于理解，实际比这个复杂多了」，这样就大概解释了指令重排，详细可以看看美团点评技术团队的<a href="https://tech.meituan.com/java-memory-reordering.html" target="_blank" rel="noopener">Java内存访问重排序的研究</a> 讲的还是非常好的</p><blockquote><p>DCL 遇到指令重排出现问题分析</p></blockquote><p>上面的问题要从 <code>instance = new SingleTon()</code> 这句初始化开始「由于这是很多条指令，JVM 可能会指令重排，也叫乱序执行」，这个过程分成三个步骤</p><ul><li>1、给 instance 分配内存</li><li>2、然后调用 SingleTon 的构造方法初始化成员变量</li><li>3、把 instance 对象指向分配的内存空间(到这一步，那么 instance 肯定就是非空的)</li></ul><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>如果按照 1 2 3 执行顺序那么也就存在什么问题，可是实际情况是 2 3 执行顺序是不确定的「指令重排序」，这时结果就会成 1 3 2 ，那么问题来了，假如按后者来说，3 刚执行完毕，2 还没有开始之前，突然被另外一个线程2抢占了，此时 instance 已经非空的「但是却没有初始化」，那么线程2会直接返回 instance 去使用，结果就是挂了</p><img src="/2019/07/02/singleton/nosafe_dclsingleton.png" title="不安全的 DCL 单例"><p>好了，既然找到了问题，那么解决办法有以下两种</p><ul><li>1、不让 2 3 步骤发生指令排序</li><li>2、让保证初始化 intance 时只有一个线程来操作「就是单线程操作，单线程不会存在排序问题」</li></ul><h5 id="解决方案一：不发生指令排序"><a href="#解决方案一：不发生指令排序" class="headerlink" title="解决方案一：不发生指令排序"></a>解决方案一：不发生指令排序</h5><p>使用 volatile 关键字「Java 5 之后 volatile 就可以禁止对指令重新排序 」，就可以指令不发生重排，修改代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DCLSingleTon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**1、成员变量静态化**/</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> DCLSingleTon instance <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**2、构造方法私有化*/</span>    <span class="token keyword">private</span> <span class="token function">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**3、实例方法静态化**/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DCLSingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//第一次检查</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DCLSingleTon<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　<span class="token comment" spellcheck="true">//加锁</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第二次检查</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当然了，Java 5 之后才能完美的使用 volatile ，那么之前如何解决 DCL 安全问题呢？可以使用 Thread Local ，临时变量等具体可以看关于 DCL 的讲解以及改善 <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" target="_blank" rel="noopener">双重锁定被破坏声明</a> 说的非常的好</p><h5 id="解决方案二：静态内存部类-其实就是我们要说的第-5-种单例模式"><a href="#解决方案二：静态内存部类-其实就是我们要说的第-5-种单例模式" class="headerlink" title="解决方案二：静态内存部类 其实就是我们要说的第 5 种单例模式"></a>解决方案二：静态内存部类 其实就是我们要说的第 5 种单例模式</h5><p>利用 classloder 的机制来保证初始化 instance 时只有一个线程。JVM 在类初始化阶段会获取一个锁，这个锁可以同步多个线程对同一个类的初始化</p><p>修改代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DCLSingleTon</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingleTonHolder</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DCLSingleTon instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DCLSingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> SingleTonHolder<span class="token punctuation">.</span>instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5、静态内部类单例模式"><a href="#5、静态内部类单例模式" class="headerlink" title="5、静态内部类单例模式"></a>5、静态内部类单例模式</h4><p>静态内部类可以允许指令重排，但是对别的线程是不可见的，那么就想当于单线程指令重排对结果是没有影响的「这是内存模型的特点」，我们来一下单线程的执行行时序图，我们来看 <code>SingleTon instence = new SingleTon()</code> 这一过程</p><img src="/2019/07/02/singleton/thread_run_time.jpg" title="线程执行时序图"><p>所以静态内存类单例，你就可以理解成一个线程把上述过程做完了，所以别的线程看不见，所以不会出现时间排序的问题</p><p>只要保证 2 在 4 的前面，那么 2 3 是否重排，对结果都是没有影响的「在单线程的情况下」</p><h5 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h5><ul><li>1、线程安全</li><li>2、延时初始化类，在我需要的时候「也就调用 getInstance」的时候才去初始化化</li></ul><h5 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>延时初始化类，省资源，不想用的时候就不会浪费内存,并且线程安全，还可以执行其它的静态方法</li><li>2、<code>缺点：</code> –</li></ul><h5 id="演示代码-4"><a href="#演示代码-4" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingleTonHolder</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DCLSingleTon instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> SingleTonHolder<span class="token punctuation">.</span>instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="/2019/07/02/singleton/static_single.png" title="静态内部类单例"><h4 id="6、枚举类单例"><a href="#6、枚举类单例" class="headerlink" title="6、枚举类单例"></a>6、枚举类单例</h4><p>枚举类单例模式是 《Effective Java》 作者极力推荐的单例的方法</p><h5 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h5><p>特点也就是检举类的特点，我们先看看枚举类的特点吧，多说无用，我们结合 java 代码来分析</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一周的枚举，这里为了说明问题，只列举到周三</span><span class="token keyword">public</span> <span class="token keyword">enum</span> EnumDemo <span class="token punctuation">{</span>  MONDAY<span class="token punctuation">,</span>  TUESDAY<span class="token punctuation">,</span>  WEDNESDAY <span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">donSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上就是一个简单的枚举 Java 类，我们反编译来看一下它的实现机制是杂样的，在这里我使用 <a href="https://varaneckas.com/jad/" target="_blank" rel="noopener">jad</a> 来反编译「当然你也可以使用 javap 来反编译还能看到二制」,以上 java 代码反编译出来的结果如下：</p><img src="/2019/07/02/singleton/enum_dcode.png" title="枚举类单例"><p>从以上反编译出来的代码图我们可以看出以下几点信息：</p><ul><li>1、枚举类类型是 final 的「不可以被继承」</li><li>2、构造方法是私有的「也只能私有，不允许被外部实例化，符合单例」</li><li>3、类变量是静态的</li><li>4、没有延时初始化，随着类的初始化就初始化了「从上面静态代码块中可以看出」</li><li>5、由 4 可以知道枚举也是线程安全的</li></ul><p>以上就是枚举类的特点，很符合单例模式，并且集成上以上几种单例模式的优点</p><h5 id="优缺点-5"><a href="#优缺点-5" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>除以上特点优点之外，枚举类还有两个优点：<code>写法简单</code>、<code>支持序列化和反序列化操作「以上的单例序列化和反序列化会破坏单例模式」</code>、<code>并且反射也不能调用构造方法</code></li><li>2、<code>缺点：</code> –</li></ul><h5 id="演示代码-5"><a href="#演示代码-5" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span>  EnumSingleTon <span class="token punctuation">{</span>    INSTACE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个枚举原素，代表 EnumSingleTon 一个实例</span>    <span class="token comment" spellcheck="true">/**     * 枚举中的构造方法只能写成 private 或是不写「不写默认就是 private」，所以枚举防止外部来实例化对象     */</span>    <span class="token function">EnumSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 一些额外的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSometing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"枚举类单例"</span><span class="token punctuation">,</span><span class="token string">"这是枚举单例中的方法"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般情况下，不建议使用第 2 种和第 3 种懒汉式单例，建议使用第 1 种饿汉式单例，如果项目中明确要使用延时加载那么使用第 5 种静态内存类的单例，如果有序列化反序列化操作可以使用第 6 种单例模式，如果是其它需求可以使用第 4 种 DCL 单例</p><h3 id="三、Android-中的单例模式"><a href="#三、Android-中的单例模式" class="headerlink" title="三、Android 中的单例模式"></a>三、Android 中的单例模式</h3><blockquote><p>1、 InputMethodManager 类</p></blockquote><p>InputMethodManager 就一个服务类「输入法类」源码目录 <code>Androidsdk\sources\android-26\android\view\inputmethod</code>,部分代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INPUT_METHOD_SERVICE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">InputMethodManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略若干行代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">static</span> InputMethodManager sInstance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略若干行代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 以下是构造方法，没有声明权限就是私有的</span>    <span class="token function">InputMethodManager</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServiceNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>IInputMethodManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>                ServiceManager<span class="token punctuation">.</span><span class="token function">getServiceOrThrow</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INPUT_METHOD_SERVICE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> looper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 以下是构造方法，没有声明权限就是私有的</span>    <span class="token function">InputMethodManager</span><span class="token punctuation">(</span>IInputMethodManager service<span class="token punctuation">,</span> Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mService <span class="token operator">=</span> service<span class="token punctuation">;</span>        mMainLooper <span class="token operator">=</span> looper<span class="token punctuation">;</span>        mH <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">H</span><span class="token punctuation">(</span>looper<span class="token punctuation">)</span><span class="token punctuation">;</span>        mIInputContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControlledInputConnectionWrapper</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span>                mDummyInputConnection<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InputMethodManager <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>InputMethodManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputMethodManager</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServiceNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略若干行代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>从上面代码可以看出，InputMethodManager 是一个典型的– <code>线程安全的懒汉式单例</code></p><blockquote><p>2、Editable 类</p></blockquote><p>文件目录:frameworks/base/core/java/android/text/Editable.java 部分代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Editable<span class="token punctuation">.</span>Factory sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editable<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * Returns the standard Editable Factory.  */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Editable<span class="token punctuation">.</span>Factory <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </code></pre><p>可以看到非常典型的一个饿汉式单例模式</p><p>Android 源码中有非常多的单例模式的例子，这里就一一列举了，相信你看完上面的介绍绝对可以写出一个适合自己项目的单例了</p><p>到此为止，我们就把单例械说完了，动手试试吧</p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul><li>1、美团点评技术团队：<a href="https://tech.meituan.com/java-memory-reordering.html" target="_blank" rel="noopener">Java内存访问重排序的研究</a></li><li>2、双重锁定被破坏声明：<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" target="_blank" rel="noopener">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></li><li>3、方腾飞 《Java 并发编程的艺术》 第三章 Java 内存模型</li></ul><p><a href="https://mp.weixin.qq.com/s/jXf8fbBubsBk0QaPKYGRkA" target="_blank" rel="noopener">阅读原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01、简单工厂模式</title>
      <link href="/2019/07/02/simplefactory/"/>
      <url>/2019/07/02/simplefactory/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/02/simplefactory/simplefactory_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 FactoryPatttern/SimpleFactory 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是简单工厂"><a href="#一、什么是简单工厂" class="headerlink" title="一、什么是简单工厂"></a>一、什么是简单工厂</h3><h4 id="1、-生活中的工厂"><a href="#1、-生活中的工厂" class="headerlink" title="1、 生活中的工厂"></a>1、 生活中的工厂</h4><p>简单工厂，从字面意思也能理解出来，就是一个很简单的工厂「W T F」，说了等于没有说是吧。我们先说说工厂吧</p><p>工厂就是一个制造厂，在生活中工厂太多太多了，比如车厂就是用来造车的，双汇就是出火腿肠的「当然不只是火腿」，烟草厂就是制作和加工香烟的，等等。</p><p>生活中的这些工厂是如何工作的呢？比如双汇制作火腿肠，肯定是把肉送进去，根据若干程序最后出来就是火腿。「如果想要鸡肉肠，那么加点鸡肉，玉米的加点玉米」，也就是说给定一些原材料「玉米、肉」出来的就是玉米肠，也就是说工厂就是输入东西—-然后制造出我想要的东西「至于你怎么样制造的，我管你呢」</p><h4 id="2、-程序中的工厂"><a href="#2、-程序中的工厂" class="headerlink" title="2、 程序中的工厂"></a>2、 程序中的工厂</h4><p>程序是源于生活的，所以程序中的工厂和生活中的工厂非常类似，生活工厂中的产品非常多，但是在程序中工厂的作用就是创造对象。</p><blockquote><p>简单工厂模式定义</p></blockquote><p>简单工厂模式又称为静态工厂模式，简单工厂模式的作用就是创建一个工厂类用来创建其它类的实例，至于类是怎么样创建的对用户来说是不可见的「屏蔽细节」</p><blockquote><p>简单工厂模式结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Product</td><td>产品类</td><td>一般是一个抽象类或是接口</td></tr><tr><td>ConcreteProduct</td><td>具体的产品类</td><td>实现或是继承 Product</td></tr><tr><td>Factory</td><td>工厂类</td><td>用来创建具体的产品</td></tr></tbody></table><blockquote><p>简单工厂模式的 UML 图</p></blockquote><img src="/2019/07/02/simplefactory/simple_factory_uml.jpg" title="简单工厂 UML"><h3 id="二、简单工厂举例"><a href="#二、简单工厂举例" class="headerlink" title="二、简单工厂举例"></a>二、简单工厂举例</h3><p>比如我有苹果、桔子、等水果，然后有一个榨汁机，我给一个苹果就给我榨出苹果汁，给桔子就出桔汁。</p><blockquote><p>分析一下：</p></blockquote><p>在这个例子中，果汁就是我们的产品，而苹果汁，桔子汁就是我们的具体的产品，榨汁机就是我们的工厂,而苹果，桔子等水果就是我们输送的原材料</p><blockquote><p>写代码</p></blockquote><p>写代码之前先看看榨汁机工厂的 UML 图</p><img src="/2019/07/02/simplefactory/juice_uml.jpg" title="榨汁机工厂"><ul><li>1、定义抽象产品果汁接口 IJuice.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 创建一个果汁接口 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IJuice</span> <span class="token punctuation">{</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//也可以声明一些其它的业务方法</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义具体的产品，苹果汁「<code>AppleJuice.java</code>」，桔汁「<code>OrangeJuice.java</code>」</li></ul><pre class=" language-java"><code class="language-java"># AppleJuice<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">/** * @Description 一个具体的产品--- 苹果汁 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppleJuice</span> <span class="token keyword">implements</span> <span class="token class-name">IJuice</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"AppleJuice"</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"我是苹果汁"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"我是苹果汁"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"># OrangeJuice<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">/** * @Description 具体的产品桔子汁 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrangeJuice</span> <span class="token keyword">implements</span> <span class="token class-name">IJuice</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"OrangeJuice"</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"我是桔子汁"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"我是桔子汁"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、创建榨汁机「工厂类」 JuiceFactory.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description  果汁机---工厂 * @Creator junjun（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JuiceFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据名称来生产不同的果汁     * @param name     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IJuice <span class="token function">createJuice</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        IJuice iJuice <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//苹果汁</span>            iJuice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleJuice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//桔子汁</span>            iJuice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrangeJuice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> iJuice <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、在 MainActivity 中使用</li></ul><p>核心代码，其它的代码是布局有两个按钮和一个文本，并且添加点击事件，这里不贴代码了。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_create_apple<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//对使用者来说，屏蔽了具体的细节,我管你杂榨汁呢</span>                IJuice appleJuice <span class="token operator">=</span> JuiceFactory<span class="token punctuation">.</span><span class="token function">createJuice</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                tv_show_result<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>appleJuice<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_create_orange<span class="token operator">:</span>                IJuice orangeJuice <span class="token operator">=</span> JuiceFactory<span class="token punctuation">.</span><span class="token function">createJuice</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                tv_show_result<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>orangeJuice<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、运行结果看果</li></ul><img src="/2019/07/02/simplefactory/smfactory_demo.gif" title="试试榨汁机"><p>这样我们一个简单的工厂模式就完了，是不是很简单「所以才叫简单工厂模式吗 (*^__^*)」</p><h3 id="三、从-Android-中看简单工厂"><a href="#三、从-Android-中看简单工厂" class="headerlink" title="三、从 Android 中看简单工厂"></a>三、从 Android 中看简单工厂</h3><blockquote><p>1、BitmapFactory</p></blockquote><p>在 Android 中我们经常使用 Bitmap ，其实和 Bitmap 相关的 BitmapFactory 就是一个简单工厂模式 </p><h5 id="我们来看看-BitmapFactory-的方法"><a href="#我们来看看-BitmapFactory-的方法" class="headerlink" title="我们来看看 BitmapFactory 的方法"></a>我们来看看 BitmapFactory 的方法</h5><img src="/2019/07/02/simplefactory/BitmapFactory_method.png" title="BitmapFactory_method"><p>可以看到 BitmapFactory 分为两类，一类是普通原静态方法「红色框中」，第二类是 JNI 调用的方法「黄色框内」</p><p>其实从字面意思我们也可以看到 BitmapFactory 就是 Bitmap 的工厂就是用来生成 Bitmap 的</p><p>概括起来 BitmapFactory 生成 Bitmap 无非就是根据三种输入源「各个参数」</p><ul><li>1、图片的路径</li><li>2、图片的二进制文件</li><li>3、图片的流</li></ul><p>好我们现在就拿简单工厂模式来分析 BitmapFactory ,为什么说 BitmapFactory 是一个简单工厂模式</p><h5 id="BitmapFactory-UML-分析"><a href="#BitmapFactory-UML-分析" class="headerlink" title="BitmapFactory UML 分析"></a>BitmapFactory UML 分析</h5><p>通过前面的学习，我们知道简单工厂模式要有一个产品「抽象类」，具体产品「实现类」，还要有一个工厂，我们拿这三样对比 BitmapFactory 就可以了 ，我们看到是这样的</p><img src="/2019/07/02/simplefactory/BitmapFactory.jpg" title="BitmapFactory 的简易 UML"><p>纳尼？这是简单工厂模式吗？怎么和简单工厂模式的结构匹配不上呢，话说我的产品接口呢？</p><p>这肯定是简单工厂模式，没看比我们前面的简单工厂模式结构还简单吗？*^__^*,还有谁 TM 说一定必须得有抽象产品这么一说「反正我没有说」，为什么呢？因为 BitmapFactory 很明确就是创建 bitmap 的「功能很单一」，这里的 bitmap 就是我的具体产品「只有这一个产品呀，你咬我呀」，我还需要抽象产品接口吗？肯定不需要了。</p><h5 id="BitmapFactory-生成-Bitmap-流程"><a href="#BitmapFactory-生成-Bitmap-流程" class="headerlink" title="BitmapFactory 生成 Bitmap 流程"></a>BitmapFactory 生成 Bitmap 流程</h5><p>大概看一个　BitmapFactory 生成 Bitmap 的一个流程吧，这里以 decodeFile(String filePath) 为例来说明</p><img src="/2019/07/02/simplefactory/bitmapfactory_decodefile.png" title="bitmapfactory_decodefile"><p>上图已经很清楚的看到使用 BitmapFactory.decodeFile(String filePath) 生成一张 Bitmap 的过程了「最后是调用 JNI 来生成 Bitmap 的」，其它的方法过程都是类似，其实这一张图就是生成一张 Bitmap 的细节，而使用 BitmapFactory 就是把这些细节都屏蔽了，我管你杂生成的，我给你一个图片路径你给我生成一个 Bitmap 就好了</p><blockquote><p>2、Executors </p></blockquote><p>我们对 Executors 应该不会陌生「这里不过多讲 Executors，只是感受一下简单工厂模式」，Executors 是用来创建线程池的，其它它也是一个工厂，我们来看看吧</p><h5 id="我们来看看-Executors-的方法"><a href="#我们来看看-Executors-的方法" class="headerlink" title="我们来看看 Executors 的方法"></a>我们来看看 Executors 的方法</h5><img src="/2019/07/02/simplefactory/executors_method.png" title="executors_method"><p>在这里，我只截取了部分方法，我们可以看到 Executors 有一些创建缓存线程池等等一系列方法，并且其中还有一个线程工厂「图中红色框，从名字可以看出」</p><h5 id="Executors-简单的-UML"><a href="#Executors-简单的-UML" class="headerlink" title="Executors 简单的 UML"></a>Executors 简单的 UML</h5><img src="/2019/07/02/simplefactory/Executors_uml.png" title="Executors 简单的UML"><p>上图是 Executors 简单的一个 UML 没有全部画出，大概意思基本上表明了，我们从图中可以看出，Executors 完全就是一个简单工厂模式，基本上符合我们简单工厂模式的结构，只不过多了几个接口和类而已「我们只看(1),(2),(3) 就完全符合简单工厂模式」，也就是我给你一些参数你给我创建我想要的线程池即可</p><h3 id="四、简单工厂的优缺点"><a href="#四、简单工厂的优缺点" class="headerlink" title="四、简单工厂的优缺点"></a>四、简单工厂的优缺点</h3><blockquote><p>优点：</p></blockquote><ul><li>实现起来非常简单「不然叫毛个简单工厂呢」，也充分利用了多态机制</li><li>解耦「使调用端不再创建对象，而是交给工厂去创建」，并且对内部实现屏蔽「调用端不知道具体实现」</li><li>分工明确，并且能更好的体现出代码含义</li></ul><blockquote><p>缺点</p></blockquote><ul><li>工厂静态方法无法继承</li><li>代码维护不容易，如果想要创建更多的具体实现的对象，需要大量修改工厂</li><li>违反开闭原则「对扩展开放，对修改关闭」，如果有一个新的对象要添加，那么就要修改工厂</li></ul><p>以上就是对简单工厂模式的一个介绍，确实挺简单的，到此为止，我们就说完了简单工厂模式</p><hr><p>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容<br>本文出自 <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/" target="_blank" rel="noopener">人人都会设计模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02、永不过时的 HelloWorld</title>
      <link href="/2019/06/29/flutterhelloworld/"/>
      <url>/2019/06/29/flutterhelloworld/</url>
      
        <content type="html"><![CDATA[<img src="/2019/06/29/flutterhelloworld/flutter_hello_page_logo.png" title="本节大纲"><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、目录结构"><a href="#一、目录结构" class="headerlink" title="一、目录结构"></a>一、目录结构</h3><p>在上一小节中我们介绍了 Flutter 的安装方法以及 Flutter 的开发环境「IDE」，并且运行了 Flutter 默认给我们生成的项目，但是代码我们应该写在那里以及项目的组成部分我们还是一概不知的，下面我们先来看看项目的目录吧</p><img src="/2019/06/29/flutterhelloworld/flutter_struct.jpg" title="flutter 的项目结构"><h4 id="1、基本结构"><a href="#1、基本结构" class="headerlink" title="1、基本结构"></a>1、基本结构</h4><p>如果熟悉 ReactNative 的童鞋对这个目录不会陌生，基本上来说就是 Android 和 IOS 来承载 flutter，一般情况下 Android 和 IOS 中的文件我们不会去动，除非要混合开发，而我们的 flutter 文件是在 lib 文件夹中的，并且入口文件是 main.dart，其它的没什么好说的，不过要注意一点就是 pubspec.yaml 文件它是 flutter 的配置文件，类似于 Android 中的 gradle 和 Manifest 文件，具体后面会说</p><h4 id="2、初识-main-dart-文件"><a href="#2、初识-main-dart-文件" class="headerlink" title="2、初识 main.dart 文件"></a>2、初识 main.dart 文件</h4><p>此文件是 flutter 的入口文件，默认会给我们生成一个界面，也就是我们上节看到的界面，我们来看看里面有啥东东</p><img src="/2019/06/29/flutterhelloworld/main_dart.jpg" title="默认的 main.dart 文件"><p>我靠啥东东吗「如果初学 flutter 看到这个东西会晕晕的」，在组件化流行之后「以 React/Vue 等为代表」，flutter 也不例外也是采用组件化「其实就是借鉴了 React，但是 Google 叫它为 Widget – 小部件，就是一个组件，和 React/Vue 的 Component 是一个东东」，一个 flutter 项目就是由一个个 Widget 组成的「关于如何定义 Widget 后面章节说，不在本节范围内」</p><p>总之一句话，这个 main.dart 文件第一次看不懂，看不懂，那么我们就不看了「后面通过学习，自然懂了」，只需要知道这个货就是 flutter 的入口文件即可</p><h3 id="二、手写-HelloWorld"><a href="#二、手写-HelloWorld" class="headerlink" title="二、手写 HelloWorld"></a>二、手写 HelloWorld</h3><h4 id="1、命令式和声明式"><a href="#1、命令式和声明式" class="headerlink" title="1、命令式和声明式"></a>1、命令式和声明式</h4><p>命令式和声明式是两种编程方式，我们来说说吧</p><p><strong>命令式</strong></p><p>命令式就是所有功能和属性是通过指令来响应的，玩过 jquery「操作 DOM」 都知道基本上事件驱动的都是基于此种模式的，举个例子吧，比如我们要取得输入框的值，使用 js 来操作    </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 取得 input 元素</span><span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>onChange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> value <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>就是发送一个消息告诉系统一步步如何去做</p><p><strong>声明式</strong></p><p>比如 React/Vue 或者是 Android 中的布局 xml 文件都是声明式的，它主要是告诉系统做什么，但是具体如何做是系统的事情，拿 Jquery 和 React/Vue 对比就非常清楚了，Jquery 通过命令式来操作 DOM 但是 React/Vue 把操作 DOM 屏蔽了，只要通过声明来实想要的效果，使用 vue 实现上述效果</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>flutter 属于声明式</strong></p><p>我们在写组件或界面的时候基本上都是给类似于 key:value 这种形式来指明我想的东西，至于东西杂样出来底层帮你做了「你不用关心」</p><h4 id="2、手写-helloworld"><a href="#2、手写-helloworld" class="headerlink" title="2、手写 helloworld"></a>2、手写 helloworld</h4><p>看到上面的 main.dart 文件我们晕晕的，那就直接把它内容删掉，只保留第一行「import 语句」，一个最简单的 flutter 应用只有一个 runApp 方法和一个组件，官网上说的很清楚，如下</p><img src="/2019/06/29/flutterhelloworld/minimal_fultter.jpg" title="最小的 flutter app]"><p>void main 就是程序的主入口，相当于 java 的 main 方法没什么好说的，通过 runApp 来加载组件并且将其添加到屏幕上，这是比较简单的 flutter 应用，但还不够简单，更简单应该就是 runApp 直接来个 组件如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span>     <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>       <span class="token string">'Hello'</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 文字方向，从左向右</span>       textDirection<span class="token punctuation">:</span> TextDirection<span class="token punctuation">.</span>ltr     <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>没啥说的看看效果吧，直接 flutter run 看效果</p><img src="/2019/06/29/flutterhelloworld/flutter_hello.jpg" title="文本左对齐"><p>看到了吧一个最简单的 flutter 应用就出来了，显示了一个 hello 但是位置被挡住了「没关系我们调整即可」</p><p>这里 Text 就是一个组件，如果想让 Hello 水平居中使用其 textAlign 属性来选择水平对齐方式，如果我们想让 hello 在屏幕的中间，则需要给 Text 外面套一个组件 Center 或 Align 即可，我们套一个 Center 来试试</p><img src="/2019/06/29/flutterhelloworld/flutter_hello_center.jpg" title="居中对齐"><p>如果我们在命令行输入 flutter run 运行起来以后，修改代码直接使用 shift+r「即 R」就可以实现热加载，不废话看效果</p><img src="/2019/06/29/flutterhelloworld/flutter_hello_center_code.gif" title="文本居中"><p>我们在 Text 外套了一个 Center 组件，然后我按了一个 R 所修改的效果就出来了「是不是感觉很爽」，有可能初次写这些东西的时候不清楚是什么意思，没关系我们说组件的时候会详细的介绍，只需要知道 Center 是一个组件里面有一个 child 组件 Text</p><h3 id="三、Flutter-组成"><a href="#三、Flutter-组成" class="headerlink" title="三、Flutter 组成"></a>三、Flutter 组成</h3><p>一个 flutter 应用是由各个组件组成的，面向对象是一切皆对象，React/Vue 一切皆组件，flutter 也是一切皆组件，提前说一下组件的组成方式，在 flutter 中通过组件嵌套的方式生成应用，这里就以上面的例子来说明吧</p><img src="/2019/06/29/flutterhelloworld/flutter_hello_center.jpg" title="组件组成"><p>此 demo 由一个 Center 组件和 Text 组件组成</p><img src="/2019/06/29/flutterhelloworld/hello_component.jpg" title="demo 组件组成图"><p>这没有什么好说的，当然这个 demo 太简单，真实情况比这复杂多了，但是再复杂的 flutter 应用也是由一个个组件组成的，如图所示</p><img src="/2019/06/29/flutterhelloworld/flutter_widget_tree.jpg" title="demo flutter 由一个个小部件组成"><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ul><li>1、了解 flutter 目录结构</li><li>2、手写 hello world ，并且了解命令式编程和声明式程序的区别</li><li>3、flutter 的组成以及组件化思想</li></ul><p>本节和上一小节是一个预热，下一小节我们说说 flutter 常用的组件，熟悉了这些组件「以及如何使用它们」我们就可以开干 flutter 应用的界面了</p><hr><p>作者: <a href="https://github.com/TigerChain" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容，公号「TigerChain」首发</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/qrcode.jpg" alt="tigerchain"></p>]]></content>
      
      
      <categories>
          
          <category> 从头整 Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01、环境搭建</title>
      <link href="/2019/06/15/flutterevninit/"/>
      <url>/2019/06/15/flutterevninit/</url>
      
        <content type="html"><![CDATA[<p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/flutter_env_page_logo.png" alt="flutter 环境搭建大纲"></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是-Flutter"><a href="#一、什么是-Flutter" class="headerlink" title="一、什么是 Flutter"></a>一、什么是 Flutter</h3><h4 id="1、移动端几种开发模式"><a href="#1、移动端几种开发模式" class="headerlink" title="1、移动端几种开发模式"></a>1、移动端几种开发模式</h4><p>在说 flutter 是什么之前，我们先来看看目前移动端开发几种模式</p><ul><li>1、纯原生开发「即 native 开发」</li><li>2、纯的 webapp </li><li>3、hybrid 混合式开发</li></ul><p>除了第 1 个原生开发外，其余的两个现在基本上有两个方案，一种是基于原生的 webview 去做扩展和开发，第二种是使用 jsbridge 方案来直接调用原生控件来渲染</p><p>cordova appcan mui 等就是基于 webview 来扩展来使用 html、js来完成界面效果，这种方案性能是一个硬商，并且如 cordova 等如果有些功能不能满足我们还需要自定义原生去扩展插件功能，在这里 webview 的缺点都会体现出来</p><p>jsbridge 为代表的是 ReactNative、Weex ,没有 webview 直接把渲染工作交给系统去完成，这样性能就大大提升，但是跨平台特性不彻底，有时需要针对不同平台写不同的代码，并且开发者如果是一个人需要掌握 IOS/Android 两个平台的原生开发，但是 jsbridge 也是需要代价的这块也会有性能问题，那么有没有可以有原生体验，又不用 webview 和 jsbridge 当然有，native 开发「这不废话吗」，其实 flutter 就是在这种思路下诞生的</p><h4 id="2、flutter-是什么"><a href="#2、flutter-是什么" class="headerlink" title="2、flutter 是什么"></a>2、flutter 是什么</h4><p>flutter 是 Google 开源的一个可以高质量的编写 IOS/Android 的移动 UI 框架，flutter 重写了一套 UI 杠架，不基于 webview 也不基于 jsbridge ,是从头到尾彻底重写了甚至还包括他的开发语言「Dart 反正效率比 js 高」,它的渲染引擎是基于跨平台的 Skia 图形库来实现，可以简单的理解 flutter 上面的界面就是直接使用 canvas 画出来的</p><h3 id="二、flutter-开发环境"><a href="#二、flutter-开发环境" class="headerlink" title="二、flutter 开发环境"></a>二、flutter 开发环境</h3><p>flutter 可以在 Mac/Windows/Linux 上进行开发，由于个人电脑是 mac 电脑，所以以 mac 环境来说一下「其它平台类似」，总体来说就以下三步</p><h5 id="1、下载-Mac-环境下的-flutter-安装包"><a href="#1、下载-Mac-环境下的-flutter-安装包" class="headerlink" title="1、下载 Mac 环境下的 flutter 安装包"></a>1、下载 Mac 环境下的 flutter 安装包</h5><p>下载地址：<a href="https://flutter.io/docs/get-started/install/macos" target="_blank" rel="noopener">https://flutter.io/docs/get-started/install/macos</a></p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/flutter_download.jpg" alt="flutter mac 版本下载"></p><p>点击下载即可</p><h5 id="2、解压安装包并且配置环境变量"><a href="#2、解压安装包并且配置环境变量" class="headerlink" title="2、解压安装包并且配置环境变量"></a>2、解压安装包并且配置环境变量</h5><p>把下载下来的 .zip 安装包解压到指定目录比如 installSoftWare<br>配置环境变量在 .bash_profile 或 .zshrc 中添加</p><pre><code>export PATH=&quot;$PATH:/`pwd`/installSoftWare/flutter/bin&quot;</code></pre><p>其中 pwd 就是你在命令行默认界面 pwd 中出来的命令，一般是 /User/XXX，然后保存文件，基本上 flutter 就可以使用了，我们可以在命令行中试一下 flutter 命令</p><h5 id="3、安装-flutter-依赖"><a href="#3、安装-flutter-依赖" class="headerlink" title="3、安装 flutter 依赖"></a>3、安装 flutter 依赖</h5><p>经过上面两步 flutter 安装完成了，但是还需要安装一些依赖，我们配置完以后运行 flutter doctor 来检查一下缺少的依赖</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/flutter_doctor.jpg" alt="flutter_doctor 检查依赖"></p><p>如图所示，我这里是把所需要的依赖安装完了，不是最初的状态，你直接运行会报好多 x 可以选择根据自己需要的安装，比如拿 AndroidStudio 开发那就安装 AndroidStudio 的依赖「在 AS 的 Plugins 中安装 flutter 即可」，在 Vs Code 中开发安装 flutter 插件即可，根据自己需要安装即可只要前第一个没有问题你配置个 Android/IOS 环境再加一个开发 IDE 依赖就可以了，这没什么好说的，如果有 x 号会提示你如何解决的</p><h3 id="三、来个-Demo-试一下"><a href="#三、来个-Demo-试一下" class="headerlink" title="三、来个 Demo 试一下"></a>三、来个 Demo 试一下</h3><p>这里我们使用两种方式来创建 flutterdemo 项目</p><h5 id="1、使用命令行创建"><a href="#1、使用命令行创建" class="headerlink" title="1、使用命令行创建"></a>1、使用命令行创建</h5><p>为了方便演示，我们在 Destop 创建一个 flutterdemo 项目，使用 flutter create xxx「项目名」 来创建项目</p><pre><code>cd ~cd Desktopflutter create flutterdemo  // 创建一个 flutter 项目</code></pre><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/flutter_create_demo.jpg" alt="创建一个 flutter demo"></p><p>这样我们就创建出第一个 flutter 项目，在这期间我还偷偷的把 IOS 环境也安装了「嘿嘿」</p><p><strong>注意：</strong> flutter 在获取 package 的时候可能会非常慢，这一点官方也考虑到了，我们直接看 <a href="https://flutter.io/community/china" target="_blank" rel="noopener">https://flutter.io/community/china</a> 中说的非常详细，国内用户还需要在环境变量中配置以下内容「怎么样贴心吧」</p><pre><code>export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</code></pre><p>根据提示，我们来进入到项目中然后 run 一下，看看效果</p><pre><code>cd flutterdemoflutter run</code></pre><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/flutter_run_not_device.jpg" alt="flutter 提示没有运行设备"></p><p>很不幸，没有运行起来，大概意思就是我们没有启动模拟器或真机，没事跟着提示走，运行 flutter emulators 查看有那些模拟器</p><pre><code>flutter emulators</code></pre><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/flutter_emulators.jpg" alt="flutter 查看本机的模拟器"></p><p>可以看到我本地有一个 Android 模拟器和 一个 IOS 模拟器，那么接下来我们就可以启动模拟器了，当然前提是你必须有模拟器，如果没有先创建可以根据命令提示创建也可以在 AndroidStudio/Xcode 中创建效果一样，当然你也可以直接使用真机测试</p><p>使用 flutter emulators –launch <emulator id> 启动模拟器，在我本机我启动了我的 Android 模拟器</emulator></p><pre><code>flutter emulators --launch Nexus_5_API_25</code></pre><p>你可以对应自己的模拟器去开启</p><p>再次运行 flutter run </p><pre><code>flutter run </code></pre><p>没什么问题就会运行起来，在 Android 模拟器上我们创建的 Demo 张这个样子</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/flutter_demo_runinandroid.jpg" alt="Android 设备运行 Demo"></p><p>在 IOS 模拟器上张这个样子</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/ios_flutter_run.jpg" alt="iOS 上运行 Demo"></p><p>如果 Android 和 IOS 模拟器都运行起来了，那么执行 flutter run 的时候会提示让你选择使用那个模拟器来运行项目</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/flutter_select_android_or_ios.jpg" alt="提示选择使用所运行起来的模拟器"></p><pre><code>flutter run -d &lt;deviceId&gt; </code></pre><p>使用此命令来选择运行那个模拟器其中 <strong>deviceId</strong> 对应上图中红色箭头指出的值，总之运行 flutter run 如果没有模拟器等等它会自动提示，你按照提示完成即可</p><h5 id="2、使用VsCode-创建项目"><a href="#2、使用VsCode-创建项目" class="headerlink" title="2、使用VsCode 创建项目"></a>2、使用VsCode 创建项目</h5><p>打开 vscode 创建按 ctrl/command +shift +p 输入 flutter 就会看到和 flutter 相关的一些命令「前提是你要在 vscode 中安装 flutter 插件」</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/vscode_flutter.jpg" alt="vscode 中安装 flutter 插件"></p><p>我们可以看到 flutter 的命令，我们直接使用 New Project 来创建一个 flutter 项目，然后选择一个目录或是创建一个目录来放置 flutter 项目，我这里在桌面上创建了一个 vscodeflutter 目录，然后就会自动创建出 flutter 的项目，张这个样子</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/vscode_flutter_strc.jpg" alt="vscode 创建的项目目录"></p><p>这样我们就成功的在 vscode 中创建了一个 flutter 项目，此时我们再使用 ctrl/command +shift +p 输入 flutter 命令可看一下</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/vscode_createproject_fluuter_cmd.jpg" alt="再次查看 flutter 命令"></p><p>我们可以看到我们创建了项目以后会多出几条命令，我们可以选择相应的命令比如加载模拟器等，然后我们我们打开 vscode 的 命令行输入 flutter run 来运行项目</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/vscode_flutter_run.jpg" alt="使用 flutter run 运行项目"></p><p>同样项目可以运行起来</p><h5 id="3、其它开发环境"><a href="#3、其它开发环境" class="headerlink" title="3、其它开发环境"></a>3、其它开发环境</h5><p>除了以上两种方式我们也可以使用 AndroidStudio 来创建 flutter 项目，我也在 Android 插件中安装了 flutter 就可以创建 flutter 项目了「它就会有 flutter 创建项目模版」，和创建一个普通的 Android 项目非常类似，同样可以在 AndroidStudio 启动以后去创建，或是打开一个项目然后选择</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/as_create_flutter_project.jpg" alt="Android Studio 创建项目"></p><p>或打开某个工程中去创建</p><p>![Android Studio 创建项目方式二]<a href="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/as_create_flutter_project2.png" target="_blank" rel="noopener">https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/as_create_flutter_project2.png</a>)</p><p>都是一样的，然后下一步操作即可，以上就把 flutter 的配置和创建介绍完了下面总结一下</p><h3 id="四、总结、扩展"><a href="#四、总结、扩展" class="headerlink" title="四、总结、扩展"></a>四、总结、扩展</h3><p>这节我们说了一下 flutter 的环境配置，基本上按照官方的步骤一步步来没有什么问题，就是要注意一下可能会出现一个依赖或插件安装时”卡死”的问题，这就需要科学上网或是使用 flutter 给国内开发得提供的配置通道基本上都能一路配置成功，大概总结一下</p><h5 id="1、flutter-高性能、跨平台"><a href="#1、flutter-高性能、跨平台" class="headerlink" title="1、flutter 高性能、跨平台"></a>1、flutter 高性能、跨平台</h5><p>flutter 是一个高性能的跨平台解决方案「彻底跨平台」，完全重写了底层没有 webview 没有 jsbridge 采用 canvas 直接绘制界面采用 gpu 去渲染，这也是不同于 RN ，Weex 和基于 webview 的 H5 开发，flutter 完全是另辟蹊径</p><h5 id="2、flutter-的开发环境"><a href="#2、flutter-的开发环境" class="headerlink" title="2、flutter 的开发环境"></a>2、flutter 的开发环境</h5><p>支持命令行、vscode/AndroidStudio/IDE 开发环境，安装配置也非常简单，我们可以选择自己喜欢的 IDE 去配置和开发即可</p><h5 id="3、flutter-目前现状"><a href="#3、flutter-目前现状" class="headerlink" title="3、flutter 目前现状"></a>3、flutter 目前现状</h5><blockquote><p>(1)、没有大规模使用</p></blockquote><p>目前来说 flutter 没有大规模的使用，都是一些大公司在调研和使用国外有 Google 等，国内 BAT 等都在调研，特别是阿里在推进 flutter 的使用，都是使用 flutter 来开发某几个界面或是模块「基本上也是试试水这里面有客观也有主观的因素」，比如阿里将闲鱼的几个界面就拿 flutter 重构了「也是调研了试试水，据说还行」，这不难理解，一个新的东西起来是需要时间的</p><blockquote><p>（2）、社区和三方插件少</p></blockquote><p>由于 flutter 的社区没有像 RN 等那样庞大和活跃，所以一些解决方案和三方插件比较少，特定的功能可能要自己去写，遇到问题也要自己去填坑，相信这随着时间的推进也都会改善</p><h5 id="4、该不该使用-flutter"><a href="#4、该不该使用-flutter" class="headerlink" title="4、该不该使用 flutter"></a>4、该不该使用 flutter</h5><p>先学会了再说吧，只有学到了才知道该使用它还是不能使用，没有最好的框和最牛 B 的技术只有结合公司实际情况来选择最适合公司的框架和技术才是王道「这句话我说了不下十遍」</p><p>对新的技术敬畏和好奇没什么坏处，学了能给技术选型加一个方案并且在大前端的背景下掌握 flutter 也没什么坏处并且在 Google 这样体量的公司之下去推 flutter 相信 flutter 会越走越好，别废什么话了，直接干就对了</p><p>到此为止，Flutter 的环境搭建就完成了</p><hr><p>作者: <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容<br>本文出自 <a href="http://tigerchain.github.io" target="_blank" rel="noopener">TigerChain</a>  <a href="http://tigerchain.github.io/categories/从头整-Flutter/" target="_blank" rel="noopener">从头开始整 Flutter</a></p>]]></content>
      
      
      <categories>
          
          <category> 从头整 Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
