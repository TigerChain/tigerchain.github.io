<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>01、捣鼓源码-Retrofit2.x</title>
      <link href="/2020/08/24/retrofit/"/>
      <url>/2020/08/24/retrofit/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是-Retrofit"><a href="#一、什么是-Retrofit" class="headerlink" title="一、什么是 Retrofit"></a>一、什么是 Retrofit</h3><h4 id="1-1-为什么要有-Retrofit"><a href="#1-1-为什么要有-Retrofit" class="headerlink" title="1.1 为什么要有 Retrofit"></a>1.1 为什么要有 Retrofit</h4><p>Square 公司出了一个基于 HTTP 的网络请求框架 Okhttp，可以帮助我们快速处理 HTTP 的请求，但是这个框架存在一些问题，虽然已经很大程序上简化了开发者的使用，但是使用起来还不是非常的方便，如果想要很方便的使用必须要对其进行封装。</p><p>先来看一看 Okhttp 的使用方式</p><blockquote><p>Okhttp 的使用方式</p></blockquote><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">fetchApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、初始化 OkhttpClient</span>    <span class="token keyword">val</span> client<span class="token operator">:</span> OkHttpClient <span class="token operator">=</span> <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2、构建请求体</span>    <span class="token keyword">val</span> request<span class="token operator">:</span> Request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.wanandroid.com/banner/json"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3、创建 Call 对象</span>    <span class="token keyword">val</span> call<span class="token operator">:</span> Call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4、发起异步请求，运行在子线程</span>    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback <span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">?</span><span class="token punctuation">,</span> e<span class="token operator">:</span> IOException<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 运行在子线程</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">?</span><span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 运行在子线程</span>            <span class="token keyword">val</span> body <span class="token operator">=</span> response<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求成功：结果 \n <span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>以上就是基本使用 OkHttp 的方式，但是如果我们每个请求都这样去写，会有大量的重复代码，并且没有扩展性，我们说一下 OkHttp 的使用的问题</p><blockquote><p>OkHttp 的请求流程</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/android/source-imgs/okhttp_process.png" alt="OkHttp请求流程"></p><p>以上就是 OkHttp 的一个基本的流程</p><blockquote><p>Okhttp 存在的问题</p></blockquote><ul><li>网络请求接口配置相对复杂，如果我们要配置复杂请求的 body 等参数，每次都得整一个 Request 等[当然可以抽取一个方法出来]</li><li>我们看到 enqueue 异步请求以后返回的 Response 我们需要拿到 body 体然后解析成我们所需要的数据</li><li>线程切换问题，我们知道 enqueue 是异步请求在子线程，回调 onResponse 和 onFailure 都是运行在子线程，我们的结果一般都是在 UI 线程展示，所以这里还需要线程切换</li></ul><p>针对以上问题，同学们可能会说这个好办呀，我们把 OkHttp 封装一把加上泛型、handler 等方式不就可以解决以上问题吗，也就是分为三个部分：请求前、请求、请求后</p><ul><li>请求前：处理请求参数配置等</li><li>让 OkHttp 去请求</li><li>把拿到请求的结果进行线程切换和反序列化[数据到 JavaBean 的映射]</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/android/source-imgs/package_okhttp.png" alt="封装 OkHttp"></p><p>这些问题人家人家 Square 公司也想到了，所以就开发了一个 Retrofit，大体思路也是这三个部分去进行处理的</p><h4 id="1-2-什么是-Retrofit"><a href="#1-2-什么是-Retrofit" class="headerlink" title="1.2 什么是 Retrofit"></a>1.2 什么是 Retrofit</h4><p>什么是 RetorFit 呢？Retrofit 其实是一个 HTTP 的网络请求框架的封装，网络请求其实是由 OkHttp 完成的，而 Retrofit 仅负责网络请求接口的封装</p><p>App 应用程序通过 Retrofit 请求网络，实际上是使用 Retrofit 接口层封装请求参数、Header、Url 等信息，然后交给 OkHttp 完请求的操作，所以说 Retrofit 并不进行网络请求，真正的请求是 Okhttp 完成的</p><h3 id="二、Retrofit-的流程"><a href="#二、Retrofit-的流程" class="headerlink" title="二、Retrofit 的流程"></a>二、Retrofit 的流程</h3><p>俗话说无图无真相，先来一幅图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/android/source-imgs/retrofit_procress.png" alt="Retrofit请求流程"></p><p>Retrofit 内部使用了大量的设计模式来进行功能模块的解耦</p><h4 id="2-1-Retrofit-简单的使用"><a href="#2-1-Retrofit-简单的使用" class="headerlink" title="2.1 Retrofit 简单的使用"></a>2.1 Retrofit 简单的使用</h4><p>简单的过一下 Retorfit 的使用，举个例子</p><p>先声明一些数据对象和服务类</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// WanAndroidService.kt</span><span class="token keyword">interface</span> WanAndroidService <span class="token punctuation">{</span>    <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span><span class="token string">"banner/json"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getBanners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Call<span class="token operator">&lt;</span>ApiResponseData<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Banner<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ApiResponseData.kt</span><span class="token keyword">data</span> <span class="token keyword">class</span> ApiResponseData<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span>T<span class="token punctuation">,</span>    <span class="token keyword">val</span> errorCode<span class="token operator">:</span> Int<span class="token punctuation">,</span>    <span class="token keyword">val</span> errorMsg<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Banner.kt</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Banner</span><span class="token punctuation">(</span>    <span class="token keyword">val</span> desc<span class="token operator">:</span>String<span class="token punctuation">,</span>    <span class="token keyword">val</span> id<span class="token operator">:</span>Int<span class="token punctuation">,</span>    <span class="token keyword">val</span> imagePath<span class="token operator">:</span>String<span class="token punctuation">,</span>    <span class="token keyword">val</span> url<span class="token operator">:</span>String<span class="token punctuation">,</span>    <span class="token keyword">val</span> title<span class="token operator">:</span>String<span class="token punctuation">,</span>    <span class="token keyword">val</span> order<span class="token operator">:</span>Int<span class="token punctuation">,</span>    <span class="token keyword">val</span> type<span class="token operator">:</span>Int<span class="token punctuation">)</span></code></pre><p>使用 retrofit 四步法：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 第一步声明 retrofit</span><span class="token keyword">val</span> retrofit <span class="token operator">=</span> Retrofit<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://www.wanandroid.com/"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第二步取得请求服务，参数地址等</span><span class="token keyword">val</span> service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>WanAndroidService<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第三步 生成 Call</span><span class="token keyword">val</span> banners <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getBanners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第四步、异步执行请求</span>banners<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>ApiResponseData<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Banner<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>            call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>ApiResponseData<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Banner<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">,</span>            response<span class="token operator">:</span> Response<span class="token operator">&lt;</span>ApiResponseData<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Banner<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 成功的回调</span>            response<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>                <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> it<span class="token punctuation">.</span>data                <span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>ApiResponseData<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Banner<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">,</span> t<span class="token operator">:</span> Throwable<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 失败的回调</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="三、Retrofit-源码解析"><a href="#三、Retrofit-源码解析" class="headerlink" title="三、Retrofit 源码解析"></a>三、Retrofit 源码解析</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android 源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码解析 </tag>
            
            <tag> Android </tag>
            
            <tag> 三方框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半天搞定 Dart</title>
      <link href="/2020/06/05/dart-lesson/"/>
      <url>/2020/06/05/dart-lesson/</url>
      
        <content type="html"><![CDATA[<h2 id="一、初识-Dart"><a href="#一、初识-Dart" class="headerlink" title="一、初识 Dart"></a>一、初识 Dart</h2><h3 id="1-1-什么是-Dart"><a href="#1-1-什么是-Dart" class="headerlink" title="1.1 什么是 Dart"></a>1.1 什么是 Dart</h3><p>Dart 是 Google 于 2011 年发布的一门编程语言，其属性应用层的语言。Dart 是一门面向对象语言,集成了各家语言之所长，所以它的用法有时类似于 java ，有时类似于 js ，连 c++、swift 等语言的身影都有</p><h3 id="1-2-安装-Dart"><a href="#1-2-安装-Dart" class="headerlink" title="1.2 安装 Dart"></a>1.2 安装 Dart</h3><p>无论是 window/mac 还是 linux 安装 Dart 都有两种方式：命令行安装和下载 SDK 安装，具体可以查看官网</p><ul><li><p>官网地址：<a href="https://dart.dev/get-dart" target="_blank" rel="noopener">https://dart.dev/get-dart</a>，具体安装官网介绍非常详细</p></li><li><p>SDK 下载地址：<a href="https://dart.dev/tools/sdk/archive" target="_blank" rel="noopener">https://dart.dev/tools/sdk/archive</a></p></li></ul><p><strong>PS：</strong>如果安装了 Flutter 可以不用再单独下载 dart 安装了「Flutter 依赖 Dart」，完全可以把相应的 flutter 安装目录下的 Dart 配置到环境变量即可</p><p>环境变量配置好以后，在命令行中输入 dart 来验证环境是否配置好</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/dart.png" alt="查看dart配置成功与否"></p><h3 id="1-3-开发工具"><a href="#1-3-开发工具" class="headerlink" title="1.3 开发工具"></a>1.3 开发工具</h3><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/ide.png" alt="IDE和编辑器"></p><p>分别安装 Dart 插件即可，以 vscode 为例</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/vscode-dart.png" alt="vscode 安装 dart 插件"></p><p>我们使用 vscode 来编写 dart 代码</p><h2 id="二、永不过时的-HelloWorld"><a href="#二、永不过时的-HelloWorld" class="headerlink" title="二、永不过时的 HelloWorld"></a>二、永不过时的 HelloWorld</h2><h3 id="2-1-HelloWorld"><a href="#2-1-HelloWorld" class="headerlink" title="2.1 HelloWorld"></a>2.1 HelloWorld</h3><p>我们来编写永不过时的 HelloWorld，无论什么语言都要有程序的入口，比如 java </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 程序主入口</span><span class="token punctuation">}</span></code></pre><p>在 Dart 中也有程序入口,新建一个 hello.dart 文件,输入以下内容</p><pre class=" language-dart"><code class="language-dart"><span class="token function">main</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数体</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'HelloWorld'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 HelloWorld 语句以 ; 结尾 、</span>    <span class="token comment" spellcheck="true">//print("HelloWorld") ; // 其中字符串以 '' 或 " " 括起来都行</span><span class="token punctuation">}</span></code></pre><p>看起来和 java 非常相似 Dart 就去掉了一些无关的关键字而已</p><h3 id="2-2-运行程序"><a href="#2-2-运行程序" class="headerlink" title="2.2 运行程序"></a>2.2 运行程序</h3><p>运行 HelloWorld 程序有两种方法</p><ul><li>在命令行使用 <code>dart hello.dart</code>「要在程序在的目录下输出」</li></ul><ul><li>点击 debug 左边的 run 查看结果</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/hello-world.png" alt="运行查看结果"></p><h3 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h3><ul><li>Dart 有一个程序入口也就是 main 函数，并且此函数没有返回值，参数是一个 String 类型 list 集合，如果我们想传递参数给 args 直接使用 dart hello.dart 参数1,… 参数 n 即可</li><li>我们可以使用 print() 语句向控制台输出，类似于 js 的 console.log/java 的 System.out.println() 等</li><li>运行程序可以使用命令行 dart xxx.dart 也可以直接在 vscode 中使用调度的 run 按钮输出到调试控制台</li><li>每条语句结束以后以 ; 结束</li></ul><h2 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h2><h3 id="3-1-变量初始化"><a href="#3-1-变量初始化" class="headerlink" title="3.1 变量初始化"></a>3.1 变量初始化</h3><p>变量初始化基本格式：</p><pre class=" language-dart"><code class="language-dart">类型 名称 <span class="token operator">=</span> 值</code></pre><p>在 Dart 中有两种方式初始化变量：</p><ul><li>静态初始化：使用具体类型来初始化就是</li><li>动态初始化：使用 var 初始化，让系统自动推导出类型，其在运行时确定变量的类型</li></ul><p>静态初始化</p><pre class=" language-dart"><code class="language-dart">int age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">;</span>String name <span class="token operator">=</span> <span class="token string">'tigerchain'</span> <span class="token punctuation">;</span></code></pre><p>动态初始化举例「类型自动推导」</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">12</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动推导 int 类型</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'tigerchain'</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动推导字符串类型</span><span class="token keyword">var</span> love <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'读书'</span><span class="token punctuation">,</span><span class="token string">'看电影'</span><span class="token punctuation">,</span><span class="token string">'侃大山'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动推导为数组类型</span></code></pre><p><strong>ps：</strong> var 和具体类型不能一块使用，并且 var 赋值以后类型就确定了，不能修改，以下使用是错误的</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> int age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">;</span><span class="token keyword">var</span> String name <span class="token operator">=</span> <span class="token string">"tigerchain"</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token string">"tigerchain"</span> <span class="token comment" spellcheck="true">// 类型确定是 int 型，就不能修改成 String 类型</span></code></pre><blockquote><p>小结</p></blockquote><ul><li>var 可以接受任何变量的类型，在运行时确定变量类型</li><li>使用 var 声明的变量一旦赋值类型就确定了，不能再修改其类型</li></ul><h3 id="3-2-final-和-const"><a href="#3-2-final-和-const" class="headerlink" title="3.2 final 和 const"></a>3.2 final 和 const</h3><p>如果想让一个变量从来都不被修改，那么可以使用 final 和 const 来声明「const 是编译时就要确定值得，而 final 是运行时确定值」</p><p><strong>final</strong></p><p>在 java 中 final 是变量不能修改，方法不能重写，类不能被继承，而 Dart 中的 final 只能修饰变量，不能修饰方法和类</p><p>格式：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> 类型 变量名 <span class="token operator">=</span> 值  其中类型可以不写，会自动推导</code></pre><p>正确用法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string">'tigerchain'</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 final String name = 'tigerchain' ;</span><span class="token keyword">final</span> int age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">;</span></code></pre><p>来一个错误例子</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 定义一个 final 变量</span><span class="token keyword">final</span> name <span class="token punctuation">;</span></code></pre><p>运行报错</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/final-uninit.png" alt="final未初始化异常"></p><p>由此可知 final 修饰的变量必须要初始化，否则报错</p><p>错误使用如下：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> name <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 未初始化变量</span><span class="token keyword">final</span> <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// final 不能和 var 同时使用</span><span class="token keyword">final</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token number">24</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一旦赋值不能修改</span></code></pre><p><strong>const</strong></p><p>const 和 final 类似我们来看例子</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> name <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误必须初始化 </span><span class="token keyword">const</span> <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误 const 不能和 var 同时使用</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 const int age = 18 ;</span></code></pre><blockquote><p>final 和 const 相同点总结</p></blockquote><ul><li>final 和 const 声明的变量必须初始化「不初始化就相当于后面可以修改，和 final/const 设置违背」,并且初始化后不允许修改</li><li>final 和 const 声明变量时可以指定具体的类型，也可以省略具体类型 如：final int age = 18 ; int 可写可不写</li><li>final 和 const 不能和 var 同时使用</li></ul><p>再来看看 final 和 const 有什么不同点，示例如下：</p><pre class=" language-dart"><code class="language-dart">  <span class="token comment" spellcheck="true">// demo1</span>  <span class="token keyword">final</span> finalTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token keyword">const</span> constTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The constructor being called isn't a const constructor</span>  <span class="token function">print</span><span class="token punctuation">(</span>finalTime<span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>constTime<span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//demo2</span>  <span class="token keyword">final</span> finalList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  finalList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以修改 list 内部 </span>  <span class="token function">print</span><span class="token punctuation">(</span>finalList<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [3, 2, 3]</span>  <span class="token keyword">const</span> constList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  constList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>constList<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unsupported operation: Cannot modify an unmodifiable list 不能修改 list 内部</span>  <span class="token comment" spellcheck="true">// demo3</span>  <span class="token keyword">final</span> finalArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  <span class="token keyword">final</span> finalArray1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  <span class="token keyword">const</span> constArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  <span class="token keyword">const</span> constArray1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// identical 用来判断两个变量是否指向同一个对象</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>finalArray<span class="token punctuation">,</span> finalArray1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>constArray<span class="token punctuation">,</span> constArray1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span></code></pre><p><strong>示例代码分析</strong></p><p>先看看 final 和 const 的特点</p><p>(1)、运行时和编译时常量 </p><ul><li>final 是在运行时就要确定变量的值，也叫<code>运行时常量</code>，其在运行时第一次使用前才被初始化</li><li>const 在编译期间就在确定变量的值，也叫<code>编译时常量</code></li></ul><p>demo1 中 DateTime.now() 是一个函数肯定是程序运行起来才能获得，所以使用 final 没毛病，使用 const 就出错了「除非构造方法改为 const 势必要修改字段为 final」</p><p>demo2 中可以看到 final 的 list 可以修改内部值，但 const 就不行，由此可知</p><p>(2)、<code>final 的不可变性没有传递性，而 const 的不变可性有传递性</code></p><p>demo3 中可以看到使用 final 声明的两个值得相同的变量不指向同一个对象「结果为 false」,而使用 const 声明的两个值相同的变量指向的是同一个对象「在内存中只存储一份」,由此可行</p><p>(3)、<code>使用 final 修饰的值相等变量指向对象会重复创建，而 const 则引用同一个对象</code></p><p><strong>ps：</strong> 这里注意一点对于一些内置的字面量的数字、字符串、布尔等使用 final 修饰 identical 判断也为 true 如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string">"tigerchain"</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用 var 结果也 true</span><span class="token keyword">final</span> name1 <span class="token operator">=</span> <span class="token string">"tigerchain"</span> <span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span></code></pre><p>这一点官网有说明</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/compile-const.png" alt="编译时常量"></p><p>示例分析完毕，final 和 const 的不同点也总结出来了即上述的 (1)(2)(3)</p><h2 id="四、内置数据类型"><a href="#四、内置数据类型" class="headerlink" title="四、内置数据类型"></a>四、内置数据类型</h2><p>在 Dart 中所有的变量最终都是一个对象，比如 int double String 都是一个类，其声明的变量都是一个对象</p><h3 id="4-1-Number-类型"><a href="#4-1-Number-类型" class="headerlink" title="4.1 Number 类型"></a>4.1 Number 类型</h3><p>Number 分为两种类型：</p><ul><li>int </li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/int.png" alt="int 源码"></p><ul><li>double </li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/double.png" alt="double 源码"></p><h3 id="4-2-String-类型"><a href="#4-2-String-类型" class="headerlink" title="4.2 String 类型"></a>4.2 String 类型</h3><p>Dart 中的字符串是一组 UTF-16 单元序列。字符串可能通过单引号或双引号来创建</p><p>定义字符串</p><pre class=" language-dart"><code class="language-dart">String name <span class="token operator">=</span> <span class="token string">'tigerchain'</span> <span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"i like book"</span> <span class="token punctuation">;</span></code></pre><p>多行字符串使用三个点 ‘’’</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token string">'''  我是  中国  人'''</span> <span class="token punctuation">;</span></code></pre><p>字符串类型可以使用 ${} 来嵌入表达式来输出结果</p><pre><code>var str = "tigerchain" ;print("i am ${str}") ;// 如果是一个变量不是表达式则可以省略 {} 即 "$str" </code></pre><h3 id="4-3-Bolean-类型"><a href="#4-3-Bolean-类型" class="headerlink" title="4.3 Bolean 类型"></a>4.3 Bolean 类型</h3><p>在 Dart 中 Boolean 类型使用　bool 来表示，其值可以为 true 或 false ,bool 声明的变量是编译时常量</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 bool flag = true ;</span></code></pre><p><strong>ps：</strong> Dart 类型安全所以你不能使用 if (nonbooleanValue) 或者 assert (nonbooleanValue)，也就是说你不能<code>直接</code>使用非 0 或非空作判断，案例如下：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用错误</span>    xxx <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 正确使用</span>    xxx<span class="token punctuation">}</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用错误</span>    xxx <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 正确使用</span>    xxx<span class="token punctuation">}</span><span class="token keyword">var</span> address <span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用错误</span>    xxx<span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>address <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 正确使用</span>    xxx<span class="token punctuation">}</span></code></pre><p>也就是说 if(表达式) 表达式的结果要是 true/false </p><h3 id="4-4-Collections-类型"><a href="#4-4-Collections-类型" class="headerlink" title="4.4 Collections 类型"></a>4.4 Collections 类型</h3><p>对于集合类型来说 Dart 内置了三种最常见的类型 List、Set 和 Map</p><h4 id="4-4-1-List"><a href="#4-4-1-List" class="headerlink" title="4.4.1 List"></a>4.4.1 List</h4><p>在 Dart 中数组使用 List 表示，类似于 java 中的 ArrayList</p><p>List 的特点：<code>是有序可以重复</code>，集合元素可以重复</p><p>List 的创建有二类–四种方式：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 第一类：使用字面量方式</span><span class="token comment" spellcheck="true">// 1、使用字面量方式创建</span><span class="token keyword">var</span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token function">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2、明确指定类型</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第二类：使用构造方法创建</span><span class="token comment" spellcheck="true">// 1、自动推导</span><span class="token keyword">var</span> list3 <span class="token operator">=</span> List<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2、明确指定类型</span>List<span class="token operator">&lt;</span>int<span class="token operator">></span> list4 <span class="token operator">=</span> List<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>list4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><h4 id="4-4-2-Set"><a href="#4-4-2-Set" class="headerlink" title="4.4.2 Set"></a>4.4.2 Set</h4><p>Set 是<code>无序且不能重复</code>的集合,创建方式如下：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 字面量方式</span><span class="token keyword">var</span> books <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"西游记"</span><span class="token punctuation">,</span><span class="token string">"红楼梦"</span><span class="token punctuation">,</span><span class="token string">"三国演义"</span><span class="token punctuation">,</span><span class="token string">"水浒传"</span><span class="token punctuation">}</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个空 set，且只能装 String </span><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 Set&lt;String> names = {} ; 但是不能是 var nams = {} ;</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tigerchain"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 明确指定类型</span>Set<span class="token operator">&lt;</span>int<span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">;</span></code></pre><h4 id="4-4-3-Map"><a href="#4-4-3-Map" class="headerlink" title="4.4.3 Map"></a>4.4.3 Map</h4><p>Map 通常是用来存储键值对的 key-value,，key 和 value 可以是任意类型对象，但是 key 不能重复，value 可以重复</p><p>在 Dart 中声明 Map 也分为自动推导和明确类型两种定义方式：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 1、字面量声明 map 类型自动推导</span><span class="token keyword">var</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"tigerchain"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    <span class="token string">"sex"</span><span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2、明确类型 字面量 key 是 String value 可以是任意对象 </span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> myInfo<span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"tigerchain"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    <span class="token string">"sex"</span><span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">,</span>    <span class="token string">"address"</span><span class="token punctuation">:</span><span class="token string">"china"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>myInfo<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3、构造方法</span><span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有泛型就根据添加类型推导 key 和 value 类型</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"one"</span> <span class="token punctuation">;</span>info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"two"</span> <span class="token punctuation">;</span>info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"three"</span> <span class="token punctuation">;</span>info<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"tigerchain"</span> <span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4、构造方法明确类型</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> books <span class="token operator">=</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 var books = Map&lt;String,String>() ;</span>books<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"红楼梦"</span><span class="token punctuation">;</span>books<span class="token punctuation">[</span><span class="token string">"sale"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"18元"</span> <span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><blockquote><p>注意：我们来看看 Map 的源码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/map.png" alt="Map 源码"></p><p>Map 是一个抽象类，但是为什么我们可以实例化呢？难道 Dart 中的抽象类是可以实例化？，其实不是的。这里我们看一下注释第一句其实 Map() 的默认实现是 LinkedHashMap，这里扩展一下</p><p>在 Dart 中抽象类不可以被直接实例化的，但是配合工厂(factory) 就能间接的实例化了，举个例子</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 定义一个抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">factory</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">=</span> TigerChain <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现这个抽象类</span><span class="token keyword">class</span> <span class="token class-name">TigerChain</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 调用</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有问题可以实例化抽象方法</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>runtimeType<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 TigerChain 类型</span></code></pre><p>回过头来看 Map() 没有它的子类去实现呀「猜想肯定在某个地方实现了」，我们注意到 external 这个字段，external 就是方法的声明和实现分开，其只声明方法，而具体的实现由不同平台去实现 runtime ，我们在源码中找找</p><pre class=" language-bash"><code class="language-bash">flutter/bin/cache/dart-sdk/lib/_internal/vm/lib/map_patch.dart</code></pre><p>其中有句代码</p><pre class=" language-dart"><code class="language-dart"><span class="token metadata symbol">@patch</span><span class="token keyword">factory</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看到 Map 的实现类是 LinkedHashMap ,这是 Map 可以实例化的根本原因。 List 和 Set 也类似，只不过 Set 中默认有一个实现类 <code>factory Set() = LinkedHashSet&lt;E&gt;;</code> 没有 external 而已</p><h2 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h2><h3 id="5-1-函数的定义和基本使用"><a href="#5-1-函数的定义和基本使用" class="headerlink" title="5.1 函数的定义和基本使用"></a>5.1 函数的定义和基本使用</h3><p>前面我们知道在 Dart 中 内置的一些如 int double 等都是类，其实函数也是一种类型即 Function </p><p>函数也叫方法，在 Dart 中函数的基本格式如下</p><pre class=" language-dart"><code class="language-dart"><span class="token punctuation">[</span>返回值<span class="token punctuation">]</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>参数n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   函数体<span class="token punctuation">}</span></code></pre><p>函数可以分为四种类型：</p><ul><li>无参数无返回值</li></ul><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"this is fun1"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>无参数有返回值</li></ul><pre class=" language-dart"><code class="language-dart">double <span class="token function">getPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">3.141</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>有参数无返回值</li></ul><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">userInfo</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>int age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i am $name i'm $age years old"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>有参数有返回值</li></ul><pre class=" language-dart"><code class="language-dart">int <span class="token function">add</span><span class="token punctuation">(</span>int num1<span class="token punctuation">,</span>int num2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">+</span> num2 <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong> 在 Dart 中所有函数都有返回值，在 Dart 可以不写返回类型，也可以不写 return 语句默认返回 null，总结起来就是</p><ul><li>无返回类型，无 return 语句，默认返回 null </li><li>无返回类型，有 return 语句，返回 Object，自动推导其对应的类型</li></ul><pre class=" language-dart"><code class="language-dart">  <span class="token comment" spellcheck="true">// 无返回类型，默认返回 Object 这里自动推导成 int </span>  <span class="token function">defalutReturnObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 无返回类型，无 return 语句打印出来还返回一个 null「返回值」</span>  <span class="token function">defultReturnNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"tigerchain"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// tigerchain  null 后面的 null 就是返回值</span>  <span class="token punctuation">}</span></code></pre><h3 id="5-2-函数的参数"><a href="#5-2-函数的参数" class="headerlink" title="5.2 函数的参数"></a>5.2 函数的参数</h3><p>在 Dart 中函数的参数分为两类：</p><ul><li>必选参数</li><li>可选参数</li></ul><h4 id="5-2-1-必选参数"><a href="#5-2-1-必选参数" class="headerlink" title="5.2.1 必选参数"></a>5.2.1 必选参数</h4><p>必选参数即每个参数都是必须的不能省略「这没什么即说的」</p><h4 id="5-2-2-可选参数"><a href="#5-2-2-可选参数" class="headerlink" title="5.2.2 可选参数"></a>5.2.2 可选参数</h4><p>可选参数又分为位置可选参数和命名可选参数</p><p>基本格式如下：</p><pre class=" language-dart"><code class="language-dart">位置可选参数<span class="token operator">--</span><span class="token punctuation">[</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>参数n<span class="token punctuation">]</span>命名可选参数<span class="token operator">--</span><span class="token punctuation">{</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>参数n<span class="token punctuation">}</span></code></pre><p>位置可选参数顾名思义是要按参数的顺序去传递，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 位置可选参数使用 []，参数传递要按顺序去传递，并且参数可以有默认值</span> <span class="token keyword">void</span> <span class="token function">userInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token punctuation">[</span>int age<span class="token punctuation">,</span>String address<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"$name -- $age -- $address"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数调用</span><span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token string">'tigerchain'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// tigerchain -- null -- null</span><span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token string">'tigerchain'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//tigerchain -- 18 -- null</span><span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token string">'tigerchain'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"china"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//tigerchain -- 18 -- china</span><span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token string">'tigerchain'</span><span class="token punctuation">,</span><span class="token string">"china"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The argument type 'String' can't be assigned to the parameter type 'int' 没有按顺序传递参数报错</span></code></pre><p>命名可选参数可以不按顺序传传递参数，但是必须要指定参数名字，如下：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 命名可选参数使用 {} ，参数传递是无序的，并且参数可以有默认值</span><span class="token keyword">void</span> <span class="token function">userInfo2</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token punctuation">{</span>int age<span class="token punctuation">,</span>String address<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"$name -- $age -- $address"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数调用</span><span class="token function">userInfo2</span><span class="token punctuation">(</span><span class="token string">'zhang'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// zhang -- null -- null</span><span class="token function">userInfo2</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// wang -- 18 -- null</span><span class="token function">userInfo2</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span>address<span class="token punctuation">:</span> <span class="token string">'china'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// li -- 18 -- china</span></code></pre><p>在 Flutter 中我到处可见命名可选参数，基本每个 Widget 的构造函数都有使用，如 Flutter 的 Text 组件</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text.png" alt="Flutter Text 小部件"></p><h4 id="5-2-3-参数默认值"><a href="#5-2-3-参数默认值" class="headerlink" title="5.2.3 参数默认值"></a>5.2.3 参数默认值</h4><p>只有可选参数才可以设定默认值</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 可选参数才可设定默认值</span><span class="token keyword">void</span> <span class="token function">setDefaultParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>String name<span class="token operator">=</span><span class="token string">"tigerchain"</span><span class="token punctuation">,</span>int age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i am $name and $age"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// i am tigerchain and 18</span></code></pre><h3 id="5-3-函数是一等对象"><a href="#5-3-函数是一等对象" class="headerlink" title="5.3 函数是一等对象"></a>5.3 函数是一等对象</h3><p>我们知道在 Dart 中函数也是一种类型，即函数也是对象这和 js 有点类似，既然函数是一种类型那么函数就可以使用一个变量去接收，也可以将函数作为别一个函数的参数或者返回值</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 定义一个参数为函数的函数</span><span class="token keyword">void</span> <span class="token function">funMethod</span><span class="token punctuation">(</span>Function myFun<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 一个函数可以作为别一个函数的参数 </span><span class="token keyword">void</span> <span class="token function">calledFun0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'我是被调用的函数0'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用</span><span class="token comment" spellcheck="true">// 传递的时候传递参数的声明</span><span class="token function">funMethod</span><span class="token punctuation">(</span>calledFun0<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><p>下面看一个有返回值的函数</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 定义一个有返回值的函数</span>int <span class="token function">calledFun1</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span>int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我是被调用的方法"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span>b <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个函数「其中一个参数也是函数」</span>int <span class="token function">funMethod1</span><span class="token punctuation">(</span>Function myFun<span class="token punctuation">,</span>int a<span class="token punctuation">,</span>int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">myFun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用</span>int result <span class="token operator">=</span> <span class="token function">funMethod1</span><span class="token punctuation">(</span>calledFun1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><h4 id="5-4-匿名函数"><a href="#5-4-匿名函数" class="headerlink" title="5.4 匿名函数"></a>5.4 匿名函数</h4><p>匿名函数如其名是没有名字的函数也叫 lambda 或 closure，其格式如下</p><pre class=" language-dart"><code class="language-dart"><span class="token punctuation">(</span><span class="token punctuation">[</span>类型<span class="token punctuation">]</span> 参数<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>参数n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  xxx <span class="token comment" spellcheck="true">// 函数体</span><span class="token punctuation">}</span></code></pre><p>看一个简单例子</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 定义一个函数</span><span class="token keyword">void</span> <span class="token function">funMethod</span><span class="token punctuation">(</span>Function myFun<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用</span><span class="token function">funMethod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'我是匿名函数'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我是匿名函数</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匿名函数赋给一个变量</span><span class="token keyword">var</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"匿名函数给一个变量"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用</span><span class="token function">funMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匿名函数给一个变量</span></code></pre><p>带参数的匿名函数</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 定义一个参数是函数的函数</span>int <span class="token function">funMethod1</span><span class="token punctuation">(</span>Function myFun<span class="token punctuation">,</span>int a<span class="token punctuation">,</span>int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">myFun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span><span class="token comment" spellcheck="true">// 带参数匿名函数 其中 int 可以省略</span><span class="token function">funMethod1</span><span class="token punctuation">(</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span>int b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从头整 Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06、js 延迟加载-defer、async 属性</title>
      <link href="/2020/05/26/js-lazy-load/"/>
      <url>/2020/05/26/js-lazy-load/</url>
      
        <content type="html"><![CDATA[<blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>只要对 js 基础掌握不牢的都适合</li><li>2、教程难度<br>初级「但是你不一定知道」，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、先有-DOM-才能操「扯」作「蛋」"><a href="#一、先有-DOM-才能操「扯」作「蛋」" class="headerlink" title="一、先有 DOM 才能操「扯」作「蛋」"></a>一、先有 DOM 才能操「扯」作「蛋」</h3><p>JavaScript 要操作 DOM 前提是 DOM 要生成，上节说过 docuemnt 的 DOMContentLoaded、window.onload 页面生命周期方法都可以让 JavaScript 来进行操作 DOM，当然我们也可以尽可能的让 DOM 解析完然后再执行 JavaScript 代码，这就到了这节的重点–defer 和 async 属性</p><h3 id="二、为什么要有-defer、async"><a href="#二、为什么要有-defer、async" class="headerlink" title="二、为什么要有 defer、async"></a>二、为什么要有 defer、async</h3><p>JavaScript 外链式必须要有 src 属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"outer.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>如果没有 defer/async 属性，浏览器就会立即下载 outer.js 脚本，并且浏览器暂停解析，直到脚本下载完成并执行完成，浏览器继续解析，在这个过程中如果 outer.js 脚本非常大那下载过程会很慢，此时浏览器解析暂停着，给用户的感觉就是网页界面卡住了「体验很不好」</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/loading_wait.jpg" alt="加载中"></p><p>此时 async/defer 就有用武之地了</p><h3 id="三、defer、async-的执行情况"><a href="#三、defer、async-的执行情况" class="headerlink" title="三、defer、async 的执行情况"></a>三、defer、async 的执行情况</h3><p>先看看浏览器遇到 script 标签三种情况「外链式」</p><h4 id="1、普通-script"><a href="#1、普通-script" class="headerlink" title="1、普通 script"></a>1、普通 script</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"outer.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/normal-script.png" alt="普通 js"></p><p>如图所示：普通的 script 加载外部 js 浏览器执行情况</p><ul><li>1、浏览器进行页面解析「html 解析–生成 DOM 树」</li><li>2、当遇到 script 标签立即暂停解析，去下载 outer.js 脚本</li><li>3、脚本下载完毕，执行 outer.js </li><li>4、outer.js 执行完毕，浏览器继续解析 html </li></ul><p>整个过程是一个串行的过程，前一个干完再干后一件事情，页面在暂停的时刻就是耗时之处</p><h4 id="2、有-async-属性"><a href="#2、有-async-属性" class="headerlink" title="2、有 async 属性"></a>2、有 async 属性</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"outer.js"</span> <span class="token keyword">async</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>从普通 script 标签我们了解到了页面解析和下载 js 是互拆的，那能不下载 js 的时候页面不暂停解析，当然可以，这就是 async 的作用「异步指的就是页面解析和下载 js 是异步的」，如图所示</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/async-script.png" alt="async 延迟加载"></p><p>浏览器执行情况如下：</p><ul><li>1、浏览器进行页面解析「html 解析–生成 DOM 树」</li><li>2、当遇到 script 标签一看有 async 属性则下载 outer.js 脚本，此时解析 html 继续执行不中断</li><li>3、直到 outer.js 脚本下载完成，执行 outer.js 的时候浏览器暂停解析 html</li><li>4、直到 outer.js 执行完毕，浏览器继续解析 html </li></ul><h4 id="3、有-defer-属性"><a href="#3、有-defer-属性" class="headerlink" title="3、有 defer 属性"></a>3、有 defer 属性</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"outer.js"</span> defer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>从字面可以看出来 defer 是延迟加载的意思，其与 async 又不同，defer 是延迟 js 的执行「在界面解析完毕之后再执行 js 」并且界面解析和下载 js 同时进行，如下图所示：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/defer-script.png" alt="defer 延迟加载"></p><p>浏览器的执行情况如下：</p><ul><li>1、浏览器进行页面解析「html 解析–生成 DOM 树」</li><li>2、当遇到 script 标签一看有 defer 属性则下载 outer.js 脚本，此时解析 html 继续执行不中断</li><li>3、直到 outer.js 脚本下载完成此时不会立即执行 outer.js 而是继续解析 html </li><li>4、等 html 解析完毕，再执行 outer.js</li></ul><h3 id="四、Demo-验证"><a href="#四、Demo-验证" class="headerlink" title="四、Demo 验证"></a>四、Demo 验证</h3><h4 id="1、async-和普通-js-加载情况"><a href="#1、async-和普通-js-加载情况" class="headerlink" title="1、async 和普通 js 加载情况"></a>1、async 和普通 js 加载情况</h4><blockquote><p>(1)、创建以下几个文件</p></blockquote><p>分别新建 index.html 文件，normal.js outer.js outer1.js 文件</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/defer-async-codefolder.png" alt="文件目录"></p><blockquote><p>(2)、各文件内容</p></blockquote><ul><li>index.html 内容</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>js 延迟加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用 async 属性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用 async 属性  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer1.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>emel1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>emel2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>emel3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>emel4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>normal.js 中直接输出 console.log(‘nromal’); </li><li>outer.js 引入了 vue.js 的源码大概 10948 行代码「内容非常大，下载则耗时」</li><li>outer1.js 直接输出 console.log(‘outer1.js’);</li></ul><blockquote><p>(3)、查看结果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/async-normal.png" alt="查看结果"></p><p>多次运行得出结论 outer.js 内容输出总在 outer1.js 之后，为什么这样呢？由于 outer.js 的内容大下载耗时并且此处属性是 async 所以下载完后直接执行其中的 js 内容所以它相对来说后执行，async 就是谁先下载完谁先执行「乱序执行」</p><h4 id="2、defer-和普通-js-加载情况"><a href="#2、defer-和普通-js-加载情况" class="headerlink" title="2、defer 和普通 js 加载情况"></a>2、defer 和普通 js 加载情况</h4><p>将上述 async 属性改为 defer 属性</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 使用 defer 属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用 defer 属性  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer1.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>我们来看看效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/defer-normal.png" alt="查看结果"></p><p>js 外链有 defer 属性的会按顺序执行 js 的内容「下载 js 是异步的相对于浏览器解析」并且其执行机制基本上是在所有元素解析完成「顺序执行的」 DOMContentLoaded 事件触发之前执行的</p><h4 id="3、async-遇到-DOMContentLoaded"><a href="#3、async-遇到-DOMContentLoaded" class="headerlink" title="3、async 遇到 DOMContentLoaded"></a>3、async 遇到 DOMContentLoaded</h4><blockquote><p>1、修改 index.html</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer1.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>将 outer.js 改为 defer</p><blockquote><p>2、分别在 outer.js「在 vue 源码之后添加」 和 outer1.js 添加如下代码</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// outer.js</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'outer.js-->li 的数量 '</span><span class="token operator">+</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>下面是 outer1.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// outer1.js</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'outer1.js-->li 的数量 '</span><span class="token operator">+</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>查看结果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/async-domcontentloaded.png" alt="查看结果"></p><p>我们可以看到使用 async 和 defer 属性 DOMContentLoaded 都执行了，但是事实是如此吗？不是的，我们再修改 outer.js 为 async 查看结果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/all-async-domcontentloaded.gif" alt="查看结果"></p><p>我们多刷新几次浏览器看到 outer.js 中有 DOMContentLoaded 的事件会出现没有调用的情况，为什么呢？那就是如果使用 async 属性时 DOMContentLoaded 事件有时会在 js 代码执行前调用，有时会在 js 执行后调用「此时会响应 DOMContentLoaded 事件」</p><p>很好理解，由于 async 属性是下载完 js 直接执行 js 中的代码，那么有两种情况「DOMContentLoaded 简称 DCL」：</p><ul><li>1、浏览器还没有解析完 html，async 的 js 脚本下载完立即执行「此时 html 停止解析」，脚本执行完以后，浏览器继续解析完基本的 DOM 然后 DOMContentLoaded 事件响应「输出 DOMContentLoaded 中的代码」</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/async-front-dcl.png" alt="DCL 在 js 脚本执行后"></p><ul><li>2、浏览器解析完毕调用 DOMContentLoaded 事件「提前调用了」，此时 js 还没有下载完，「没有输出 DOMContentLoaded 中的代码」，js 都没有运行，想执行 DOMContentLoaded 事件肯定是执行不了的</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/async-end-dcl.png" alt="DCL 在 js 脚本执行前"></p><p>所以建议使用 async 属性时不要使用 DOMContentLoaded 事件</p><h4 id="4、defer-遇到-DOMContentLoaded"><a href="#4、defer-遇到-DOMContentLoaded" class="headerlink" title="4、defer 遇到 DOMContentLoaded"></a>4、defer 遇到 DOMContentLoaded</h4><blockquote><p>1、修改 index.htlm 中 outer.js 和 outer1.js 的属性为 defer </p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer1.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>2、查看结果 </p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/all-defer-domcontentloaded.png" alt="defer 遇到 DCL"></p><p>则可以看到 DOMContentLoaded 中的代码执行了，由此可知 DOMContentLoaded 是在 html 解析完成 defer 脚本执行完后才执行的，其也分为两种情况</p><ul><li>1、defer 下载完成，浏览器才解析完 html「生成基本 DOM」，然后执行 defer 脚本，再触发 DOMContentLoaded</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/html-end-defer-load.png" alt="html 在 defer 加载完成之前解析完毕"></p><ul><li>2、浏览器解析完 html「生成基本 DOM」，defer 未载完直到下载完，并且执行完，再触发 DOMContentLoaded</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/html-front-defer-load.png" alt="html 在 defer 未加载完成之前解析完毕"></p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><ul><li>1、async 属性：下载 js 脚本不阻塞 html 解析，并且下载完 js 立即执行 js 脚本「并且多个 async 属性的 script 是乱序执行的」</li><li>2、defer 属性：下载 js 脚本不阻塞 html 解析，但执行 js 脚本是在 html 解析完毕之后「基本 DOM 生成」，并且多个 defer 属性的 script 是顺序执行的</li><li>3、js 脚本的<strong>执行</strong>和 html 解析永远都是互斥的</li><li>4、async 遇到 DOMContentLoaded，DOMContentLoaded 事件有可能在 async 脚本执行之前触发，也有可能在 async 脚本执行之后触发</li><li>5、defer 遇到 DOMContentLoaded，DOMContentLoaded 事件是在 defer 脚本执行完毕后触发</li></ul><p>本节到此为止，我们下节见</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 5分钟编程-JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05、js 使用方式「外链式」</title>
      <link href="/2020/05/12/js-use-src/"/>
      <url>/2020/05/12/js-use-src/</url>
      
        <content type="html"><![CDATA[<blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>只要对 js 基础掌握不牢的都适合</li><li>2、教程难度<br>初级「但是你不一定知道」，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、加载外部-js-文件"><a href="#一、加载外部-js-文件" class="headerlink" title="一、加载外部 .js 文件"></a>一、加载外部 .js 文件</h3><p>对于内联式 script 标签使用 JavaScript，少许代码还可以，如果在大量的代码那整个 html 界面会非常的臃肿，并且不利于维护，所以我们可以采用把 JavaScript 代码抽取到一个 .js 文件中，然后在 HTML 页面合适的位置使用外部链接的方式的引入 js 即可「.js 文件中不需要再写 script 标签直接写代码即可」</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在 head 中可以放 script 外链，一般建议放在 <code>&lt;/body&gt;</code> 标签之前，至于为什么，后面再说</p><h3 id="二、来个-demo-感受一下"><a href="#二、来个-demo-感受一下" class="headerlink" title="二、来个 demo　感受一下"></a>二、来个 demo　感受一下</h3><h4 id="1、-需求"><a href="#1、-需求" class="headerlink" title="1、 需求"></a>1、 需求</h4><p>求一个有序列表所有列表项数量「即 li 标签数量」</p><h4 id="2、编写-html"><a href="#2、编写-html" class="headerlink" title="2、编写 html"></a>2、编写 html</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引入外部 js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>elem1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>elem2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>elem3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>elem4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>####　3、编写 outer.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 取得所有 li 标签 是一个数组</span><span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span></code></pre><p>运行查看效果「切换到 chorome 的 console 中」</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/get-li-num.png" alt="取得 li 的数量"></p><p>看到取出 li 的个数是 0 不应该呀，难道我们的方法有误「可以明确的告诉 js 方法正确」，那为什么呢？这和 js 执行顺序有关</p><h4 id="4、执行顺序"><a href="#4、执行顺序" class="headerlink" title="4、执行顺序"></a>4、执行顺序</h4><p>JavaScript 是用来操作 DOM 的「前提是你必须要有 DOM」,如果 DOM 还没有生成那操作个毛，而我们把引入外部 .js 文件放在了 head 中，浏览器解析也是从上到下，并且遇到 script 标签会停止解析，执行 script 中的方法「此时ol li 等元素还没有被解析，当然操作不了」，执行完毕后再解析其余的元素</p><p>这下我们就知道了了，JavaScript 想要操作 DOM 就得让浏览器把 HTML 页面 DOM 解析完，这里有几种方法可供使用</p><ul><li><p>直接把引入外部 .js 放在 <code>&lt;/body&gt;</code> 之前「最简单暴力」</p></li><li><p>使用监听器监听 DOM 内容已经加载「DOMContentLoaded」，不需要等待图片、视频、音频等其它资源加载完成。</p></li></ul><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样就是在 DOM 内容加载并解析完以后再调用方法</p><ul><li><p>使用 window.onload() 方法</p><p>  此方法也是页面所有的资源加载完成后才调用，此方法肯定是在 DOMContentLoaded 方法后执行的</p></li><li><p>使用 JavaScript 的 defer 属性</p></li></ul><ul><li>使用 JavaScript 的 async 属性</li></ul><h4 id="5、先使用上述前三种方法改造程序"><a href="#5、先使用上述前三种方法改造程序" class="headerlink" title="5、先使用上述前三种方法改造程序"></a>5、先使用上述前三种方法改造程序</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 取得所有 li 标签 是一个数组 需要把 script 引入此 js 放在 &lt;/body>前</span><span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 方法二、等待 DOM 加载并解析完以后调用 </span><span class="token comment" spellcheck="true">// document.addEventListener("DOMContentLoaded", function() {</span><span class="token comment" spellcheck="true">//     var lis = document.getElementsByTagName('li') ;</span><span class="token comment" spellcheck="true">//     console.log(lis.length)</span><span class="token comment" spellcheck="true">// });</span><span class="token comment" spellcheck="true">// 方法三、等待所有资源加载完成后调用 </span><span class="token comment" spellcheck="true">// window.onload = function() {</span><span class="token comment" spellcheck="true">//     var lis = document.getElementsByTagName('li') ;</span><span class="token comment" spellcheck="true">//     console.log(lis.length)</span><span class="token comment" spellcheck="true">// }</span></code></pre><p>分别调用以上三种方法，结果都会打出 4 </p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/get-li-right.png" alt="正确打印 li 数量"></p><p>那么这三咱方方法调用顺序如何，他们有什么区别呢，我们来看看，添加 DOMContentLoaded 和 load 日志</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 取得所有 li 标签 是一个数组 需要把 script 引入此 js 放在 &lt;/body>前</span><span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行查看结果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/domload-load-script.png" alt="查看结果"></p><p>非常清楚看到第一行先调用，下来是 DOMContentLoaded 最后是 load 方法，有人说我的顺序这样放肯定这样调用，是吗？个顺序吧</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>很不幸你猜错了，运行结果一毛一样</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/domload-load-script.png" alt="查看结果"></p><p>这有点像页面渲染的生命周期，到哪个时候调用哪个方法，其实也很好理解，首先打出的 4 是 DOM 还没有完全解析完成时调用，而 DOMContentLoaded 是当 html 的 DOM 已经加载「除音频、视频、和 css 等资源」完成调用，完后是 load 「所有资源加载完成以后调用」</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>本节我们介绍了使用 src 加载 js 并且简单的介绍了一下 js 的执行顺序，并且说了 DOMContentLoaded 和 load 方法的区别还介绍了尽量把 script 标签「带有 src」放在 <code>&lt;/body&gt;</code> 标签之前为了让 DOM 生成以后 js 再来操作</p><p>本节就到这里，我们下节见</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 5分钟编程-JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04、js 使用方式「内联式」</title>
      <link href="/2020/05/09/js-use-inline/"/>
      <url>/2020/05/09/js-use-inline/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/JavaScript-inline.png" alt="本节看内联式"></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>只要对 js 基础掌握不牢的都适合</li><li>2、教程难度<br>初级「但是你不一定知道」，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=327865756&amp;bvid=BV1kA411b7Mi&amp;cid=190246052&amp;page=5" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、HTML-中使用-JavaScript"><a href="#一、HTML-中使用-JavaScript" class="headerlink" title="一、HTML 中使用 JavaScript"></a>一、HTML 中使用 JavaScript</h3><h4 id="1、使用-script-标签"><a href="#1、使用-script-标签" class="headerlink" title="1、使用 script 标签"></a>1、使用 script 标签</h4><p>在 HTML 中使用 JavaScript 最简单的方式就是使用 script 标签把 JavaScript 的方法和属性包裹起来，如下</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>使用 script 元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这里是 html 的内容--></span>    <span class="token comment" spellcheck="true">&lt;!-- 以下使用 script 元素 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 其中是属性和或方法</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/console-log-a.png" alt="执行结果"></p><h4 id="2、JavaScript-的执行顺序"><a href="#2、JavaScript-的执行顺序" class="headerlink" title="2、JavaScript 的执行顺序"></a>2、JavaScript 的执行顺序</h4><p>包含在 <code>&lt;script&gt;</code> 标签中的代码是从上到下依次执行，并且在 script 标签中的代码执行过程中，浏览器会停止渲染和显示，直到 script 需标签中的代码执行完毕，再执行标签下面的内容</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/js-run-order.jpg" alt="JavaScript 执行顺序"></p><h3 id="二、script-标签解析"><a href="#二、script-标签解析" class="headerlink" title="二、script 标签解析"></a>二、script 标签解析</h3><p>在 html 页面中使用 <code>&lt;script&gt;...&lt;/script&gt;</code> 是最简单的使用 JavaScript 的方法，script 标签也有几个属性我们来了解一下</p><pre class=" language-html"><code class="language-html">&lt;script        charset="UTF-8"        src="xxx.js"        language = "JavaScript"        type = "text/javascript"        defer="defer"        async = "async"><span class="token script language-javascript">    xxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>从上述代码可以看到 script 有 6 个属性，我们来看看</p><ul><li>charset：<strong>可选</strong>，用来指定 src 「外部连接 js 的字符集」</li><li>src：<strong>可选</strong>，用来加载外部 js </li><li>language：废弃了，原指用来写脚本的语言如：JavaScript、VBScript，已经废弃不使用了</li><li>type：<strong>可选</strong>，写脚本使用语言内容类型「MIME类型」，可以看作是 language 的替代品，默认就是 text/javascript 所以可以不用写</li><li>defer：<strong>可选</strong>，延迟脚本只适用于外部链接也就是 src 有值时，指的是脚本的执行会在整个整个页面都解析完成以后，相当于给浏览器一个指令-脚本立刻下载，但是延迟执行，并且是顺序执行</li><li>async：<strong>可选</strong>，异步执行同样只适用于外部链接也就是 src 有值时，也指的是脚本的执行会在整个整个页面都解析完成以后，但是执行顺序是无序的「异步的」</li></ul><p>所以我们一般写一个 script 标签的时候一般如下写法就可以</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    xxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>如果是外部引入 js 则添加 src 属性即可</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>本节对 JavaScript 的使用方式简单的介绍了一下「主要说了一下内联式」，并且简单的介绍了一下 js 的执行顺序和 script 属性</p><p>本节到此为止，我们下节见</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 5分钟编程-JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03、web 前端开发工具</title>
      <link href="/2020/05/06/js-dev-tools/"/>
      <url>/2020/05/06/js-dev-tools/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=327865756&amp;bvid=BV1kA411b7Mi&amp;cid=190246027&amp;page=4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、前端开发工具"><a href="#一、前端开发工具" class="headerlink" title="一、前端开发工具"></a>一、前端开发工具</h3><p>工欲善其事，必先利其器，在开发前端项目的时候使用工具可以让我们事半功倍</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/develop-tools.png" alt="常用的前端开发工具"></p><h4 id="记事本类开发工具"><a href="#记事本类开发工具" class="headerlink" title="记事本类开发工具"></a>记事本类开发工具</h4><ul><li>SubLime：运行快速、界面整洁、插件丰富</li><li>EditPlus：记事本扩展工具，代码高亮</li><li>Vim：内置插件、也可以安装插件，极客玩的是无鼠标化操作效率极高</li><li>Atom：github 开源，类似于 sublime 打开比较慢</li></ul><h4 id="IDE-类开发具「针对大型项目」"><a href="#IDE-类开发具「针对大型项目」" class="headerlink" title="IDE 类开发具「针对大型项目」"></a>IDE 类开发具「针对大型项目」</h4><ul><li>WebStorm：JetBrans 开发的一款老牌的前端 IDE 开发工具</li><li>Hbuilder：国内 Dcloud 公司开发一款高效的开发工具，使用快捷键能快速生成代码片断，异常高效</li><li>VsCode：微软开发的，后来者居上，内置丰富的插件，并且安装三方插件非常方便，打开非常迅速</li><li>其它的一些开发工具</li></ul><h3 id="二、工具的选择「个人」"><a href="#二、工具的选择「个人」" class="headerlink" title="二、工具的选择「个人」"></a>二、工具的选择「个人」</h3><p>对于开发工具而言，没有最好，只有最合适，这完全看个人习惯，以上工具我都使用过，个人现在习惯于使用 sublime 和 vscode </p><p>选择一个自己熟悉并且熟练的工具极大的提高我们的开发效率，至此前端开发工具我们就介绍完了，我们下节再见</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 5分钟编程-JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02、js 组成部分</title>
      <link href="/2020/04/27/js-part/"/>
      <url>/2020/04/27/js-part/</url>
      
        <content type="html"><![CDATA[<blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>只要对 js 基础掌握不牢的都适合</li><li>2、教程难度<br>初级「但是你不一定知道」，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=327865756&amp;bvid=BV1kA411b7Mi&amp;cid=189871531&amp;page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><p>人们常常会把 JavaScript 和 ECMAScript 混在一起，JavaScript 的含义却比 ECMA-262 中规定的要多的多，JavaScript 由三部分组成</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/js-form-part.jpg" alt="JS组成部分"></p><ul><li>ECMAScript</li><li>DOM「文档对象模型」</li><li>BOM「浏览器对象模型」</li></ul><h3 id="一、ECMAScript"><a href="#一、ECMAScript" class="headerlink" title="一、ECMAScript"></a>一、ECMAScript</h3><p>ECMAScript 是一个标准就是对实现该标准各个方面做了一些规定，比如规定语法、类型、对象、操作符、关建字等等，JavaScript 实现了 ECMAScript 标准</p><p>没有统一的标准各自玩各自的 “js”，不利于 js 的发展，标准的重要性就体现出来了</p><h3 id="二、DOM「文档对象模型」"><a href="#二、DOM「文档对象模型」" class="headerlink" title="二、DOM「文档对象模型」"></a>二、DOM「文档对象模型」</h3><p>DOM「Document Object Model」是对 XML 扩展用于 HTML 的应用程序的接口，DOM 把整个 HTML 页面映射为一个多层节点结构「也称为<br>树型结构」，它也是一个标准</p><p>我们来个简单的例子形象的说一下，写一个 HTML 页面并对应其 DOM 的表现形式</p><blockquote><p>html 页面</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>上面是一个标准的 html 页面，我们来看 DOM 如何来表示这个页面</p><blockquote><p>DMO 结构 </p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/dom-html.png" alt="DOM 映射 HTML"></p><p>这样 DOM 形象的把一个 html 结构映射成了一个树结构，每个子元素通过结点的形式表现</p><p><strong>DOM 表现的好处</strong></p><p>通过 DOM 表现出 html 以后，我们就可以借助 DOM 给我们暴漏出来的 API 可以动态的增、删、改、查 html 的任何元素「间接的操作 DOM 就如同操作 html 一样」</p><h3 id="三、BOM「浏览器对象模型」"><a href="#三、BOM「浏览器对象模型」" class="headerlink" title="三、BOM「浏览器对象模型」"></a>三、BOM「浏览器对象模型」</h3><p>BOM「Browser Object Model」浏览器对象模型，就是可以操作浏览器容器的对象模型，BOM 只处理和浏览器容器相关的东西即-window，但是人们通常也把针对浏览器的 JavaScript 扩展看作是 BOM 的一部分，BOM 中最核心的也就是 window，比如下列扩展</p><ul><li>frames：即HTML自框架</li><li>history：页面的历史记录</li><li>location：当前页面的地址</li><li>navigator：包含浏览器相关信息</li><li>screen：显示屏幕相关信息</li><li>open：打开一个新的窗口</li><li>…</li></ul><p>还有移动缩放关闭浏览器对 cookies 支持等等</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>本节主要说了一下 JavaScript 的组成部分，包括 ECMAScript、DOM 和 BOM，我们对其有了简单的了解 DOM/BOM 本质上都是给 js 暴漏的接口，我们可以操作元素和浏览器，而 ECMAscript 是一个标准，JavaScript 实现了此标准</p><p>本节到此为止，我们下节课见</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 5分钟编程-JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01、js 简介</title>
      <link href="/2020/04/25/js-intro/"/>
      <url>/2020/04/25/js-intro/</url>
      
        <content type="html"><![CDATA[<blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>只要对 js 基础掌握不牢的都适合</li><li>2、教程难度<br>初级「但是你不一定知道」，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=327865756&amp;bvid=BV1kA411b7Mi&amp;cid=181463115&amp;page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、JavaScript-简史"><a href="#一、JavaScript-简史" class="headerlink" title="一、JavaScript 简史"></a>一、JavaScript 简史</h3><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/js-history.svg" alt="js简史"></p><h4 id="1、基石"><a href="#1、基石" class="headerlink" title="1、基石"></a>1、基石</h4><p>1992 年左右，Nombas 公司开发了一个叫 C–(C-minus-minus 即 Cmm)的嵌入式脚本语言，后改名为 ScriptEase，它可以嵌入到网页中去，这为以后 JavaScript 的诞生提供了一块基石</p><h4 id="2、JavaScript-的诞生"><a href="#2、JavaScript-的诞生" class="headerlink" title="2、JavaScript 的诞生"></a>2、JavaScript 的诞生</h4><p>JavaScript 诞生于 1995 年「由 NetScape 和 Sun 公司联盟推出」，它起初的目的就为了验证表单的输入，在没有 JavaScript 之前表单的验证工作都要放在服务器端「以当今来说可能觉得没有什么问题」，在拨号上网的年代几十k的速度，一个表单验证在服务端验证都会转好长时间的圈圈，这简直是恶梦，所以 Netscape 通过 JavaScript 来解决这个问题「这在当时对开发界来说绝对称得上震撼」</p><p>随着 JavaScript 的越来越成熟 JavaScript 从简单的验证变成一门非常强大的语言，特别是在 Node js 兴起之后 JavaScript 从前端玩到了后台，JavaScript 发展更为迅猛，当然这是后话了</p><h4 id="3、微软进军浏览器"><a href="#3、微软进军浏览器" class="headerlink" title="3、微软进军浏览器"></a>3、微软进军浏览器</h4><p>在 JavaScript 1.0 获得具大成功以后，微软也进军浏览器，发布 IE3 并且克隆一个 JavaScript 称为 JScript「为了避免与 Netscape 许可纠纷」并且也提供了自己的 VBScript</p><p>至此有三种不同的 JavaScript 的版本即：JavaScript、ScriptEase 和 JScript，随着时间推移这这三种 JavaScript 版本由于没有统一标准显现出越来越多的问题「各自玩各自的肯定不行」，所以 JavaScript 标准制定势在必行</p><h4 id="4、ECMA-标准"><a href="#4、ECMA-标准" class="headerlink" title="4、ECMA 标准"></a>4、ECMA 标准</h4><p>1997 年，JavaScript 作为一个草案提交给欧洲计算机制造商协会(ECMA),ECMA 协会指定 39 号技术委员会(TC39-Technical Committee #39) 负责 “标准化一种通用、跨平台、中立于供应商的脚本语言的语法和主义”，TC39 由来自 Netscape、Sun、微软、Borland 及其它对脚本语言感兴趣公司的程序员组成，经过数月完成了 ECMA-262「一种名字 ECMAScript 新的脚本语言标准」</p><h4 id="5、激进的-Netscape"><a href="#5、激进的-Netscape" class="headerlink" title="5、激进的 Netscape"></a>5、激进的 Netscape</h4><p>JavaScript 虽然是由 Netscape 开发的并首先提交给 ECMA,但由于当时 Netscape 决定重新设计 NetScape 代码导致推出基于 ECMA 标准实现的 JavaScript 晚于微软发布的”完全基于 ECMA 标准”的 JavaScript「变成了 JScript 成为 JavaScript 的事实标准」， 这也是导致 Netscape 没落的直接原因</p><h4 id="6、ECMA-标准发展"><a href="#6、ECMA-标准发展" class="headerlink" title="6、ECMA 标准发展"></a>6、ECMA 标准发展</h4><p>第二年 ISO/IEC「国际标准化组织/国际电工委员会」也采用了 ECMAScript 标准，至此以后，浏览器开发商就致力于将 ECMAScript 作为各自 JavaScript 实现的标准，在一定程序上取得的成功</p><h4 id="7、火狐和-Google-的出现"><a href="#7、火狐和-Google-的出现" class="headerlink" title="7、火狐和 Google 的出现"></a>7、火狐和 Google 的出现</h4><p>IE 随着 Windows 系统的捆绑几乎占据了全部市场份额，1998 年 Netscape 没落，但瘦死的骆驼比马大同年开发了火狐浏览器「Firefox」 在支持 JavaScript 无可比性，逐渐餐食 IE 市场成为第二大浏览器</p><p>随后 Google 也推出了 Chrome 浏览器以极简，快速浏览成为第三大浏览器「当然现在是老大了，IE 浏览器极速下滑」</p><p>当然苹果也有自己的 Safari 浏览器就是自家产品自带的，随着苹果产品的大卖 Safair 也深入人心</p><h4 id="8、国内一些浏览器"><a href="#8、国内一些浏览器" class="headerlink" title="8、国内一些浏览器"></a>8、国内一些浏览器</h4><p>后面国内也有一些浏览器现，比如 UC、360、搜狗、qq浏览器等等，基本上是基于 Chorme 等内核开发的</p><h3 id="二、什么是-JavaScript"><a href="#二、什么是-JavaScript" class="headerlink" title="二、什么是 JavaScript"></a>二、什么是 JavaScript</h3><p>JavaScript 是一种具有面向对象能力的”动态”脚本语言，所谓动态就是指在运行时做数据类型的检查，它是基于事件驱动的，不需要依赖特殊的语言环境，在浏览器中就可以运行。JavaScript 和 Java 没有半毛钱关系，只是 JavaScript 为了跟着炙手可热的 Java 的顺风车才改的名字「以前叫 LiveScript」</p><h3 id="三、JavaScript-的用途"><a href="#三、JavaScript-的用途" class="headerlink" title="三、JavaScript 的用途"></a>三、JavaScript 的用途</h3><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/js-used.svg" alt="js 用途"></p><h3 id="四、JavaScript-特点"><a href="#四、JavaScript-特点" class="headerlink" title="四、JavaScript 特点"></a>四、JavaScript 特点</h3><ul><li>继承：基于原型的当然 ES6 中直接可以像使用 Java 一样使用 JavaScript</li><li>封装：模块化的小技巧</li><li>多态：由于 JavsScript 是动态语言，所以多态是天生的</li></ul><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>本节我们主要说了以下三个部分</p><ul><li>JavaScript 的简史</li><li>什么是 JavaScript </li><li>JavaScript 的用途以及特点</li></ul><p>相信大家对 JavaScript 有一个认知。本节我们就到这里，我们下节课再见</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 5分钟编程-JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00、课程大纲</title>
      <link href="/2020/04/18/js-course-des/"/>
      <url>/2020/04/18/js-course-des/</url>
      
        <content type="html"><![CDATA[<blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>只要对 js 基础掌握不牢的都适合</li><li>2、教程难度<br>初级「但是你不一定知道」，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=327865756&amp;bvid=BV1kA411b7Mi&amp;cid=180304627&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、本系列课程大纲"><a href="#一、本系列课程大纲" class="headerlink" title="一、本系列课程大纲"></a>一、本系列课程大纲</h3><h4 id="1、课程来源"><a href="#1、课程来源" class="headerlink" title="1、课程来源"></a>1、课程来源</h4><p>首先我们要知道本系列教程的来源，大概有这么两个主要的原因</p><ul><li>1、和一些前端开发人员聊天「其中不乏多年开发经验的」，对 js 的基础掌握的其实并不好，知其然，不知其所以然</li><li>2、看了 kotlin、swift、还有后来的 flutter、dart 等，发现这些语言语法都是类 js 语法，搞定了 js 这些语言都不是事，并且搞定了 js 什么 vue、react node 等照样拿下</li></ul><h4 id="2、课程受众和学习方式"><a href="#2、课程受众和学习方式" class="headerlink" title="2、课程受众和学习方式"></a>2、课程受众和学习方式</h4><p>直接看图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/js-study-method.png" alt="受众和学习方式"></p><h4 id="3、课程讲解内容"><a href="#3、课程讲解内容" class="headerlink" title="3、课程讲解内容"></a>3、课程讲解内容</h4><p>少啰嗦，看图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/js-content.png" alt="讲解内容"></p><h4 id="4、课程讲解方式"><a href="#4、课程讲解方式" class="headerlink" title="4、课程讲解方式"></a>4、课程讲解方式</h4><p>本系列课程的讲解方式主要是视频+笔记的形式，由于本人也在工作，所以都是业余时间录视频+写笔记，所以可能是笔记先行视频可能会滞后「希望大家谅解」</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/js/imgs/js-explanation-mode.png" alt="讲解方式"></p><p>这里回归一下主题 5 分钟编程指的是每节视频的时长在 5 分钟左右 </p><h3 id="二、教程共享"><a href="#二、教程共享" class="headerlink" title="二、教程共享"></a>二、教程共享</h3><p>本系列教程会共享到我的博客和 github 上面，并且视频会发布在 B 站上，朋友们可以选择性的看视频「B 站」或笔记「电子书」或是视频+笔记「博客」</p><ul><li>博客：<a href="http://tigerchain.github.io/">http://tigerchain.github.io/</a></li><li>B站：<a href="https://space.bilibili.com/44242327/" target="_blank" rel="noopener">https://space.bilibili.com/44242327/</a></li><li>电子书：<a href="https://github.com/TigerChain/jsblog.git" target="_blank" rel="noopener">https://github.com/TigerChain/jsblog.git</a></li></ul><p>如果以上资源没有出来大家可以稍等一下「比如电子书」我准备好了会第一时间共享</p><p>本节就到这里，我们正式 js 之旅</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 5分钟编程-JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想象力可能正在毁掉你</title>
      <link href="/2019/10/22/execution/"/>
      <url>/2019/10/22/execution/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/chat/imgs/xxl.png" alt="想像力？"></p><p>本文作为自己的警钟文章，时刻提醒自己–Do it now is perfect，故作为记录</p><h3 id="想象力比知识更重要"><a href="#想象力比知识更重要" class="headerlink" title="想象力比知识更重要"></a>想象力比知识更重要</h3><p>“外星人”爱因斯坦说过–想象力比知识更重要，的确对于爱因斯坦来说确实是这样的，爱因斯坦的相像力简直大的都没边了，人有一个大脑就是用来思考的，如果只是机械的运作那和机器人有什么区别？</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/chat/imgs/ayst.png" alt="爱因斯坦"></p><p>人类能有现在如此大的进度的确和想象力是分不开的，卫星上天，航天旅游不是梦这些都是在前人的想象加上切实可行的技术实现的。大思想家，文学家胡适先生说过”大胆假设，小心求证”，也是让我们脑洞大开，发散思维</p><p>如果一个苹果落在牛顿的头上，牛顿没有脑洞大开去想象苹果为什么会向上落，而不向上，估计万有引力会推迟若干年才被发现「牛顿定律就易名了」</p><p>乍一看，想象力真特么重要，一个人没有思考，没有想象力就成了 “Walking Dead” ，人为什么会有想象力，一定是通过不段学习和知识的积累才有的一种特殊能力，所以爱因斯坦说”想象力比知识更重要”指的是我们不能死学知识，而应该学以致用，一个有想象力的人本身就具有你没有接触或是没有关心的知识「如果你本身没有什么知识的话，想个毛？只会做梦吧」</p><h3 id="没有执行的想象力都是耍流氓"><a href="#没有执行的想象力都是耍流氓" class="headerlink" title="没有执行的想象力都是耍流氓"></a>没有执行的想象力都是耍流氓</h3><p>爱因期坦、牛顿提倡想象力很重要，并且非常的重要，这无可厚非，这些伟人不仅想了，最重要的是做了，以想象力驱动实战做出惊人的贡献，把想象力发挥到了极致</p><p>现实中，好多排骨鸡汤类文章都在提倡想象力「并且从孩子抓起」，让人们有天马行空的想象力，极力锻炼人们的想象力，熟不知想象力的目的是要知行合一「也就是理论+实践」，否则空有想象力和赵括纸上谈兵有什么区别，让人们永远停留在想上「甚至是空想，假想」</p><p>我个人发现好多企业中的员工没事就喜欢做个 PPT 然后交付给老板，老板看了以后惊叹不已–xxx 真是一个有想法的人，然后再没过几天再弄一个 PPT ，老板喜欢的不得不得了的，周而复始，屡试不爽。其结果是事情永远停留在 PPT 上，一年下来没有实际的效果，最后把工作变成了和老板的一种博弈「刷存在感」，没事就在老板跟前”表现表现”，在老板跟前表现这本身没有什么不好「但是最起码要出结果」</p><p>又或者是每个人在定年计划的时候，那说的天花乱坠，年终总结的时候一件也没有落实，有什么意义，没有半毛钱的意义，没有执行的想象力都是<br>耍流氓，空想一百年，真特么不值一分钱</p><h3 id="没有计划的执行是正走在耍流氓的路上"><a href="#没有计划的执行是正走在耍流氓的路上" class="headerlink" title="没有计划的执行是正走在耍流氓的路上"></a>没有计划的执行是正走在耍流氓的路上</h3><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/chat/imgs/mang.png" alt="忙？"></p><p>有没有这种感觉，就是一天到晚都感觉到很忙，搞的自己晕头转向，累的人不说还让人感觉很空虚，最后一想，今天这一天够忙的了，可是没有什么收获，就这样一天，一个月，一年就过去了</p><p>忙和没时间成了万能词，在什么场景和场合好像都能使用，进而就变成了人们的口头禅，忙是一种现象，本身没有什么问题，但是把它当成是一种万能的武器这就有问题了</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/chat/imgs/plan.png" alt="计划"></p><p>有人会说，你看我一天多么忙，加班到凌晨 2 点「还不忘发个朋友圈」，把加班当成炫耀的资本「天天如此，那你真的是太忙了」,为什么会这么忙呢—是因为没有计划的忙，刷个什么抖音一会儿两个小时就没有了，刷个微信又半个小时没有了，再看头条又一个小时没有了，然后是就说各种忙，我很忙说的多了就会麻痹自己「我一天真的很忙的–反面就是说我很充实没有浪费一点时间，真的是这样吗？」</p><p>忙应该是有计划的忙，有结果的忙，有效率的忙，没有计划的忙就是瞎忙，乱忙，对一天的工作我们一定要分出轻、重、缓、急，并且制定计划，只要我们精准的按计划去行事那么我的忙的就是有意义的「最怕的就是把不重要的事情当成忙的资本」，对于的自己时间一定要进行管控，如果说没有执行的想像都是耍流氓，那么没有计划的执行「忙」就是走在耍流氓的中路上</p><h3 id="想像力-目标-计划-行动-超出预料"><a href="#想像力-目标-计划-行动-超出预料" class="headerlink" title="想像力+目标+计划+行动=超出预料"></a>想像力+目标+计划+行动=超出预料</h3><p>想像力是建立在执行的基础上的，没有执行的想像是没有任何意义的，而想要执行的达到或超预期一定要有一个清晰的计划，每一步都按照计划执行，对时间进行管控制，那么结果往往不是坏的，对于目标来说建议定的比想要达到的稍微高一点即可，为什么要高一点，这里拿高考来说，定目标，定高则居中「定一本，可以有考个二本」，定中则居下「定二本，则考个三本」，定下则考不上「定三本，则可能考不上」，如果我们定的目标比预期稍微高一点则意味着我们要付出更多的努力和代价「结果往往是不一样的，但是不乏有人目标非常明确，执行非常到位，定的目标和结果一致，所以对于大数人来说建议把目标定的比预期稍微高一点即可，目标一定要切合自己的实际」</p><p>当我们想像力+目标+计划+行动都做了好以后，剩下的就交给时间吧「坚持往往是最难的，只要你能持之以恒的坚持下来你就能干掉 80% 的人」，看到过一句话：大概意义是–不是我优秀，而是这个世界上不优秀的人太多了，我稍微努力一点你们就觉得我优秀了和大家共勉</p><p>仅以此人文时刻警醒自己</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容<br>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/侃大山/">侃大山</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 侃大山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 侃大山 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11、点击事件三种实现方式</title>
      <link href="/2019/09/30/bui-wanandroid-click-impl/"/>
      <url>/2019/09/30/bui-wanandroid-click-impl/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=115373346&amp;page=12" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、本节简介"><a href="#一、本节简介" class="headerlink" title="一、本节简介"></a>一、本节简介</h3><p>上节我们把知识体系列表获取下来了，这节我们来看看知识体系点击条目进入详情功能，点击效果大概可以以下三种方式实现</p><ul><li>html 中添加 onclick 方法</li><li>使用 bui 数据驱动的　b-click</li><li>使用 bui 的事件委托</li></ul><p>跳转的话就是 bui 的路由机制就可以了，我们逐一来看看</p><h3 id="二、点击事件"><a href="#二、点击事件" class="headerlink" title="二、点击事件"></a>二、点击事件</h3><h4 id="1、html-标签中添加-onclick-方法"><a href="#1、html-标签中添加-onclick-方法" class="headerlink" title="1、html 标签中添加 onclick 方法"></a>1、html 标签中添加 onclick 方法</h4><p>直接在 knowledte.js 的知识体系列表中的模版字符串中「二级分类标签整个条目」添加一个 onclick 方法并把当前的索引传递过去，在路由中要使用</p><pre class=" language-html"><code class="language-html">  &lt;li onclick="showDetail(${index})"style="display: flex;justify-content: space-between;align-items: center;padding:10px;">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           ${el.children.map((child,childIndex)=>               `${childIndex &lt; 6? `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#eee</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>${child.name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>`:""}`       ).join('')}       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-listright<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>`</code></pre><p>而后在 builist 的组件外定义一个 showDetail 方法，方便测试我简单的打一个 log,输出当前条目的索引</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">showDetail</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>运行起来点击条目看效果，在 chrome 的 console 中查看</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/methods_isnot_define.png" alt="方法未定义"></p><p>很不幸报错了，说方法未定义，我们明明定义了一个 showDetail 方法，为何提示未定义「WTF」?为什么呢？其实这就涉及到 js 作用域的问题「此处是方法的作用域」</p><p>简单来说就是 onclick 只能调用自身代码块中的方法或是全局方法，这块涉及到方法声明和方法表达式之间的关系，具体可以<a href="https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/" target="_blank" rel="noopener">查看这里</a>，这么说还有点抽象那直接上个代码来说明一下问题</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>        <span class="token keyword">var</span> test2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test2()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>这样直接调用 test2 是调用不了的，因为　test2 是公共方法 test 内部的，只有 test 能调用，别的调用不了会提示方法未定义，我们的情况和这个类似，如何解决呢？</p><p>我们直接写在 <script></script>标签中，或是直接把 showDetail 挂到 window 对象上把它变成全局方法即可</p><p><code>方式一：在 script 标签中写方法</code></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">showDetail</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>li onclick<span class="token operator">=</span><span class="token string">"showDetail(${index})"</span>style<span class="token operator">=</span><span class="token string">"display: flex;justify-content: space-between;align-items: center;padding:10px;"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul style<span class="token operator">=</span><span class="token string">"display:flex;flex-wrap: wrap;"</span><span class="token operator">></span>           $<span class="token punctuation">{</span>el<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span>childIndex<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>               <span class="token template-string"><span class="token string">`${childIndex &lt; 6? `</span></span><span class="token operator">&lt;</span>li style<span class="token operator">=</span><span class="token string">"padding:5px"</span><span class="token operator">></span>               <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"padding:5px;border:1px solid red;background:#eee;"</span><span class="token operator">></span>                   <span class="token operator">&lt;</span>span<span class="token operator">></span>$<span class="token punctuation">{</span>child<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>               <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token template-string"><span class="token string">`:""}`</span></span>       <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"icon-listright"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>`</code></pre><p><code>方式二：定义全局方法</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 把 showDetail 变成全局方法</span>window<span class="token punctuation">.</span>showDetail <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这样就解决了方法未定义的问题，其实上面两种方法最终都是把方法挂到 window 上面形成全局方法了</p><p>这种做好不太好，为啥呢？动不动把一个方法搞成全局的失去灵活性，下面我们来看看 bui 事件驱动中如何做</p><h4 id="2、bui-事件驱动点击事件"><a href="#2、bui-事件驱动点击事件" class="headerlink" title="2、bui 事件驱动点击事件"></a>2、bui 事件驱动点击事件</h4><p>完过 vue 的朋友玩 bui 的事件驱动那就是菜两者 api 几乎一样，我们直接来使，使用 bui-store 来快速创建事件驱动的代码片断</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 初始化数据行为存储</span><span class="token keyword">var</span> bs <span class="token operator">=</span> bui<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    scope<span class="token punctuation">:</span> <span class="token string">"page"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 声明数据</span>        datas<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        showDetail<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这里处理跳转逻辑</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    templates<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    mounted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据解析后执行</span>        <span class="token comment" spellcheck="true">// 列表控件 js 初始化: </span>        <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token punctuation">;</span>        <span class="token keyword">var</span> uiList <span class="token operator">=</span> bui<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token string">"#knowledge-list"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> baseUrl <span class="token operator">+</span> <span class="token string">"/tree/json"</span><span class="token punctuation">,</span>            pageSize<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//如果分页的字段名不一样,通过field重新定义</span>            field<span class="token punctuation">:</span> <span class="token punctuation">{</span>                page<span class="token punctuation">:</span> <span class="token string">"page"</span><span class="token punctuation">,</span>                size<span class="token punctuation">:</span> <span class="token string">"pageSize"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token string">"data"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            callback<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                that<span class="token punctuation">.</span>datas <span class="token operator">=</span> data<span class="token punctuation">;</span>                <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// console.log(el.name)</span>                    html <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`            &lt;li class="bui-btn-title">                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/li>            &lt;li b-click="page.showDetail(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)"  style="display: flex;justify-content: space-between;align-items: center;padding:10px;">                &lt;ul style="display:flex;flex-wrap: wrap;">                       ${el.children.map((child,childIndex)=>                           `</span></span>$<span class="token punctuation">{</span>childIndex <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token operator">?</span> <span class="token template-string"><span class="token string">`&lt;li style="padding:5px">                           &lt;div style="padding:5px;border:1px solid red;background:#eee;">                               &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>child<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>                           &lt;/div>                       &lt;/li>`</span></span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token template-string"><span class="token string">`                   ).join('')}                   &lt;/ul>                &lt;i class="icon-listright">                &lt;/i>            &lt;/li>`</span></span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> html<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            autoScroll<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 滚动到底部不自动加载</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>核心就是把数据定义出来「由于我们返回的是一个数组，扬所以定义为 datas:[]」，然后使用 b-click 来调用 methods 中创建的方法完成条目单击事件，运行起来看效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/b-click-method.png" alt="使用 b-click 完成点击事件"></p><p>我们看到 log 是打印出来了，可是点击一下方法都调用了两桨，事件冒泡了，我们直接在 methods 方法中修改即可</p><pre class=" language-javascript"><code class="language-javascript"> methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    showDetail<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 阻止事件冒泡</span>        <span class="token comment" spellcheck="true">// e.stopPropagation();</span>        <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>使用 e.stopPropagation() 或是 return false 都可以解决这个问题</p><p>这下我们就正确的处理了列表条目点击事件</p><h4 id="3、使用事件委托解决点击事件"><a href="#3、使用事件委托解决点击事件" class="headerlink" title="3、使用事件委托解决点击事件"></a>3、使用事件委托解决点击事件</h4><p>试想一下如果渲染列表有 100 项会声明 100 个 onclick ，1w 项那简直是噩梦，会严重影响性能，所以我们使用事件委托机制来解决这个问题</p><p>事件委托机制内部采用的是事件冒泡机制，来看代码</p><p>先给我们的标签 li 给一个 id <code>knowledge-li</code> ，然后我们这个 li 其实是对应 knowledge 的 class 为 bui-list 的 ul 下，我们就可以把事件委托给 ul </p><pre class=" language-javascript"><code class="language-javascript"> router<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"#knowledge-li"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 阻止事件冒泡  </span>    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// return false ; 阻止后续事件和阻止事件冒泡效果相同</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   </code></pre><p>这就搞定了代码单独编写也没有问题，这里 bui-store 外面 ，就这么简单。来看一下效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/event-proxy-reslut.png" alt="事件委托 log"></p><p>我们看到打出来的 log 是一组奇数，为什么呢？因为我们的 ul 下面还有一个标题呢，所以们点击标签条目的时候就会从 1 3 5 … 开始，这不行，我们拿到 data 才取索引值会有问题了，我们处理一下,将索引值 <code>var index = $(this).index();</code> 换成下面的方法即可</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>这样我就就正确打出来了索引值，就可以取出条目中的数据然后传递到下一页去了</p><p>本节到此为止，这节我们就把在 bui 中点击事件方式大概说了一下，下节我们完成知识体系条目点击进二级导航</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10、完成知识体系列表</title>
      <link href="/2019/09/27/bui-wanandroid-knowledge-list/"/>
      <url>/2019/09/27/bui-wanandroid-knowledge-list/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=115200630&amp;page=11" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、课程简介"><a href="#一、课程简介" class="headerlink" title="一、课程简介"></a>一、课程简介</h3><p>这节我们实现的效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/knowledge_list_result.gif" alt="本节实现的目标"></p><h3 id="二、实现效果"><a href="#二、实现效果" class="headerlink" title="二、实现效果"></a>二、实现效果</h3><h4 id="1、找出知识体系的-api"><a href="#1、找出知识体系的-api" class="headerlink" title="1、找出知识体系的 api"></a>1、找出知识体系的 api</h4><p>我们在 wanandroid 网站上找到知识体系数据的 api</p><pre class=" language-javascript"><code class="language-javascript">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>wanandroid<span class="token punctuation">.</span>com<span class="token operator">/</span>tree<span class="token operator">/</span>json</code></pre><p>此接口就是一个固定的接口，返回一个是一个 json 数组，我们直接可以使用 bui-list 组件来完成，来看看返回的 json 格式</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"courseId"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Android Studio相关"</span><span class="token punctuation">,</span>                <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token property">"parentChapterId"</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>                <span class="token property">"userControlSetTop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"visible"</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"courseId"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">169</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"gradle"</span><span class="token punctuation">,</span>                <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>                <span class="token property">"parentChapterId"</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>                <span class="token property">"userControlSetTop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"visible"</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"courseId"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"开发环境"</span><span class="token punctuation">,</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"parentChapterId"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"userControlSetTop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"visible"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"courseId"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">168</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Drawable"</span><span class="token punctuation">,</span>                <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>                <span class="token property">"parentChapterId"</span><span class="token operator">:</span> <span class="token number">167</span><span class="token punctuation">,</span>                <span class="token property">"userControlSetTop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"visible"</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"courseId"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">172</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"deep link"</span><span class="token punctuation">,</span>                <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">5001</span><span class="token punctuation">,</span>                <span class="token property">"parentChapterId"</span><span class="token operator">:</span> <span class="token number">167</span><span class="token punctuation">,</span>                <span class="token property">"userControlSetTop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"visible"</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"courseId"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">198</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"基础概念"</span><span class="token punctuation">,</span>                <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">5002</span><span class="token punctuation">,</span>                <span class="token property">"parentChapterId"</span><span class="token operator">:</span> <span class="token number">167</span><span class="token punctuation">,</span>                <span class="token property">"userControlSetTop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"visible"</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"courseId"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">167</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"基础知识"</span><span class="token punctuation">,</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token property">"parentChapterId"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"userControlSetTop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"visible"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"errorCode"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"errorMsg"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">}</span></code></pre><p>可以看到返回的数据分为两层也就是一级标题下面套着二级标题 list 中嵌套 list </p><h4 id="2、使用-bui-list-快速创建模版"><a href="#2、使用-bui-list-快速创建模版" class="headerlink" title="2、使用 bui-list 快速创建模版"></a>2、使用 bui-list 快速创建模版</h4><p>在 knowledte.js 中使用 bui-list-demo 快速创建我们的列表模版，把对应的 html 放到 knowledte.html 中的 main 标签中，并且将 class=”bui-scroll” 标称对应的 id 修改为 knowledge-list，以下是 html </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>knowledge-list<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-foot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>对应的 js 我们把 url 地址改为知识体系地址即可</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> uiList <span class="token operator">=</span> bui<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"#uiList"</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> baseUrl <span class="token operator">+</span> <span class="token string">"/tree/json"</span><span class="token punctuation">,</span>    pageSize<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//如果分页的字段名不一样,通过field重新定义</span>    field<span class="token punctuation">:</span> <span class="token punctuation">{</span>        page<span class="token punctuation">:</span> <span class="token string">"page"</span><span class="token punctuation">,</span>        size<span class="token punctuation">:</span> <span class="token string">"pageSize"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token string">"data"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    callback<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            html <span class="token operator">+</span><span class="token operator">=</span><span class="token template-string"><span class="token string">`&lt;li class="bui-btn bui-box">                &lt;div class="bui-thumbnail">&lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="">&lt;/div>                &lt;div class="span1">                    &lt;h3 class="item-title"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3>                    &lt;p class="item-text"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p>                    &lt;p class="item-text"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">公里&lt;/p>                &lt;/div>                &lt;span class="price">&lt;i>￥&lt;/i></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>            &lt;/li>`</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>经过以上两步就可以把数据拿下来，接下我们要做的就是修改 template 模版来渲染拿回来的数据</p><h4 id="3、修改-template-模版适配数据"><a href="#3、修改-template-模版适配数据" class="headerlink" title="3、修改 template 模版适配数据"></a>3、修改 template 模版适配数据</h4><p>同样我们使用 es6 的模版字符串来动态显示数据，直接看结果</p><pre class=" language-javascript"><code class="language-javascript">template<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(el.name)</span>        html <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`        &lt;li class="bui-btn-title">            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">        &lt;/li>        &lt;li  style="display: flex;justify-content: space-between;align-items: center;padding:10px;">            &lt;ul style="display:flex;flex-wrap: wrap;">                   ${el.children.map((child,childIndex)=>                       `</span></span>$<span class="token punctuation">{</span>childIndex <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token operator">?</span> <span class="token template-string"><span class="token string">`&lt;li style="padding:5px">                       &lt;div style="padding:5px;border:1px solid red;background:#eee;">                           &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>child<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>                       &lt;/div>                   &lt;/li>`</span></span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token template-string"><span class="token string">`               ).join('')}               &lt;/ul>            &lt;i class="icon-listright">            &lt;/i>        &lt;/li>`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> html<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>核心就是遍历一级标签和二级标签然后使用分组显示的方式来呈现</p><p>这样基本上就完成我们的效果了，还差一点就是 bui-list 默认是有上拉加载更多的，我们这里不需要</p><h4 id="3、去掉上拉加载更多"><a href="#3、去掉上拉加载更多" class="headerlink" title="3、去掉上拉加载更多"></a>3、去掉上拉加载更多</h4><p>给 bui-list 添加一个属性</p><pre class=" language-javascript"><code class="language-javascript">autoScroll<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 滚动到底部不自动加载</span></code></pre><p>就不会自动加载了，但是还有上拉加载更多的字样，我们直接在 knowledte.html 中把 scorll 的 footer 去掉即可</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>knowledge-list<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 去掉以下代码不显示上拉加载更多布局 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;div class="bui-scroll-foot">&lt;/div> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这样就完成了和开头的效果图一样的效果了</p><p>这节也就到这里了，下节我们了解一下 bui.store「事件驱动」 并且使用事件驱动来改造一下我们的知识体系界面</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09、完成首页列表</title>
      <link href="/2019/09/23/bui-wanandroid-home-list/"/>
      <url>/2019/09/23/bui-wanandroid-home-list/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=115026534&amp;page=10" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、课程简介"><a href="#一、课程简介" class="headerlink" title="一、课程简介"></a>一、课程简介</h3><p>本节要实现的效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/homelist_result.gif" alt="要实现的效果"></p><h3 id="二、api-根地抽取"><a href="#二、api-根地抽取" class="headerlink" title="二、api 根地抽取"></a>二、api 根地抽取</h3><p>在完成本节效果之前，我们先把 api 的根地址抽取出来到时候替换方便</p><p>打开 index.js 在最开头添加以下代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> baseUrl <span class="token operator">=</span> <span class="token string">"/api"</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// let baseUrl = "https://wanandroid.com" ;</span></code></pre><p>添加代理地址和真实地址，名字都叫 baseUrl 到时候替换只是放开下面的注释把 api 注释掉即可，对应的 home.js 中请求 banner 的地址修改如下</p><pre class=" language-javascript"><code class="language-javascript"> bui<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> baseUrl<span class="token operator">+</span><span class="token string">"/banner/json"</span><span class="token punctuation">,</span>    <span class="token operator">...</span> 省略若干代码    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token operator">...</span> 省略若干代码    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 失败 </span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="三、完成首页列表"><a href="#三、完成首页列表" class="headerlink" title="三、完成首页列表"></a>三、完成首页列表</h3><h4 id="1、查看列表-api"><a href="#1、查看列表-api" class="headerlink" title="1、查看列表 api"></a>1、查看列表 api</h4><p>从 wanandroid 网站看到首页文章列表 api 如下</p><pre class=" language-javascript"><code class="language-javascript">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>wanandroid<span class="token punctuation">.</span>com<span class="token operator">/</span>article<span class="token operator">/</span>list<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span>json</code></pre><p>其中动态改变的 0 所代码的当前页码「从 0 开始」</p><h4 id="2、列表组件选择"><a href="#2、列表组件选择" class="headerlink" title="2、列表组件选择"></a>2、列表组件选择</h4><blockquote><p>bui 中列表分类</p></blockquote><p>在 bui 中列表有以下几类</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/bui_list_category.png" alt="bui 中的列表"></p><p>统一来说就分为横向列表和竖向列表，具体来说常用的就三类</p><ul><li>bui-list</li><li>bui-scroll</li><li>bui-listview</li></ul><p>bui-list 固定了一些格式并且实现下拉刷新上拉加载，是基于 bui-scroll 组件的，如果实在满足不了那么直接自定义 bui-scroll 组件即可</p><blockquote><p>如何选择</p></blockquote><p>这就看看 bui-list 为我们创建的模块代码，在 home.js 中使用 <code>bui-list-demo</code> 为我们快速创建，这里只看 js </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> uiList <span class="token operator">=</span> bui<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token string">"#uiList"</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">"http://rap2api.taobao.org/app/mock/84605/example/getNews"</span><span class="token punctuation">,</span>        pageSize<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//如果分页的字段名不一样,通过field重新定义</span>        field<span class="token punctuation">:</span> <span class="token punctuation">{</span>            page<span class="token punctuation">:</span> <span class="token string">"page"</span><span class="token punctuation">,</span>            size<span class="token punctuation">:</span> <span class="token string">"pageSize"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token string">"data"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        callback<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                html <span class="token operator">+</span><span class="token operator">=</span><span class="token template-string"><span class="token string">`&lt;li class="bui-btn bui-box">                    &lt;div class="bui-thumbnail">&lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="">&lt;/div>                    &lt;div class="span1">                        &lt;h3 class="item-title"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3>                        &lt;p class="item-text"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p>                        &lt;p class="item-text"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">公里&lt;/p>                    &lt;/div>                    &lt;span class="price">&lt;i>￥&lt;/i></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>                &lt;/li>`</span></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看到请求地址是固定的，在后面带参数使用 ? 拼参数也可以也可以在 data 中写入请求参数，而我们的 wanandroid 首页列表给出的 api 是</p><pre class=" language-javascript"><code class="language-javascript">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>wanandroid<span class="token punctuation">.</span>com<span class="token operator">/</span>article<span class="token operator">/</span>list<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span>json</code></pre><p>这就不符合 bui-list 组件请求地址因为变化的是地址中间的某个字段「这里是页面」，我们这里选择使用 bui-scroll 组件来完成首页列表效果</p><h4 id="3、初始化-bui-scroll-组件"><a href="#3、初始化-bui-scroll-组件" class="headerlink" title="3、初始化 bui-scroll 组件"></a>3、初始化 bui-scroll 组件</h4><p>在 home.js 中我们使用 bui-scorll-demo 快捷为我们创建 bui-scroll demo </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 列表滚动加载 js 初始化: </span><span class="token keyword">var</span> uiScroll <span class="token operator">=</span> bui<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"#uiScroll"</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token string">".bui-list"</span><span class="token punctuation">,</span>    page<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    pageSize<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>    onRefresh<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> pagesize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token function">getData</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>pagesize<span class="token punctuation">,</span><span class="token string">"html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    onLoad<span class="token punctuation">:</span> getData<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//新增下一页数据</span><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>pagesize<span class="token punctuation">,</span>command<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> command <span class="token operator">=</span> command <span class="token operator">||</span> <span class="token string">"append"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 更新分页信息,如果高度不足会自动请求下一页</span>  uiScroll<span class="token punctuation">.</span><span class="token function">updateCache</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 刷新的时候返回位置</span>  uiScroll<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 列表滚动加载 html 对应的结构<span class="token punctuation">:</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"uiScroll"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bui-scroll"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bui-scroll-head"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bui-scroll-main"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bui-list"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bui-scroll-foot"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>我们可以看到下拉加载，下拉刷新只是提供了方法没有具体的实现「没做数据请求」，我们就可以在 getData 方法中自己使用 ajax 请求然后渲染列表了</p><p>把对应的 html 放到 home.html 中去就放在轮播的下面,并且修改一下 bui-scroll 的 id 和给　bui-list 添加一个 home-bui-list 的 id</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 正文内容 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slide<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-slide bui-slide-skin01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 列表滚动加载 html 对应的结构: --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home_uiScroll<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-list<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home-bui-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-foot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre><p>对应初始化 bui-scoll 中的 id 也要修改</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> uiScroll <span class="token operator">=</span> bui<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"#home_uiScroll"</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token string">"#home_bui_list"</span><span class="token punctuation">,</span>    page<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>    pageSize<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>    onRefresh<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 下拉回调</span>        <span class="token keyword">var</span> page <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> pagesize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token function">getData</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>pagesize<span class="token punctuation">,</span><span class="token string">"html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    onLoad<span class="token punctuation">:</span> getData<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>由于是单页应用并且 list 我们以后用的比较多，所以每个 id 都要是唯一的不然会共同一个对象出现问题，由于我们的 page 是从 0 开始，所以我这里也改为了 0 这里下拉加载和上拉刷新 page 动态增加了减少 bui-scroll 组件为我们实现了，我们直接使用即可</p><h4 id="4、编写-getData-方法"><a href="#4、编写-getData-方法" class="headerlink" title="4、编写 getData 方法"></a>4、编写 getData 方法</h4><blockquote><p>数据请求</p></blockquote><p>直接使用 ajax 请求即可</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//新增下一页数据</span><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>pagesize<span class="token punctuation">,</span>command<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> command <span class="token operator">=</span> command <span class="token operator">||</span> <span class="token string">"append"</span><span class="token punctuation">;</span>    bui<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> baseUrl <span class="token operator">+</span><span class="token string">"/article/list/"</span><span class="token operator">+</span>page<span class="token operator">+</span><span class="token string">"/json"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//接口请求的参数</span>        <span class="token comment" spellcheck="true">// 可选参数</span>        method<span class="token punctuation">:</span> <span class="token string">"GET"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 成功</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>datas<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 更新分页信息,如果高度不足会自动请求下一页</span>        uiScroll<span class="token punctuation">.</span><span class="token function">updateCache</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 刷新的时候返回位置</span>        uiScroll<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 失败 </span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们把项目运行起来看看后台 log </p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/home_list_log.png" alt="请求列表 log "></p><p>没问题数据已经回来了，我们把渲染 html 界面 </p><blockquote><p>渲染界面</p></blockquote><p>这里我们使用 es6 的字符串模版来渲染界面，在请求的 success 回调里面添加如下代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 成功</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>datas<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 拿到数据</span><span class="token keyword">var</span> mydata <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>datas<span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遍历并生成对应的条目 html </span>mydata<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    html <span class="token operator">+</span><span class="token operator">=</span>     <span class="token template-string"><span class="token string">`&lt;li id="home_item" class="bui-btn">       &lt;div style="display: flex; justify-content: space-between;margin-bottom: 10px;">            &lt;span>Author:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>            &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>niceDate<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>        &lt;/div>        &lt;span style="font-size: 16px;color:black;"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>        &lt;div style="margin-top:7px;">            &lt;span style="color:red;"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>superChapterName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>        &lt;/div>    &lt;/li>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把数据添加到 ul 标签中</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#home-bui-list"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 更新分页信息,如果高度不足会自动请求下一页</span>uiScroll<span class="token punctuation">.</span><span class="token function">updateCache</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 刷新的时候返回位置</span>uiScroll<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样基本上界面就出来了，并且分页自动调用，当然这里的 pagesize 设置大小不起作用，wanandroi 给我们返回的默认是 20 条数据，这里不用去管就好</p><h4 id="5、运行看效果"><a href="#5、运行看效果" class="headerlink" title="5、运行看效果"></a>5、运行看效果</h4><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/homelist_half_result.gif" alt="查看效果"></p><p>基本上没有什么问题，但是细心的会发现我们的下拉刷新在轮播的下面我们要实现的效果图不一样「目标是整体下拉」，我们再处理一下，其实很好处理把轮播当作 scroll 的孩子就可以了，直接修改 home.html </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home_uiScroll<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 轮播效果 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slide<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-slide bui-slide-skin01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-list<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home_bui_list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-scroll-foot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>把轮播放在 bui-scroll-main 标签下即可</p><p>这节我们就完成了首页列表功能，试一下吧</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08、完成首页轮播效果</title>
      <link href="/2019/09/15/bui-wanandroid-home-banner/"/>
      <url>/2019/09/15/bui-wanandroid-home-banner/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=114583931&amp;page=9" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、课程简介"><a href="#一、课程简介" class="headerlink" title="一、课程简介"></a>一、课程简介</h3><p>本节们请求 banner api 完成轮播图效果如下</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/impl_result.gif" alt="本节目标"></p><h3 id="二、开始撸码"><a href="#二、开始撸码" class="headerlink" title="二、开始撸码"></a>二、开始撸码</h3><h4 id="1、创建-slide-组件「轮播图」"><a href="#1、创建-slide-组件「轮播图」" class="headerlink" title="1、创建 slide 组件「轮播图」"></a>1、创建 slide 组件「轮播图」</h4><p>我们要完成此效果要使用 bui 的 slide「轮播组件」，上节们把 banner 的 api 请求来下了，我们在 home.js 中使用 bui-slide-demo 快速创建 slide 组件「对应的 html 和 js 都生成了」</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 焦点图 js 初始化:</span><span class="token keyword">var</span> uiSlide <span class="token operator">=</span> bui<span class="token punctuation">.</span><span class="token function">slide</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span><span class="token string">"#slide"</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token number">380</span><span class="token punctuation">,</span>    autopage<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    loop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 焦点图 html 对应的结构:</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"slide"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bui-slide bui-slide-skin01"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bui-slide-main"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/banner01.png"</span> alt<span class="token operator">=</span><span class="token string">"占位图"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li style<span class="token operator">=</span><span class="token string">"display: none;"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"images/banner01.png"</span> alt<span class="token operator">=</span><span class="token string">"占位图"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    </code></pre><p>这样就快速为我们生成了一个 slide 组件，slide 有静态渲染和动态渲染，默认生成的是静态组件，也就是轮播图片是固定死的不符合我们的要求，我们只把 html 最外层的 div 拿到 home.html 的 main 标签中去</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slide<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-slide bui-slide-skin01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="2、修改-slide-满足动态渲染"><a href="#2、修改-slide-满足动态渲染" class="headerlink" title="2、修改 slide 满足动态渲染"></a>2、修改 slide 满足动态渲染</h4><p>给 slide 添加一个数据字段 data</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> uiSlide <span class="token operator">=</span> bui<span class="token punctuation">.</span><span class="token function">slide</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span><span class="token string">"#slide"</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token number">380</span><span class="token punctuation">,</span>    autopage<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    loop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    autoplay<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 自动播放</span>    data<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 返回的图片数据</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>当然也可以自定义模版使用 template 来显示自己需要的样式 ，这里我们不使用 template 就采用默认的模版渲染</p><h4 id="3、动态填充数据"><a href="#3、动态填充数据" class="headerlink" title="3、动态填充数据"></a>3、动态填充数据</h4><p>我们把请求下来的数据遍历添加到 data 中</p><pre class=" language-javascript"><code class="language-javascript"> bui<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">"/api/banner/json"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//接口请求的参数</span>    <span class="token comment" spellcheck="true">// 可选参数</span>    method<span class="token punctuation">:</span> <span class="token string">"GET"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成功</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">var</span> dataImgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dataImgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>            image<span class="token punctuation">:</span>result<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>imagePath        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 修改动态值</span>      uiSlide<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>dataImgs<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 失败 </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>经过以上三步我就完成了轮播效果，就这么简单,运行起来的效果就和开头的动态效果图一样了</p><p>本节到此结束，下节我们完成首页下面的 list 列表</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07、请求 api 跨域问题</title>
      <link href="/2019/09/08/bui-wanandroid-corss-domain/"/>
      <url>/2019/09/08/bui-wanandroid-corss-domain/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=114357649&amp;page=8" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、课程简介"><a href="#一、课程简介" class="headerlink" title="一、课程简介"></a>一、课程简介</h3><p>本节主要使用 wandroid 真实的 api 用在项目中，并且解决跨域引起问题</p><h3 id="二、请求首页-banner"><a href="#二、请求首页-banner" class="headerlink" title="二、请求首页 banner"></a>二、请求首页 banner</h3><h4 id="1、找到-banner-的-api"><a href="#1、找到-banner-的-api" class="headerlink" title="1、找到 banner 的 api"></a>1、找到 banner 的 api</h4><p>打开 <a href="https://wanandroid.com" target="_blank" rel="noopener">wanandroid</a> 网站找到 api 然后找到 首页banner 这个 api 长如下样子</p><pre class=" language-bash"><code class="language-bash">https://www.wanandroid.com/banner/json</code></pre><p>点进去看看它返回的 json 结构</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"华为工程师推荐的一份学习资料"</span><span class="token punctuation">,</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>            <span class="token property">"imagePath"</span><span class="token operator">:</span> <span class="token string">"https://wanandroid.com/blogimgs/81286041-eefe-4f9a-a11d-6876c1866d1e.jpeg"</span><span class="token punctuation">,</span>            <span class="token property">"isVisible"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"华为工程师推荐的一份学习资料"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://mp.weixin.qq.com/s/KwpOzDygmH5af6t_QW7riw"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"imagePath"</span><span class="token operator">:</span> <span class="token string">"https://www.wanandroid.com/blogimgs/62c1bd68-b5f3-4a3c-a649-7ca8c7dfabe6.png"</span><span class="token punctuation">,</span>            <span class="token property">"isVisible"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"我们新增了一个常用导航Tab~"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://www.wanandroid.com/navi"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        ... 这里显示两条来说明一下问题    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"errorCode"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"errorMsg"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">}</span></code></pre><h4 id="2、在项目中请求-banner-api"><a href="#2、在项目中请求-banner-api" class="headerlink" title="2、在项目中请求 banner api"></a>2、在项目中请求 banner api</h4><p>直接在 home.js 中使用 bui-ajax 快捷创建出 ajax 请求代码块</p><pre class=" language-javascript"><code class="language-javascript"> bui<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">"https://wanandroid.com/banner/json"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//接口请求的参数</span>    <span class="token comment" spellcheck="true">// 可选参数</span>    method<span class="token punctuation">:</span> <span class="token string">"GET"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成功</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 失败 </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>顺便把 url 改成 banner 接口地址，并在 success 中打个 log 查看一下，接下来把项目运行起来，直接看 console 很不幸出问题了</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/show_access_to_xml.png" alt="跨域问题"></p><p>这是一个典型的跨域问题，针对跨域名问题有两种处理方式，在客户端处理和在服务端处理「也可以设置浏览器去处理」，我们使用的三方的 api 不可能在服务端处理，那就在客户端处理吧，其实 bui 为了我们内置了代理，直接使用即可</p><h3 id="三、解决跨域问题"><a href="#三、解决跨域问题" class="headerlink" title="三、解决跨域问题"></a>三、解决跨域问题</h3><p>在 bui 官网文档档调试这一小节中介绍了如何接口跨域<br>使用的是 <a href="https://www.npmjs.com/package/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a> 通过代理来处理跨域问题，在我们项目中 app.json 中去修改</p><p>直接修改 app.json 找到 proxy 字段来修改成下面即可</p><pre class=" language-json"><code class="language-json"><span class="token property">"proxy"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"/api"</span><span class="token operator">:</span> <span class="token punctuation">{</span> // 使用 /api 代替源地址    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"https://www.wanandroid.com"</span><span class="token punctuation">,</span>// 源地址    <span class="token property">"changeOrigin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>// 改变源    <span class="token property">"pathRewrite"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"^/api"</span><span class="token operator">:</span> <span class="token string">"https://www.wanandroid.com"</span> // 路径重写      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>我们定义了一个 api 来代理真实的 <a href="https://www.wanandroid.com" target="_blank" rel="noopener">https://www.wanandroid.com</a> 地址，所以接口中就使用 /api 下面我们修改 home.js 把 <a href="https://www.wanandroid.com" target="_blank" rel="noopener">https://www.wanandroid.com</a> 换成 /api</p><pre class=" language-javascript"><code class="language-javascript">bui<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">"/api/banner/json"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//接口请求的参数</span>    <span class="token comment" spellcheck="true">// 可选参数</span>    method<span class="token punctuation">:</span> <span class="token string">"GET"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 成功</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 失败 </span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后再看 chrome 的 console</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/show_data.png" alt="显示请求数据"></p><p>数据请求成功了，我们就解决了跨域问题，这里我们修改一下成功回调中的 console.log 为 <code>console.log(result.data)</code> 来看看数据</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/show_result_data.png" alt="显示请求 data 数据"></p><p>这就是我们需要解析到轮播图中的数据</p><p>这节就到这里，主要说了一上跨域的问题，下节我们把取到的数据动态渲染到轮播组件中去</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06、前后端分离介绍</title>
      <link href="/2019/08/29/bui-wanandroid-front-back-end-rep/"/>
      <url>/2019/08/29/bui-wanandroid-front-back-end-rep/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=114112159&amp;page=7" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、为什么要前后端分离"><a href="#一、为什么要前后端分离" class="headerlink" title="一、为什么要前后端分离"></a>一、为什么要前后端分离</h3><p>前后分离是软件开发逐渐成熟的一种演变出来的开发模式，特别是在微服务大行其道的今天「微前端都在普遍使用了」，前后端开发不是趋势而是已经在大量使用的一种模式了，如果现今开发模式还没有分离要么是历史遗留的项目，要是就是你已经 out 了，我们先来看看前后端未分离之前的开发模式</p><h3 id="二、前后端未分离"><a href="#二、前后端未分离" class="headerlink" title="二、前后端未分离"></a>二、前后端未分离</h3><h4 id="1、前后端未分离架构图"><a href="#1、前后端未分离架构图" class="headerlink" title="1、前后端未分离架构图"></a>1、前后端未分离架构图</h4><p>前后端未分离之前，前端和后端是耦合在一块的代表的是 jsp 模式开发，玩的 jsp 的朋友都知道，jsp 被称为服务端脚本语言，是和服务端一起部署的，我们来看看简单的架构图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/old_develop_pattern.png" alt="前后端未分离构图"></p><p>从图中可以看到客户端就是浏览器，发起一个请求，然后后台查询数据库，并把 html 组装好「一般使用模版引擎」一次返回给客户端，以 jsp 为例就是发起请求以后，后台的 jsp 请求本地的服务器「jsp 和 后台在一块捆绑着」，然后拿到数据，渲染在 jsp 中，最后一次性给浏览器展示出来</p><h4 id="2、前后端未分离问题"><a href="#2、前后端未分离问题" class="headerlink" title="2、前后端未分离问题"></a>2、前后端未分离问题</h4><ul><li>耦合性强，把模版界面和后台接口服务耦合在一起，不符合单一职责</li><li>不便于测试</li><li>难以维护</li></ul><p>随着以 srping boot 和 spring clound 的微服务的迅速发展，服务端的应该保持单一职责，并且尽量的小并且随着以 React Vue 为代表的 UI 库出现，前后端分离也是水到渠成的事，哪前后端分离是什么样呢？下面来看</p><h3 id="三、前后端分离"><a href="#三、前后端分离" class="headerlink" title="三、前后端分离"></a>三、前后端分离</h3><h4 id="1、前后端分离架构图"><a href="#1、前后端分离架构图" class="headerlink" title="1、前后端分离架构图"></a>1、前后端分离架构图</h4><p>前后疫分离的思想也是借助于未分离之前的一些服务端模版引擎的一些思考过度过来，关于前后端分离我们来看一下简单的架构图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/front_back_end_oper.png" alt="前后端分离基本架构图"></p><p>可以看到前后端分离以后后台只是提供 api 接口，所有的 html css js 等都放在前端「放在一个静态服务器上」，然后通过接口取数据然后前端渲染「有时也需要服务端渲染」，这样说可能还比较抽象，我们来简化一下这幅图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/front_back_end_oper_simple.png" alt="前后端分离简图"></p><p>也就是是 html、css、js 这些静态资源部署在静态服务器上，然后服务端部署在自己需要的服务器「前后端部署在同一个局域网内」</p><p>这样前端向后台发起数据请求就像在本地一样「局域网中速度刚刚的」，然后前端拿到数据去渲染界面</p><p><strong>ps:</strong>以上所有的架构图都是一个概要图基本思想就是这样，但是会在这个基础上发生好多变种，比如静态资源放在 cdh 上等等</p><h4 id="2、前后端分离的优缺点"><a href="#2、前后端分离的优缺点" class="headerlink" title="2、前后端分离的优缺点"></a>2、前后端分离的优缺点</h4><blockquote><p>优点</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/front_back_end_oper_good.png" alt="前后端分离的优缺点"></p><p>我这里总结了四点</p><ul><li>单一职责：前后端各自干部各自的事</li><li>并行开发：前提是文档先行，把接口提前制定出来，然后前端开前端，后端开发后端，测试也可以编写同时进行没毛病</li><li>便于测试：这里是说前后端各自方便测试，当然集成测试会有些复杂</li><li>易用维护：由于单一职责，各自维护各自的相当容易</li></ul><p>下面我们以并行开发为例说明一下，看图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/the_same_develop.png" alt="并行开发"></p><p>并行开发前提规约大于配置首先要有一个约定就是接口文档，服务端把接口文档输出以后「以输入参数，返回参数等」，这样前端直接使用 mock 服务来模拟线上开发环境「哪怕此时服务端只写了一个接口，还没有实现」，当服务端开发完成后直接把 mock 切到真实的地址再联调一下就 o 了，这样大大的提升了开发效率，客户端不用等服务端接口</p><blockquote><p>优点</p></blockquote><p>前端后分离也有些不足，看图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/front_back_end_oper_notgood.png" alt="前后端分离不足"></p><p>我这里总结了三点</p><ul><li>前端工作量增加：一整套的 html、css、js 都要前端去做，后台只是提供接口，后台把精力放在性能和分布式等地方</li><li>增加成本：原来可能一个 jsp 写到 server 服务，现在分开以后可能要有专门的前端开发人员去写</li><li>seo 效果不太友好</li></ul><p>其实第一点也不是什么坏事，原来被后端人员鄙视的前端现在工作也非常有挑战「再不是什么切图仔」，并且前端工作岗位越来越多「待遇又好」</p><p>这节我们就到这里了，这里对前后端分离起了一个抛砖引玉，前端还会涉及 spa 和多页应用、还会有前商路由和后端路由、前端渲染和后端渲染有兴趣可以细细看一下</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05、完成微信 tab 凸起效果</title>
      <link href="/2019/08/28/bui-wanandroid-weixin-tab-hump/"/>
      <url>/2019/08/28/bui-wanandroid-weixin-tab-hump/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=113872948&amp;page=6" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、课程介绍"><a href="#一、课程介绍" class="headerlink" title="一、课程介绍"></a>一、课程介绍</h3><p>本节我们来实现微信 tab 的一个凸起的一个效果</p><p>目前的效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/old_weixin_tab.png" alt="目前效果"></p><p>要实现的效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/impl_winxin_tab_result.png" alt="实现微信 tab 凸起效果"></p><h3 id="二、实现效果分析"><a href="#二、实现效果分析" class="headerlink" title="二、实现效果分析"></a>二、实现效果分析</h3><p>我们来看一下下面的图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/impl_tab_steps.png" alt="凸起实现步骤"></p><p>基本上分为三个步骤</p><ul><li>按照分层叠加的方式实现这种效果，先准备三个层元素圆，长方形和微信 icon </li><li>将圆放在最底层，长方形盖住圆去掉底部的圆弧，再把微信 icon 话在最外层</li><li>把颜色设置成白色「这里设置红、桔色是为了看起来形象，其实本身应该设置成白色」</li></ul><p>通过以上三步就把微信 icon 凸起效果完成了</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><p>我们拿出一个图来说一下具体的实现步骤吧</p><h4 id="1、实现具体步骤"><a href="#1、实现具体步骤" class="headerlink" title="1、实现具体步骤"></a>1、实现具体步骤</h4><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/impl_weixin_tab_relsteps.png" alt="实现凸起 tab 的具体步骤"></p><p>通过叠加和移动就完成效果了</p><h4 id="2、main-html-中添加-css"><a href="#2、main-html-中添加-css" class="headerlink" title="2、main.html 中添加 css"></a>2、main.html 中添加 css</h4><p>我们看看具体的 css </p><pre class=" language-css"><code class="language-css">    <span class="token selector">// 设置 tab条 的总背景    <span class="token class">.main_footer</span> </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">// 包含微信 icon 的 li 的样式    <span class="token class">.main_footer</span> <span class="token class">.btn-weixin</span></span><span class="token punctuation">{</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*画圆*/</span>    <span class="token selector"><span class="token class">.main_footer</span> <span class="token class">.layer1</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1.2</span>rem<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1.2</span>rem<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token punctuation">;</span>        <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">1</span>px <span class="token hexcode">#eee</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">0.3</span>rem<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*圆长方形*/</span>    <span class="token selector"><span class="token class">.main_footer</span> <span class="token class">.layer2</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span>rem<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span>-<span class="token number">.05</span>rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*微信 ICON 图标样式*/</span>    <span class="token selector"><span class="token class">.main_footer</span> <span class="token class">.btn-weixin</span> <span class="token class">.weixin-icon</span> </span><span class="token punctuation">{</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">.94</span>rem<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">.94</span>rem<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">.94</span>rem<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">.94</span>rem<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">.2</span>rem<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其中 main_footer 是给 footer 添加了一个 class</p><h4 id="3、修改-tab-对应的-li"><a href="#3、修改-tab-对应的-li" class="headerlink" title="3、修改 tab 对应的 li"></a>3、修改 tab 对应的 li</h4><p>给出对应微信 tab 的 li 「这里修改一下」，并添加相应的 css 的 class</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn bui-box-vertical btn-weixin<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pages/weixin/weixin.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom_icon weixin-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token entity" title="&#xe61e;">&amp;#xe61e;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 去掉文本 &lt;div class="span1">        微信    &lt;/div> --></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加两个层分别是圆和长方形 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layer1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layer2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>到此我们就完成了凸起的微信 tab 的效果</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04、处理使用自定义字体图片完成 tab 的几处问题(2)</title>
      <link href="/2019/08/27/bui-wanandroid-customiconfont-modify/"/>
      <url>/2019/08/27/bui-wanandroid-customiconfont-modify/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=113439755&amp;page=5" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>此节的内容其实在上节的笔记中我已经修改过来了，具体修改的地方看视频或按照上节的笔记写代码就没有问题</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04、使用自定义字体图片完成首页 tab</title>
      <link href="/2019/08/27/bui-wanandroid-customiconfot-tab/"/>
      <url>/2019/08/27/bui-wanandroid-customiconfot-tab/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=113439611&amp;page=4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><p><strong>ps:</strong> 注意视频中打 tag 的方式有误，应该在保证某个分支开发完成再打 tag ，不能在 tag 的基础上打 tag ,视频中的内容我们就在 master 分支上开发，开发完成后提交到 github 上，然后在 master 的基础上打出 tag</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> tag 04、使用自定义字体图片完成首页tab </code></pre><p>然后再使用以下命令把本地 tag 推到 github 远程 tag 上</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push origin 04、使用自定义字体图片完成首页tab </code></pre><h3 id="一、课程简介"><a href="#一、课程简介" class="headerlink" title="一、课程简介"></a>一、课程简介</h3><p>本节我们使用自定义字体图片来替换我们的首页 tab 所对应的图片，目前我们的 tab 是这个样子</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/old_tab.png" alt="老 tab"></p><p>我们要实现的一个效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/source_tab.png" alt="目标 tab"></p><h3 id="二、制作自定义字体图片"><a href="#二、制作自定义字体图片" class="headerlink" title="二、制作自定义字体图片"></a>二、制作自定义字体图片</h3><p>这里我们使用阿里的 <a href="https://www.iconfont.cn" target="_blank" rel="noopener">iconfont</a> 来制作字体图片，没有账号的先注册一个账号</p><h4 id="1、准备图片"><a href="#1、准备图片" class="headerlink" title="1、准备图片"></a>1、准备图片</h4><p>在真实的场景中，肯定是我们的 UI 设计出来的图片，这里我们直接在阿里的 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a> 上面找图片，字体图片的制作也在这个网站上去完成，在 iconfont 的首页搜索首页然后出来</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/download_tab_svg.png" alt="首页 svg 下载"></p><p>这里我们下载 svg 格式的图片「后面制作字体图片要用这种格式」，依次把我们需要的 tab 的图片 svg 全部下载下来「这里就不一一下载了，大家自行尝试去下，不一定非要和我的图片一样，方法学会即可」</p><h4 id="2、上传到-iconfont-网站上"><a href="#2、上传到-iconfont-网站上" class="headerlink" title="2、上传到 iconfont 网站上"></a>2、上传到 iconfont 网站上</h4><p>准备好 5 大 tab 的 svg 图片以后，我们在 iconfont 的首页中依次找到图标管理我的项目</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/icon_mamager_myproject.png" alt="我的项目"></p><p>然后点击右边的紫色按钮新建一个目录来存放我们的 svg 图片</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/create_new_project.png" alt="创建项目按钮"></p><p>然后弹出创建对话框</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/alert_create_project.png" alt="弹出项目对话框"></p><p>我们写入相应的名称等内容即可，接下来我们进入到刚才新建的项目中去上传我们准备的 svg 图片，有一上传至图片按钮</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/upload_pic_toproject.png" alt="上传svg图片至项目"></p><p>到此会到上传界面</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/upload_svg.png" alt="上传svg界面"></p><p>看到了吧，这里需要 svg 所以我们开始准备的就是 svg 图片，上传就可以了,上传完以后就会看到我们的图片</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/show_upload_svg.png" alt="上传svg成功显示"></p><h4 id="3、下载制作好的-iconfont"><a href="#3、下载制作好的-iconfont" class="headerlink" title="3、下载制作好的 iconfont"></a>3、下载制作好的 iconfont</h4><p>经过上面的步骤我们就把自定义字体图片制作好了，下面下载下来看看「点击面图中的下载至地按钮」，我们来看看文本夹中有啥</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/download_custom_iconfont.png" alt="查看自定义 iconfont 目录"></p><p>其中字体图片已经为我们生成了,下面我们看看如何使用</p><h3 id="三、使用自定义图片"><a href="#三、使用自定义图片" class="headerlink" title="三、使用自定义图片"></a>三、使用自定义图片</h3><p>我们切换到 master 分支上开发，不能直接在 tag 的基础上打 tag ，我们在 master 开发完以后在 master 的基础上打 tag </p><h4 id="1、查看-html-文件"><a href="#1、查看-html-文件" class="headerlink" title="1、查看 .html 文件"></a>1、查看 .html 文件</h4><p>把文件下载下来以后，我们直接点击 .html 文件就可以看到如何定义字体图片和使用它</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/custom_iconfont_html.png" alt="查看字体图片 html 文件"></p><p>可以看到有三种使用方式「红框标出来」，我们直接使用第一种方式即可「各种方式里面都有使用说明」</p><h4 id="2、在我们的项目中新建-custom-iconfont-css-文件"><a href="#2、在我们的项目中新建-custom-iconfont-css-文件" class="headerlink" title="2、在我们的项目中新建 custom_iconfont.css 文件"></a>2、在我们的项目中新建 custom_iconfont.css 文件</h4><p>我们在项目中新建一个 <code>custom_iconfont.css</code> 文件，然后将相应的字体图片放入到项目的 font 目录下「也可以定义一个目录去存放」，这里注意一下由于 bui 内置了字体图片所以不能以 iconfont 或是 icon 来命名，我们把我们的字体图片名字全部加一个前缀 custom_ </p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/put_customiconfont_tofont.png" alt="字体图片放入 font 目录中"></p><p>我们在 bui.css 中查看一下他是如何使用字体图片的</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"icon"</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url("../font/iconfont.eot")</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url("../font/iconfont.eot?#iefix")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"embedded-opentype"</span><span class="token punctuation">)</span>,     <span class="token url">url("../font/iconfont.woff")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"woff"</span><span class="token punctuation">)</span>,     <span class="token url">url("../font/iconfont.ttf")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"truetype"</span><span class="token punctuation">)</span>,     <span class="token url">url("../font/iconfont.svg#iconfont")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"svg"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[class^="icon-"]</span>, <span class="token class">.icon</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"icon"</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>    <span class="token property">-webkit-text-stroke-width</span><span class="token punctuation">:</span> <span class="token number">0.2</span>px<span class="token punctuation">;</span>    <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">}</span></code></pre><p>可以看到上面是关联字体图片，下面是定义字体图片类，我们照猫画虎来一份稍作修改「前提是把我的字体图片放入到 font 目录中」</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*custom_iconfont.css*/</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"custom_icon"</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url("../font/custom_iconfont.eot")</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url("../font/custom_iconfont.eot?#iefix")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"embedded-opentype"</span><span class="token punctuation">)</span>,     <span class="token url">url("../font/custom_iconfont.woff")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"woff"</span><span class="token punctuation">)</span>,      <span class="token url">url("../font/custom_iconfont.ttf")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"truetype"</span><span class="token punctuation">)</span>,      <span class="token url">url("../font/custom_iconfont.svg#iconfont")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"svg"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.custom_icon</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"custom_icon"</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>    <span class="token property">-webkit-text-stroke-width</span><span class="token punctuation">:</span> <span class="token number">0.2</span>px<span class="token punctuation">;</span>    <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">}</span></code></pre><p>经过上面步骤我们就引入了字体图片并且定义了一个 class 来加载</p><p><strong>PS:由于 icon bui 使用了，所以我们这里使用 custom_icon 来作为 class</strong></p><h4 id="3、将-custom-iconfont-css-引入到-index-html中"><a href="#3、将-custom-iconfont-css-引入到-index-html中" class="headerlink" title="3、将 custom_iconfont.css 引入到 index.html中"></a>3、将 custom_iconfont.css 引入到 index.html中</h4><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/custom_iconfont.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>接下来就可以愉快的使用了，在我们生成的字体图片的 .html 文件中第三步就是使用字体图片</p><pre><code>&lt;span class="iconfont"&gt;&amp;#x33;&lt;/span&gt;</code></pre><p>当然这里的 class 要换成我们的 custom_icon,后面的值哪来的同样在字体文件的 .html 开头中就有了</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/unicode_icon_font.png" alt="字体图片码"></p><p>找到这些字体图片，我们直接替换我们项目中 main.html 中的 tab 图标即可,以首页为例，其它的同理</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn bui-box-vertical active<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pages/home/home.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- class="icon_home" 将其替换成我们的  custom_icon 并输入 &amp;#xe61c; 即可--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom_icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity" title="&#xe61c;">&amp;#xe61c;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>span1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        首页    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>经过这些步骤我们就把原有的字体图片替换成我们自定义的字体图片了</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>这节课我们学习了如何使用自定义图标并且在自己的项目中使用它，动手试试吧</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03、使用 github 管理代码</title>
      <link href="/2019/08/27/bui-wanandroid-pushcodegithub/"/>
      <url>/2019/08/27/bui-wanandroid-pushcodegithub/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=113439528&amp;page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、创建-git-仓库"><a href="#一、创建-git-仓库" class="headerlink" title="一、创建 git 仓库"></a>一、创建 git 仓库</h3><h4 id="1、在-github-中创建-bui-wanandroid-仓库"><a href="#1、在-github-中创建-bui-wanandroid-仓库" class="headerlink" title="1、在 github 中创建 bui-wanandroid 仓库"></a>1、在 github 中创建 bui-wanandroid 仓库</h4><p>如果没有 github 账户的首先得注册一个，我们直接新建一个 bui-wanandroid 远程仓库，如下所示：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/create_github_repository.png" alt="创建bui-wanandroid github远程仓库"></p><p>这里提示创建过了不用管「我视频里面已经创建了」，你们直接创建就可以了，然后选择 public 类型的「公司项目要选择private如果不是开源的话」,下面不用管直接点击绿色按钮创建即可-成功就会弹出以下信息「以下是初始化本地项目并且和远程仓库关联起来的命令」</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init  // 初始化本地仓库，前提进入我们本地的 wanandroid 目录中去<span class="token function">git</span> add README.md // 没有新建一个 README.md<span class="token function">git</span> commit -m <span class="token string">"first commit"</span> // 首次提交，你把所有的本地文件添加到本地仓库以后再提交<span class="token function">git</span> remote add origin https://github.com/TigerChain/bui-wanandroid.git // 本地仓库关联远程他库<span class="token function">git</span> push -u origin master // 把本地仓库的代码提交到远程的 master 分支上</code></pre><h4 id="2、添加忽略文件-gitignore"><a href="#2、添加忽略文件-gitignore" class="headerlink" title="2、添加忽略文件 .gitignore"></a>2、添加忽略文件 .gitignore</h4><p>我们在项目根目录创建 .gitignore 输入下面忽略的文件，并且忽略 node_modules 文件「此文件是安装三方依赖的文件夹，我们只要在 package.json 中添加了三方依赖以 save 的形式，那么直接使用 yarn/npm install 安装 node_modules 就出现了」，这个文件不需要提交</p><pre class=" language-bash"><code class="language-bash">node_modules/</code></pre><p>添加完忽略文件以后，我们使用上述命令把本地项目提交到远程 master 分支即可</p><h3 id="二、tag-管理每小节的代码"><a href="#二、tag-管理每小节的代码" class="headerlink" title="二、tag 管理每小节的代码"></a>二、tag 管理每小节的代码</h3><p>为了方便我们的查看每节「写代码部分」直观的一个效果，我们把每节对应的代码打一个 tag 来显示「不是最规范的做法，但是为了说明了问题方便查看」，我们把上节基本框架打个 tag 提交到 github 上面去</p><ul><li>在本地 master 分支上打 tag </li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> tag 02-项目框架搭建</code></pre><p>以上就在本地打出了一个 tag 是基于 master 分支的</p><ul><li>提交本地 tag 到 github 的远程 tag</li></ul><p>再提交之前，我们先要 git add* 「如果有新文件的话」，然后使用 git commit -am ‘提交的信息’ 提交到本地分支，然后推到远程分支上去使用 <code>git push origin tag名称</code> 推到远程 tag 上去</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push origin 02-项目框架搭建</code></pre><p>这样我就把本地的 tag 推到远程 github 的 tag 上去了,看看 github 远程 tag</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/tag_02.png" alt="远程 github 上的 tag02"></p><p>这节课到此结束了，我们讲了一下把本地的 wanandroid 项目提交到 github 上面去，并且使用 tag 的形式来管理我们每小节的代码，下节我们讲使用自定义字体图片完成首页五个 tab </p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02、项目框架搭建</title>
      <link href="/2019/08/23/bui-wanandroid-createframe/"/>
      <url>/2019/08/23/bui-wanandroid-createframe/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=112894897&amp;page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、本节内容"><a href="#一、本节内容" class="headerlink" title="一、本节内容"></a>一、本节内容</h3><p>上一节我们介绍了使用 bui 开发玩 Android webapp 的简介，这节我们就正式开始我们的代码阶段，本节完成我们玩 Android 的一个基本框架就好，如下</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/finish_result.png" alt="完成效果"></p><p>先就是完成我们下面四大 TAB 切换和共公的 titleBar 即图中标红的部分，中间的内容我们拿文字先替代</p><h3 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h3><p>看到这个效果，我们肯定不会从头去写 tab 的一个效果，而是使用 bui 为我们内置的模版去快速创建一个 webapp「不熟悉 bui 模版的可以看我的基础视频」</p><h4 id="1、快速初始化项目"><a href="#1、快速初始化项目" class="headerlink" title="1、快速初始化项目"></a>1、快速初始化项目</h4><p>由于本套教程是进阶教程，所以关于 buijs 脚手架的安装都不再做介绍，创建项目之前我们先看看 bui 为我们内置了哪些模版，打开终端使用 <code>buijs list-template</code> 命令</p><pre class=" language-bash"><code class="language-bash">λ buijs list-templateINFO Fetching release: latest<span class="token punctuation">..</span>.INFO Already cached release.Available templates:main-tabpage-articlepage-article-listpage-blogpage-categorypage-chatpage-commentpage-formpage-historypage-iconpage-listpage-loginpage-msgpage-newmodulepage-panelpage-personalpage-photopage-registerpage-searchbarpage-sidebarstore-chat</code></pre><p>我们看到 bui 为我们内置了许多模版，我们在这里使用第一个 main-tab 模版来快速仓位我们的项目：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> wanandroid  // 第1步<span class="token function">cd</span> wanandroidbuijs create -t main-tab // 第2步</code></pre><h4 id="2、运行项目"><a href="#2、运行项目" class="headerlink" title="2、运行项目"></a>2、运行项目</h4><p>经过上面两步我们的项目就创建出来了,接下来我们运行一下项目，在运行项目之前我们要安装三方依赖「看过基础的知道我们可以使用 yanr/npm/live-server 来运行我们的项目」，这里我们使用 yarn 不能使用 live-server 运行我们的项目「在做数据请求的时候再说为什么」进行以下两步运行起项目</p><pre class=" language-bash"><code class="language-bash">yarn intall // 第1步 安装三方依赖 首次会有点慢，耐心等待yarn run dev // 第2步 运行起我们的项目</code></pre><p>我们来看看我们使用 main-tab 为我们创建的模版应用长什么样子</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/bui-mai-tab.png" alt="bui-main-tab 创建的模版工程"></p><p>怎么样基本上带 tab 的模版工程就为我们创建出来了，无非就是我们稍微修改一下 tab 对应的图片和顶部的 titlebar 即可</p><h4 id="3、修改默认的-main-tab-模版工程"><a href="#3、修改默认的-main-tab-模版工程" class="headerlink" title="3、修改默认的 main-tab 模版工程"></a>3、修改默认的 main-tab 模版工程</h4><p><code>(1)、划分目录并创建对应的 html 和 js</code></p><p>我们使用 sublime 打开我们的项目看一下目录结构「你也可以使用其它 IDE-vscode/atom 等配置 bui-fast 插件即可」</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/main-tab-toc.png" alt="main-tab 默认的目录"></p><p>我们看到所有的文件都放在 main 中，这种目录划分不合理， 们根据底部的 tab 来重新划分一个目录结构，我们看我们的效果图有五个 tab </p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/tab-create-foloder.png" alt="合理划分目录结构"></p><p>那么在 pages 目录分别创建如下目录 </p><ul><li>首页 home </li><li>知识体系 konwledge</li><li>微信公号 weixin</li><li>导航 navigation</li><li>项目 project</li></ul><p>然后在每个目录中创建出对应的 html 和 js ，比如在 home 目录中创建 home.html 和 home.js</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/create_maintab_html_js.png" alt="创建目录对应的 html 和 js"></p><p>html 和 js 的前缀要一样，这是 bui 的规范，当然名字可以不和目录的名字一样「随便你定义」，然后我们在每个 html 界面中使用 &lt;ui-page 然后按 tab 键快速为我们生成一个界面的基本框架「前提要安装 bui-fast 插件」，以 home.html 为例</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-bar-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui.back();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-back<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-bar-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-bar-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 右边按钮位置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正文内容 --></span>        首页    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 底部内容 此处内容固定在页面底部 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>然后在 home.js 中使用 loader-define 为我们快捷生成模块化 js </p><pre class=" language-javascript"><code class="language-javascript">loader<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> pageview <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pageview<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后在每个对应的 htlm 和 js 中都使用以上方式去创建，并且在 main 标签正文内容写出对应的文本来标识各个页面「我把 header 中的文本也修改了，你可以修改也可以不修改各个 tab 对应的子界面中的 header 最后要去掉」，这样我们就把 5 大 tab 的内容界面搭建起来了</p><p><code>(2)、修改 main.html</code></p><p>首先我们把 footer 中的 tab 文本修改成我们的玩 Android 的文本</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-nav<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tabDynamicNav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn bui-box-vertical active<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pages/home/home.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>span1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    首页                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn bui-box-vertical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pages/knowledge/knowledge.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>span1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    知识体系                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn bui-box-vertical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pages/weixin/weixin.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-pic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-badges<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>span1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    微信                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn bui-box-vertical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pages/navigation/navigation.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>span1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    导航                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn bui-box-vertical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pages/project/project.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>span1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    项目                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></code></pre><p>并且我们新加了一个 li 由于 bui 模版工程为我们生成的是默认是 4 个　tab ，而我们需要的是 5 个　tab，并且把 href 导航到我们上面定义的 5 个 html 界面去了，这里还没有完，由于我们添加了一个 tab 所以对应的 html 存放的位置也要添加一个就是在 main 的 bui-tam-main 中添加一个 li ，这里 li 的数量必须和 tab 数量一一对应</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-tab<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tabDynamic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-tab-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 首页 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 知识体系tab --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 微信tab --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 导航tab --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                     <span class="token comment" spellcheck="true">&lt;!-- 新添加的 li --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 项目tab --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre><p>我们使用 yarn run dev 运行起来项目，并调整到手机模式下，查看效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/modify_main_tab_result.gif" alt="修改 main-tab 显示效果"></p><p>基本上我们点击底下的 tab 就导航到我们定义的 html 页面中了,我们刚才说了底部的 tab 数量必须和上面 tab 内容对应的 li 的数量一致，为什么呢，我们查看 chrome 的 Elements 查看 dom 结构</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/html_insert_li.png" alt="tab 内容 dom 结构"></p><p>看到了没我们定义的 5 个 tab 对应的 html 就分别插入到 li 中的「也就是底部 tab href 导致的界面」，如果数量不一致，那点击 tab 就无法切换过去或是界面错乱</p><p><code>(3)、在 main.html 添加公共 Header</code></p><p>我们看我们前面给出的效果图知道我们的 Header 不变的永远都是这样的</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/common_header.png" alt="公共的 Header"></p><p>年有我没有必要在每个子页面中去写 header ，而应该把这个公共的 header 写在 main.html 中，下面我们把每个子页面中的 Header 去掉，并且添加公共 header 到 main.html 中「每个界面中的 Header main 和 footer 是一个界面的标准格式但是不是必须全都有」，查看 main.html 修改</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-bar-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-bar-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>玩 Android<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-bar-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 右边按钮位置 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bui-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon-search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span></code></pre><p>将以上代码插入到 main.html 的 main 标签之上，我修改了默认返回按钮为 icon-menu 菜单按钮，并且给右边添加了一个搜索按钮，查看效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/modify_common_header.png" alt="给 main.html 添加公共 header"></p><p>我们在把微信标签对应的小红点去掉这样就达到了我们的效果，这节课也就到这里了，我们实现的效果和最上面的效果图还差下面 tab 的图片「自定义字体图片」和微信有一个凸起的效果，我们下节课再实现 </p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01、课程简介</title>
      <link href="/2019/08/23/bui-wanandroid-lessonintroduction/"/>
      <url>/2019/08/23/bui-wanandroid-lessonintroduction/</url>
      
        <content type="html"><![CDATA[<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><iframe src="//player.bilibili.com/player.html?aid=65041899&amp;cid=112893662&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%"> </iframe><h3 id="一、课程介绍"><a href="#一、课程介绍" class="headerlink" title="一、课程介绍"></a>一、课程介绍</h3><p>本套视频教程是 bui 的进阶教程，我们使用 bui 框架来开发一款玩 Android APP，采用真实的 API ,如果对 bui 还不了解的朋友可以看我的 <a href="https://www.bilibili.com/video/av61211061?from=search&amp;seid=10097664244207153606" target="_blank" rel="noopener">基础视频</a>或者直接在 bui 官网去学习<a href="http://easybui.com" target="_blank" rel="noopener">http://easybui.com</a>，本套视频是视频+笔记的形式「文字版和视频版，方便朋友们去查阅」，本人水平有限，难免会出现疏漏和问题，欢迎大家留言互动，我们共同学习，一起进步，</p><p><strong>ps:</strong>由于本人也要工作所以时间有限录视频和写笔记两者加起来会耗费大量时间，所以不能保证笔记和视频一定是同步的「视频可能会先于笔记发行」，请大家谅解</p><p>下面我们看看我们这套视频的一个大纲</p><h4 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h4><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/lesson_struct.png" alt="课程简介"></p><p>主要分四个部分，我们具体的看一下导图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/mide_struct.png" alt="课程导图"></p><p>导图中对我们大纲做了细划把我们这套教程的目标、课前所需知识等明确了一下，下面我们来看看最终我们开发完成的效果吧</p><h3 id="二、最终效果显示"><a href="#二、最终效果显示" class="headerlink" title="二、最终效果显示"></a>二、最终效果显示</h3><p>bui　是一个快速开发　webapp 的移动框架，可以在主浏浏览器、微信、等中运行，也可以打成本地 apk 或 ipa 去运行，这里我们分别以 apk 和 chrome 浏览器来显示效果</p><h4 id="手机上-apk-显示效果"><a href="#手机上-apk-显示效果" class="headerlink" title="手机上 apk 显示效果"></a>手机上 apk 显示效果</h4><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/wanandroid-native.gif" alt="手机上显示玩 Android"></p><p>由于使用 vysor 来投影手机屏幕，所以效果失真了，真实情况下不存在这种情况</p><h4 id="在浏览器中运行"><a href="#在浏览器中运行" class="headerlink" title="在浏览器中运行"></a>在浏览器中运行</h4><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/wanandroid-web.gif" alt="浏览器中显示玩 Android"></p><p>还可以吧，一套代码就可以部署在不同的平台下「爽吧」</p><h3 id="三、源码共享"><a href="#三、源码共享" class="headerlink" title="三、源码共享"></a>三、源码共享</h3><p>我们在开发的过程中会把源码提交到 github 上面模拟在公司的开发的一个场景，如果没有 github 的朋友注册一个先</p><p>这节课就到这里了，我们把这套教程做了一个简单的简介，下节课我们就正式开干，先把框架搭建起来</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/bui-开发玩-Android-app/">使用 bui 开发玩 Android app</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00、课程大纲</title>
      <link href="/2019/08/23/bui-wandroid-lessonstruct/"/>
      <url>/2019/08/23/bui-wandroid-lessonstruct/</url>
      
        <content type="html"><![CDATA[<p>本套视频教是 bui 的进阶课程，我们使用 bui 框架来开发一个玩 android app ，采用 wanandroid 给我们暴漏出来的真实 api 去开发</p><h4 id="bui-开发玩-Android-app-目录"><a href="#bui-开发玩-Android-app-目录" class="headerlink" title="bui 开发玩 Android app 目录"></a>bui 开发玩 Android app 目录</h4><ul><li>00、<a href="/2019/08/23/bui-wandroid-lessonstruct/" title="课程大纲">课程大纲</a></li><li>01、<a href="/2019/08/23/bui-wanandroid-lessonintroduction/" title="课程介绍">课程介绍</a></li><li>02、<a href="/2019/08/23/bui-wanandroid-createframe/" title="基本框架搭建">基本框架搭建</a></li><li>03、<a href="/2019/08/27/bui-wanandroid-pushcodegithub/" title="使用 github 管理代码">使用 github 管理代码</a></li><li>04、<a href="/2019/08/27/bui-wanandroid-customiconfot-tab/" title="使用自定义字体图片完成首页 tab">使用自定义字体图片完成首页 tab</a></li><li>04、<a href="/2019/08/27/bui-wanandroid-customiconfont-modify/" title="处理使用自定义字体图片完成 tab 的几处问题(2)">处理使用自定义字体图片完成 tab 的几处问题(2)</a></li><li>05、<a href="/2019/08/28/bui-wanandroid-weixin-tab-hump/" title="完成微信 tab 凸起效果">完成微信 tab 凸起效果</a></li><li>06、<a href="/2019/08/23/bui-wandroid-lessonstruct/" title="前后端分离介绍">前后端分离介绍</a></li><li>07、<a href="/2019/09/08/bui-wanandroid-corss-domain/" title="请求 api 跨域问题">请求 api 跨域问题</a></li><li>08、<a href="/2019/09/15/bui-wanandroid-home-banner/" title="完成首页轮播效果">完成首页轮播效果</a></li><li>09、<a href="/2019/09/23/bui-wanandroid-home-list/" title="完成首页列表">完成首页列表</a></li><li>10、<a href="/2019/09/27/bui-wanandroid-knowledge-list/" title="完成知识体系列表">完成知识体系列表</a></li><li>11、<a href="/2019/09/30/bui-wanandroid-click-impl/" title="点击事件的三种实现方式">点击事件的三种实现方式</a></li></ul><h4 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h4><p>bui　是一个快速开发　webapp 的移动框架，可以在主浏浏览器、微信、等中运行，也可以打成本地 apk 或 ipa 去运行，这里我们分别以 apk 和 chrome 浏览器来显示效果</p><h5 id="手机上-apk-显示效果"><a href="#手机上-apk-显示效果" class="headerlink" title="手机上 apk 显示效果"></a>手机上 apk 显示效果</h5><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/wanandroid-native.gif" alt="手机上显示玩 Android"></p><p>由于使用 vysor 来投影手机屏幕，所以效果失真了，真实情况下不存在这种情况</p><h5 id="在浏览器中运行"><a href="#在浏览器中运行" class="headerlink" title="在浏览器中运行"></a>在浏览器中运行</h5><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/bui-wanandroid/imgs/wanandroid-web.gif" alt="浏览器中显示玩 Android"></p><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p>此源码公布在 github 上随着课程讲解分布提交代码，以 tag 的形式管理每节的代码</p><p><a href="https://github.com/TigerChain/bui-wanandroid" target="_blank" rel="noopener">https://github.com/TigerChain/bui-wanandroid</a></p><h4 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h4><p>TigerChain</p><ul><li>github：<a href="https://github.com/TigerChain" target="_blank" rel="noopener">https://github.com/TigerChain</a></li><li>个人博客：<a href="http://tigerchain.github.io/">http://tigerchain.github.io</a></li><li>简书：<a href="https://www.jianshu.com/u/3106a1da401f" target="_blank" rel="noopener">https://www.jianshu.com/u/3106a1da401f</a></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li>bui 官网：<a href="http://www.easybui.com" target="_blank" rel="noopener">http://www.easybui.com</a></li><li>玩 Android 官网：<a href="https://wanandroid.com" target="_blank" rel="noopener">https://wanandroid.com</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bui 开发玩 Android app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> bui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06、基本小部件-Button(1)</title>
      <link href="/2019/08/18/flutter-material-buttons/"/>
      <url>/2019/08/18/flutter-material-buttons/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flutter_buttons_struct.png" alt="本节大纲"></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、无所不在的-Button"><a href="#一、无所不在的-Button" class="headerlink" title="一、无所不在的 Button"></a>一、无所不在的 Button</h3><p>####（1）、一些 Button 举例</p><p>Button 在一个项目是必不可少的，前端好多 UI 库都把 button 专门封装成一个小组件要么是直接是 css 样式库调用即可,比如 bootstrap、ElementUi、buttons,拿 buttons「随便举个例子说一下」来说，其中的部分图片</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/buttons_show.png" alt=""></p><h4 id="2-、Button-的实现方式"><a href="#2-、Button-的实现方式" class="headerlink" title="(2)、Button 的实现方式"></a>(2)、Button 的实现方式</h4><p>一般情况下，做一个 Button 都是抽象成一个组件，然后给其设置对应的样式即可，比如 buttons 或是 bootstrap 的 button 都是给设置不同的 css 样式 来显示不同的效果，在 Android 中通过自定义 View 来通过属性设置显示不同的按钮样式，基本上实现方式原理都是一毛一样的</p><h3 id="二、Flutter-中的-Buttons"><a href="#二、Flutter-中的-Buttons" class="headerlink" title="二、Flutter 中的 Buttons"></a>二、Flutter 中的 Buttons</h3><p>在 Flutter 中一切万物皆组件， Buttons「Flutter 中并没有这个组件，这里为了说 Flutter 的 Button 组件多用了一个集合表示一下」 也不例外，也是一个组件，Flutter 中的 Buttons 基本上分为两类</p><p><strong>1、 MaterialButton 类 Button</strong></p><ul><li>FlatButton：扁平化按钮</li><li>RaisedButton：凸起的按钮</li><li>OutlineButton：带边框的按钮</li></ul><p>以上三个 button 都属于 MaterialButton 的子类</p><p><strong>2、其它 Button</strong></p><ul><li>FloatingActionButton</li><li>IconButton</li><li>ButtonBar</li><li>DropdownButton </li><li>等等其它 Button 还包括自定义的 Button 组件</li></ul><p>我们先看 MaterialButton ，MaterialButton 搞定了，它的子类还不是菜，无非就是扩展了一下而已吗</p><h3 id="三、MaterialButton-家族"><a href="#三、MaterialButton-家族" class="headerlink" title="三、MaterialButton 家族"></a>三、MaterialButton 家族</h3><p>从上面我们了解到 MaterialButton 和其子类一组成了四在家族「目前来说，保不齐后面更新了还会有更多，我们不说三方组件，只说系统支持的」，那么”擒贼先擒王”，我们先看看老大 MaterialButton</p><h4 id="（1）、MaterialButton"><a href="#（1）、MaterialButton" class="headerlink" title="（1）、MaterialButton"></a>（1）、MaterialButton</h4><h5 id="属性解析"><a href="#属性解析" class="headerlink" title="属性解析"></a>属性解析</h5><p>不废话看构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">MaterialButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Key key<span class="token punctuation">,</span>    <span class="token metadata symbol">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onPressed<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onHighlightChanged<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textTheme<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>disabledTextColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>disabledColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>focusColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hoverColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>highlightColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>splashColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colorBrightness<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elevation<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>focusElevation<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hoverElevation<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>highlightElevation<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>disabledElevation<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>padding<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>shape<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>clipBehavior <span class="token operator">=</span> Clip<span class="token punctuation">.</span>none<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>focusNode<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>materialTapTargetSize<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>animationDuration<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minWidth<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>设置的属性的还是比较多的，这里挑重点解释一下</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>onPressed</td><td>按钮按下事事件</td></tr><tr><td>onHighlightChanged</td><td>可以用来监听按钮的按下和放开过程</td></tr><tr><td>textTheme</td><td>文本主题</td></tr><tr><td>textColor</td><td>按钮文本颜色</td></tr><tr><td>disabledTextColor</td><td>按钮禁用按钮上的文本颜色</td></tr><tr><td>color</td><td>按钮的颜色</td></tr><tr><td>disabledColor</td><td>按钮禁用时的颜色</td></tr><tr><td>highlightColor</td><td>长按后按钮的颜色</td></tr><tr><td>splashColor</td><td>点击长按水波纹的颜色</td></tr><tr><td>elevation</td><td>阴影的范围大小</td></tr><tr><td>padding</td><td>按钮内边距</td></tr><tr><td>shape</td><td>按钮的形状样式</td></tr><tr><td>minWidth</td><td>按钮最小宽度</td></tr><tr><td>height</td><td>按钮的高度</td></tr><tr><td>child</td><td>一般是 Text 文本组件</td></tr></tbody></table><h5 id="实例操练"><a href="#实例操练" class="headerlink" title="实例操练"></a>实例操练</h5><p><strong>1、color 属性</strong></p><p>用来设置按钮颜色</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_color_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_color_code.png" alt="MaterialButton color 核心代码"></p><p><strong>PS：</strong>这里注意一点，就是如果不写 onPressed 方法或是 onPressed: 后面直接给个 null 那么给按钮设置颜色是无效的「所以说 color 也是按钮的可用时颜色，不可用颜色有 disabledColor 属性呢」</p><p><strong>2、textColor 属性</strong></p><p>用来设置文本颜色的属性</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_textcolor_result.png" alt="显示效果"></p><blockquote><p>核心代码 </p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_textcolor_code.png" alt="MaterialButton textColor 核心代码"></p><p>同样 onPressed 方法不能为空或为 null，否则 textColor 无效 </p><p><strong>3、splashColor 属性</strong></p><p>按钮按下的水波纹颜色设置</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_splashcolor_result.gif" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_splashcolor_code.png" alt="MaterialButton splashColor 核心代码"></p><p>同样 onPressed 方法不能为空或为 null，否则 splashColor 无效「按钮都禁用了点击肯定没效果」</p><p><strong>4、highlightColor 属性</strong></p><p>按钮长按高亮颜色</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_highlightcolor_result.gif" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_highlightcolor_code.png" alt="MaterialButton highlightColor 核心代码"></p><p><strong>5、elevation 属性</strong></p><p>按钮阴影大小，默认是 2 可以从源码中看到</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_elevation_srouce_code.png" alt="elevation 默认值来源"></p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_elevation_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_elevation_code.png" alt="MaterialButton elevation 核心代码"></p><p><strong>6、padding 属性</strong></p><p>设置按钮内边距</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_padding_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_padding_code.png" alt="MaterialButton padding 核心代码"></p><p><strong>等屏幕宽按钮实现</strong></p><p>我们想一下，根据我们的已有知识如何实现一个等屏幕宽的按钮呢，细心的朋友可能想到使用 Container 的 width 就可以，没错我们可以使用它实现，我们来介绍三种方式实现等屏幕宽的按钮</p><ul><li>(1)、使用 Container 的宽来实现 </li></ul><p>我们让　Container 的宽为等屏幕宽度即可</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/button_equals_screenwidth_result1.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p>我们来封装一个组件是否根据 Container 的宽来设定按钮的宽度</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/button_equals_screenwidth_common_container_code.png" alt="根据 Container 的宽度设置按钮宽度"></p><p>我们看到我们在 materialButton3 组件方法中又封装了一个组件方法 commonEqualMaterialButton 用来判断是否根据 MaterialButton 的 minWidth 来确定按钮宽度</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/button_equals_screenwidth_common_minwidth_code.png" alt="根据 MaterialButton 的 minWidth 设置按钮宽度"></p><p>我们看如何调用 </p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/button_equals_screenwidth_code1.png" alt="Container width 确定按钮宽度代码调用"></p><p>我们可以看到通过以上调用代码会走 MaterialButton3 的 if 代码片断，那么按钮的宽度就会由 Container 的 width:double.infinity 来确定了是等屏幕宽的</p><ul><li>(2)、使用 MaterialButton 的 minWidth 来设置</li></ul><p>通过上面代码的封装我们已经也看到了，当然我们还可以通过使用 MaterialButton 的 minWidth 来设置按钮的宽度</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/button_equals_screenwidth_result2.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p>上面封装过了，我们直接调用即可</p><pre class=" language-dart"><code class="language-dart"> <span class="token function">materialButton3</span><span class="token punctuation">(</span><span class="token string">'等屏幕宽2、 使用其 minwidth 实现'</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><ul><li>(3)、使用 Row 配合 Expanded 来实现 </li></ul><p>我们上节完成了等分的例子说了 Expanded 组件，如果上节中是一个子组件那么不就是等屏幕宽了么</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/button_equals_screenwidth_result3.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/button_equals_screenwidth_code3.png" alt="Row 和 Expanded 实现等屏宽按钮"></p><p><strong>7、shape 属性</strong></p><p>按钮的形状我们在开发中运用的也比较多，一般是圆角按钮和直角按钮比较常用，在 Flutter 中 shape 使用 ShapeBorder 来表示,ShapeBorder 是一个抽象类，所以我们直接看它的子类</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/shapeborder_subclass.png" alt="ShapeBorder 的子类"></p><p>我们可以看到还有和 input 相关的 Border，我们挑几个重要的说一下以下几个常用的</p><ul><li>roundedRectangleBorder // 矩形圆角边框</li><li>CircleBorder // 圆形边框</li><li>StadiumBorder // 圆角边框</li><li>BeveledRectangleBorder// 斜角边框，可以实现直角</li></ul><p>为了方便起见，我们封装一个共用的组件方法，只是根据设置不同的 shape 就给我显示不同的效果，如下：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shapeborder_common_code.png" alt="shape 的封装"></p><ul><li>(1)、先看 RoundedRectangleBorder</li></ul><p>圆角矩形，前面我们说过 Container 的 decoration 的 BoxDecoration RoundedRectangleBorder border　和　borderRadius 用法和其差不多，我们看其构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">RoundedRectangleBorder</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>side <span class="token operator">=</span> BorderSide<span class="token punctuation">.</span>none<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>borderRadius <span class="token operator">=</span> BorderRadius<span class="token punctuation">.</span>zero<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>side <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">assert</span><span class="token punctuation">(</span>borderRadius <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们看到　RoundedRectangleBorder　只有两个属性边框和边框圆角，我们直接看效果吧</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_roundedrectangleborder_result.png" alt="显示效果"></p><p>我们来调用我们封装后的代码</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_roundedrectangleborder_call_code.png" alt="RoundedRectangleBorder 调用封装"></p><p>封装一个 RoundedRectangleBorder 组件</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_roundedrectangleborder_code.png" alt="RoundedRectangleBorder 组件方法封装"></p><p>上面我们调用过了，这样就完成了效果图样式 </p><ul><li>(2)、 CircleBorder</li></ul><p>从字面意思可以知道这个 shape 是设置圆按钮的，看构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">CircleBorder</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>side <span class="token operator">=</span> BorderSide<span class="token punctuation">.</span>none <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>side <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可以看到 CircleBorder 只有一个 side 属性并且不能为空「不是说我们非要传递，参数是可选的可以不传，不能为空是因为它有默认的值，它本身是不为空的」，我们来看我们做的效果吧</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_circleborder_result.png" alt="显示效果"></p><blockquote><p>核心代码 </p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_circleborder_code.png" alt="CircleBorder 核心代码"></p><p>我们直接调用上面我们封装的方法把 CircleBorder 传递进去即可</p><ul><li>(3)、 StadiumBorder </li></ul><p>StadiumBorder 半圆角矩形我们直接使用它就可以设置出来一个半圆角的按钮，看其构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">StadiumBorder</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>side <span class="token operator">=</span> BorderSide<span class="token punctuation">.</span>none<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>side <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一样也是只有一个 side 属性，我们来看我们写的效果吧</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_stadiumborder_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p>没什么好说的，继续调用我们封装的代码即可</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_stadiumborder_code.png" alt="StadiumBorder 显示效果代码"></p><p>在这里我们没有设置 side 有兴趣可以添加看看</p><ul><li>(4)、 BeveledRectangleBorder </li></ul><p>BeveledRectangleBorder 斜角矩形，我们看看构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">BeveledRectangleBorder</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>side <span class="token operator">=</span> BorderSide<span class="token punctuation">.</span>none<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>borderRadius <span class="token operator">=</span> BorderRadius<span class="token punctuation">.</span>zero<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>side <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">assert</span><span class="token punctuation">(</span>borderRadius <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可以看到它有两个属性 side 和 borderRadius，分别设置边框和圆角大小，我们来看我们的效果</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_beveledrectangleborder_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_beveledrectangleborder_code.png" alt="BeveledRectangleBorder 核心代码"></p><p>直接调用我们封装的代码即可，我们什么也不传就是一个直角按钮，当然实现方式有多种，比如我们可以使用上面圆角方式实现，把它的圆角设置为 0 就可以了</p><p>说了 BeveledRectangleBorder 是斜角矩形，那斜角体现在哪里呢？ 我们给其设置 borderRadius 就可以实现斜角了，看显示效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_beveledrectangleborder_result2.png" alt="显示效果"></p><blockquote><p>核心代码 </p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_button_shap_beveledrectangleborder_code2.png" alt="BeveledRectangleBorder 斜角矩形按钮"></p><p>好了，对于 MaterialButton 的属性我们就说这么多，我们把 MaterialButton 的几大核心属性都说了一下，那它的几个子类那就跟玩似的，大概的说一下吧「就不像 MaterialButton 这么详细的说了」</p><h4 id="（2）、RaisedButton"><a href="#（2）、RaisedButton" class="headerlink" title="（2）、RaisedButton"></a>（2）、RaisedButton</h4><p>RaisedButton 是凸起的按钮，怎么样的凸起呢？就是设置了一些阴影效果看起来有凸起的感觉，并且按下以后阴影会变大我们直接看效果</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/raised_button_defalut_result.gif" alt="显示效果"></p><p>其实它就是是分两种状，普通状态和按下状态，并且都有阴影，看起来就有凸起的效果</p><blockquote><p>核心代码 </p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/raised_button_defalut_code.png" alt="RaisedButton 默认效果代码"></p><p>我们把 RaisedButton 做了一个简单的封装,然后我们给一个颜色看看</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/raised_button_color_call_code.png" alt="带颜色的 RaisedButton"></p><p>直接调用我们上面封装的组件方法给个颜色即可,效果如下：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/raised_button_color_result.gif" alt="带颜色的 RaisedButton 效果"></p><p>这里就不多说了，玩过了 MaterialButton 它的其它属性也不在话下尝试着把玩一下即可</p><h4 id="（3）、FlatButton"><a href="#（3）、FlatButton" class="headerlink" title="（3）、FlatButton"></a>（3）、FlatButton</h4><p>我们看 MaterialButton 第二个儿子 FlatButton，FlatButton 是扁平化按钮，默认的背景是透明「默认的 color 是 null」的也不带阴影，按下后会有背景色但是还是没有阴影，直接看效果吧</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flat_button_defalut_result.gif" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flat_button_defalut_code.png" alt="FlatButton 默认效果代码"></p><p>这些效果使用 MaterialButton 都可以实现，没什么好说的，这里简单的介绍一下即可</p><h4 id="（4）、OutlineButton"><a href="#（4）、OutlineButton" class="headerlink" title="（4）、OutlineButton"></a>（4）、OutlineButton</h4><p>我们看 MaterialButton 第三个儿子 OutlineButton，<br>OutlineButton 默认是带边框的按钮，且默认没有背景并且无阴影，但是按下后会出现背景并且无阴影，看效果</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/outline_button_defalut_result.gif" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/outline_button_code.png" alt="OutlineButton 效果代码"></p><p>OutlineButton 无非就是在 MaterialButton 的基础「其实是 RaisedButton」上默认重写了 shape 等属性而已，大概看一下源码，也就是在 OutlineButton 的 build 方法中，我们看一下</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/outline_button_source_code.png" alt="OutlineButton 部分源码"></p><p><strong>PS:</strong> 这里要看的是 OutlineButton 的 build 方法非它的 icon 的 build 方法</p><p>我们可以看到 OutlineButton 返回的是一个 RaisedButton,并且默认就是重写了 shape 方法「带了边框等」并且阴影默认都是 0 「就有一个高亮时的阴影默认也是返回 0 」 ，其实学习组件就是看构造方法和 build 方法来看它有哪些特性</p><p>目前来说，我们把 MaterialButton 家族的按钮就介绍完了，只要把 MaterialButton 掌握了，其它的按钮基本上没啥好说的，我们在开发中当然可以使用 MaterialButton 来实现我们的效果，可是知道了它的孩子就可以快速来实现我们想要效果的按钮了,下面看一下其它的一些按钮</p><h3 id="四、IconButton"><a href="#四、IconButton" class="headerlink" title="四、IconButton"></a>四、IconButton</h3><p>IconButton 不属于 MaterialButton 家族，它继承 StatelessWidget，从字面意思就可以看出它是一个带图标的按钮「是没有文字的」，默认情况下没有背景，并且按下的时候会出现一个圆形的背景，来看构造方法</p><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">const</span> <span class="token function">IconButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Key key<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>iconSize <span class="token operator">=</span> <span class="token number">24.0</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>    <span class="token metadata symbol">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>icon<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>focusColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hoverColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>highlightColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>splashColor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>disabledColor<span class="token punctuation">,</span>    <span class="token metadata symbol">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onPressed<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>focusNode<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tooltip<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><p>从构造方法中可以看到，IconButton 需要一个 icon 和按下事件，其它的属性 MaterialButton 中基本上都有，注意有一个 tooltip 属性「长按按钮时出一个提示语」 ，我们来看效果</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/icon_button_result.gif" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/icon_button_code.png" alt="IconButton 效果代码"></p><p><strong>带 ICON 的文本按钮</strong></p><p>我们上面说了文本按钮，也还说了 ICON 按钮，那有没有带 ICON 的文本按钮呢？答案是肯定的，其实 RaisedButton、FlatButton、OutlineButton 内置了一个带 ICON 的构造方法，我们直接使用 xxxButton.icon 就可以了，最简单的使用方法是</p><pre class=" language-dart"><code class="language-dart">FlatButton<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span>    onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// ICON</span>    label<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">' FlatButton.icon'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 文本</span><span class="token punctuation">)</span></code></pre><p>我们简单的显示一下：</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_subclass_icon.gif" alt="显示效果"></p><p>我们可以看到这些默认的效果和　RaisedButton、FlatButton、OutlineButton　默认效果是一样的，只不过多了个　icon 而已，由于我们说过 button 的 child 一般情况来说是一个文本，但是它其实是一个 widget ，本质上可以多种组合，而 flutter 内置的带 icon 的文本组件就是使用组合「child 是一个 Row 组件」来实现的，我们来看上面效果的代码</p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/material_subclass_icon_code.png" alt="xxxButton.icon 核心代码"></p><p>接下来我们来看看到底 ICON 文本是如何实现的，以 FlatButton.icon 为例子来说明，我们看其构造方法，找到 _FlatButtonWithIcon 这个类，我们来具体的继承实现「我们这里不是专门的源码解析，只是大概过一下」，里面一段实现 ICON 文本的按钮的核心代码</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flat_button_withicon_code.png" alt="FlatButton.icon 实现 icon 文本源码"></p><p>很清楚的看到使用 Row 组件，包裹了一个 icon 和 lable 分析完毕</p><p>这节就说这么多，我们下节再介绍几个 button 比如 FloatingActionButton、ButtonBar 等，快动手敲一下吧！</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/从头整-Flutter/">从头开始整 Flutter</a></p><p><a href="https://mp.weixin.qq.com/s/ahUHqnc8_L6gSgLNtoWMzQ" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从头整 Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04、Vue props 属性</title>
      <link href="/2019/08/08/vue/vueinstruction/"/>
      <url>/2019/08/08/vue/vueinstruction/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/vue_props_struct.png" alt="本节大纲"></p><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/手把手教Vue/">TigerChain  手把手教Vue</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li><li>3、Demo 地址:<a href="https://github.com/tigerchain/vue-lesson" target="_blank" rel="noopener">https://github.com/tigerchain/vue-lesson</a> 请看 03、Vue–props属性这一节</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、v-bind-指令"><a href="#一、v-bind-指令" class="headerlink" title="一、v-bind 指令"></a>一、v-bind 指令</h3><p>在说 props 之前，我们先说说 v-bind 这个指令</p><blockquote><p>1、什么是 v-bind?</p></blockquote><p>v-bind 用来动态的绑定一个或多个属性，或一个组件的 prop ,比如绑定图片地址、标签的样式等,v-bind 的缩写是 :</p><blockquote><p>2、v-bind 的用法</p></blockquote><p>比如，我们给 img 一个图片资源地址</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>再比如，我给一个 div 设置 css 样式，如下</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{divstyle:isShowStyle}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"> <span class="token selector"><span class="token class">.divstyle</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>   data<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果 isShowStyle 为 true 的话，那么 </span>      <span class="token comment" spellcheck="true">// v-bind:class="{divstyle:isShowStyle}" 表示此 div 的 class 就是 divstyle</span>      isShowStyle<span class="token punctuation">:</span><span class="token boolean">true</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>等等，拿官方的举例来说，v-bind 可以绑定属性「以数据驱动」，在绑定 class 或 style「内联样式」 的时候支持数据或对象，以下是官方举例基本上把 v-bind 的使用场景介绍完了，html 的属性只能使用 v-bind 来绑定「除非你使用原生写法，不使用 v-bind」</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定一个属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 内联字符串拼接 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>/path/to/images/<span class="token punctuation">'</span> + fileName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- class 绑定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ red: isRed }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[classA, classB]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[classA, { classB: isB, classC: isC }]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- style 绑定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token property">fontSize</span><span class="token punctuation">:</span> size + <span class="token string">'px'</span> <span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">[styleObjectA, styleObjectB]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定一个有属性的对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ id: someProp, <span class="token punctuation">'</span>other-attr<span class="token punctuation">'</span>: otherProp }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 通过 prop 修饰符绑定 DOM 属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>text-content.prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someThing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- XLink --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:xlink:special</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre><blockquote><p>3、写个 demo 感受一下吧，这里直接在 script 引入 vue.js 来写</p></blockquote><ul><li>1、核心代码如下：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 第一种写法 其中 img 是宽度为 35 的 style 样式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgSrc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>img<span class="token punctuation">'</span>:show}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 第二种写法 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/logo.png<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">imgStyle</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 标签的属性的都可以使用 v-bind 替换 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span><span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>输入内容<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickBtnText<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- :value="''"  和 v-model 同时出现会报错--></span>    {{clickBtnText}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 这里是行内样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>测试<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token string">'margin-top'</span><span class="token punctuation">:</span><span class="token string">'10px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 定义一个样式</span>    <span class="token keyword">var</span> imgStyle <span class="token operator">=</span> <span class="token punctuation">{</span>      height<span class="token punctuation">:</span> <span class="token string">'40px'</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token string">'40px'</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#container'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">,</span>        imgStyle<span class="token punctuation">:</span>imgStyle<span class="token punctuation">,</span>        imgSrc<span class="token punctuation">:</span><span class="token string">'https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/logo.png'</span><span class="token punctuation">,</span>        show<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        clickBtnText<span class="token punctuation">:</span><span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><ul><li>2、查看结果</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/v-bind-result.png" alt="v-bind 结果"></p><p>我们看到我们使用 v-bind 设置图片，设置样式「行内样式和行外样式」，并且代替 html 原有的属性等，并且成功显示，调试窗口也没有报错</p><h3 id="二、props-属性"><a href="#二、props-属性" class="headerlink" title="二、props 属性"></a>二、props 属性</h3><p>Vue 和 React 一样，是使用 props「单向数据流」 来传递数据的「父组件的数据传递给后代组件」，props 在本组件中是不能修改的「和 React 也是一毛一样」</p><blockquote><p>1、一般格式</p></blockquote><p>我们知道组件有四种格式，不管那种格式 props 用法都是相同的，这里以全局组件为例子</p><pre class=" language-vue"><code class="language-vue">Vue.component('customcomponent',{    // 定义接收的 props 等待父组件传递    props:['message'],    template: '<span>{{message}}</span>',    ... 数据和方法等省略})</code></pre><blockquote><p>2、直接写代码感受一下</p></blockquote><p>在以下 demo 中，我们使用 props 来传递字符串、对象、样式来感受一下 props</p><ul><li>1、直接在上面的代码基础上修改，添加以下代码</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>以下是 props 例子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 如果要使用 props 来传递对象，就要使用 v-bind  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mycomponent</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>你好<span class="token punctuation">"</span></span> <span class="token attr-name">:mydata</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{username:<span class="token punctuation">'</span>tigerchain<span class="token punctuation">'</span>,age:28}<span class="token punctuation">"</span></span> <span class="token attr-name">name-</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mycomponent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// 定义一个组件</span><span class="token keyword">var</span> myComponent <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义 props </span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>    mydata<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//样式 ，如果这里使用驼峰标识 ，则在标签中使用就要使用 name-style 传递</span>    nameStyle<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{ message }} &lt;div> &lt;span v-bind:style="nameStyle">{{ mydata.username}}&lt;/span>&lt;/div> &lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 全局注册组件 组件的别名要是小写，否则会报错</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'mycomponent'</span><span class="token punctuation">,</span> myComponent<span class="token punctuation">)</span><span class="token keyword">var</span> vm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span><span class="token string">'#app2'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>为了便于观察，我们重新定义了一个　id 为 app2 的 div 和一个新的 Vue 实例「vm2」 ，我们定义一个组件并且添加如下的 props</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/define-props.png" alt="添加 props属性"></p><p>在使用组件的时候就可以传递数据了</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/props-line.png" alt="props 传递方法"></p><ul><li>2、运行查看结果</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/pass-props-result.png" alt="传递 props 结果"></p><p>我们看到，传递过来的数据完美的接收到并显示出来了，在这里注意以几下几点</p><ul><li>如果 props 中声明的是数据是驼峰标识，那么传值的时候就要使用 - 标识 </li></ul><p>比如 props 中的数据是 myData 那么在组件中传值时就要使用 my-data=”” ,如果没有使用驼峰那不牵扯</p><ul><li>在组件中使用 props 传值的时候默认传的是字符串</li></ul><p>如果想要传值「比如对象，数据等」那么就要使用 v-bind=”” 来传值，上面的 message 和 mydata 就显示了这两种方式</p><ul><li><p>props 中就定义一些默认的值，不能直接修改 props,只能间接的通过 data 来修改「在 data 里面定义数据，值就是 props ,这一点 React 是一样的」,其实　Vue 中的 data 就和 React 中的 state 是一样的</p></li><li><p>props 中的值，我们在 Vue 实例中可以使用 this.props 的值来访问「和仿问 data 是一样的」</p></li></ul><h3 id="三、-props-验证"><a href="#三、-props-验证" class="headerlink" title="三、 props 验证"></a>三、 props 验证</h3><p>想要写一个有“良心”的组件，指定 props 的验证规则非常有必要，比如我们在　props 中定义传递过来的 name 必须是字符串否则就发出警告「这对使用插件的人来说是非常友好的」</p><blockquote><p>1、验证规则</p></blockquote><p>直接引用官方的验证规则吧</p><pre class=" language-javascript"><code class="language-javascript"> props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 基础类型检测 (`null` 指允许任何类型)</span>    propA<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 可能是多种类型</span>    propB<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 必传且是字符串</span>    propC<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 必须传</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 数值且有默认值</span>    propD<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">100</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 数组/对象的默认值应当由一个工厂函数返回</span>    propE<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'hello'</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 自定义验证函数</span>    propF<span class="token punctuation">:</span> <span class="token punctuation">{</span>      validator<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">10</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>其中　type 有以下几种类型：</p><ul><li>String:字符串</li><li>Number:数字</li><li>Boolean: boolean 类型</li><li>Function: props 能传递方法，这样的话，组件方法的回调是非常 easy 的</li><li>Object: 对象</li><li>Array: 数组</li><li>Symbol: 原始类型</li></ul><blockquote><p>2、写段代码看一下吧，我们在原有代码基础上添加如下代码「红框所示」</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/props-add-rules.png" alt="props 中添加规则"></p><p>在这里我们就可以传递方法「实现了方法的回调」，并且规定了 age 只能传递数字，然后再看 vm2 实例中添加方法，如下所示</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/props-method.png" alt="props-method"></p><p>那么我们的 show 方法是如何来的呢，细心的朋友会发现，我们在组件中调用了 props 中声明的方法，这个 show 就是我们在使用组件的时候伟递过来的，我们看看代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果要使用 props 来传递对象，就要使用 v-bind  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mycomponent</span>      <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>你好<span class="token punctuation">"</span></span>      <span class="token attr-name">:mydata</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{username:<span class="token punctuation">'</span>tigerchain<span class="token punctuation">'</span>,age:28}<span class="token punctuation">"</span></span>      <span class="token attr-name">name-</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span>      <span class="token attr-name">age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>      <span class="token attr-name">:clickme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show()<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>由于 clickme 是 props 中规定的必须是方法，所以这里传递一个方法过去，在 vue 实例中直接实现这个方法就 ok 了「这样我们就可以在多组件开发中使用 props 来传递方法来达到方法回调的作用」,并且我们为了验证 age 故意传了一个字符串，我们在 chrome 调试容器能看到报错了，说 age 要传一个数字「这里就不截图了，大家可以自行实验」，上面的例子虽然把方法回调回来了，但是这在实际开发中还是有缺陷的，回调回来的方法没有带个参数「这肯定不能满足常用的开发呀」，我们修改一下上面的代码来实现回调传参</p><blockquote><p>修改一：props 传递方法处</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/props-pass-funvalue.png" alt="props-pass-funvalue"></p><blockquote><p>修改二：调用 props 传参方法</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/props-pass-vaule-call.png" alt="props-pass-vaule-call"></p><blockquote><p>修改三：回调方法实现</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/props-callback-fun.png" alt="props-callback-fun"></p><p>经过以上三处修改，我们就使用 props 来回调子组件的方法「并且带参数」完美实现了</p><blockquote><p>3、显示结果如下<br><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/props-pass-fun-callback.gif" alt="props-pass-fun-callback"></p></blockquote><p>我们可以看到，使用 props 传递方法，并且把子组件中的”你好”当作方法参数回传回来</p><p>以上我们就把 props 基本上介绍完了，细心的朋友可以发现，我们在 props 中传递方法的时候，未修改之前的方法是带括号的，后面的方法没有带括号，那么这有什么区别呢？再给大家赠送一些 Vue 中的方法的一些知识</p><h3 id="四、Vue-中的方法"><a href="#四、Vue-中的方法" class="headerlink" title="四、Vue 中的方法"></a>四、Vue 中的方法</h3><p>Vue 中的方法可以定义在 methods 中「这不废话吗」,也可以定义在 data 中，针对于无参数方法可以带括号，也可以不带括号来说明「有参数方法则必须带括号」，那么这些到底有什么区别呢？我们实际写一个例子来总结一下吧</p><ul><li>1、新建一个 vue-method.html 文件「并引入 vue.js」</li></ul><p>核心代码如下</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Vue 中的方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{bg:isShowbgStyle}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testDataFun<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>在 data 调用 testDataFun 方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{bg:isShowbgStyle}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testDataFun()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>在 data 调用 testDataFun() 方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{bg:isShowbgStyle}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testInMethodsFun<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>在 methods 调用 testInMethodsFun 方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{bg:isShowbgStyle}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testInMethodsFun()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>在 data 调用 testInMethodsFun() 方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>        isShowbgStyle<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function">testDataFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">testInMethodsFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>运行查看结果</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/vue/imgs/vue-method.png" alt="vue-method"></p><p>通过 Demo 我们清楚的知道以下结论</p><ul><li>1、在 data 或是 methods 中调用无参方法，那么默认会把 Event 对象传递进去，比如上面的 1、3 方法</li><li>2、如果想让 this 指向 Vue 实例化的对象，如果在 data 方法调用就必须加上括号</li><li>3、在 Vue methods 中的方法不管加参数还是不加参数「带括号或是不带括号」，this 都指向 Vue 的实例化对象</li><li>4、综上所术，我们把 Vue 中的方法都放在 methods 中是最好的选择,如果想要想绑定事件，那么不加括号是最好的选择。</li></ul><p>有的朋友可能会问了，那我想在 data/methods 中声明方法，既绑定事件又传参数如何搞呢？可以做到吗，肯定可以，我们添加测试代码如下</p><pre class=" language-vue"><code class="language-vue"><button v-bind:class="{bg:isShowbgStyle}" @click="testInMethodsFun('msg',$event)">在 data 调用 testInMethodsFun(参数，事件) 方法</button></code></pre><p>我们可以使用 $event 显示的把原生事件传递过去，查看一下输出结果</p><pre><code>Vue$3 {_uid: 0, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: Vue$3, …} Arguments(2) ["msg", MouseEvent, callee: ƒ, Symbol(Symbol.iterator): ƒ]</code></pre><p>怎么样,Arguments 参数中第一个是方法参数，第二个就是传递过来的事件，在 data 方法是同理</p><p>到此为止，我们把 vue props 就说完了，请大家动手写写感受一下</p><h3 id="五、回顾一下"><a href="#五、回顾一下" class="headerlink" title="五、回顾一下"></a>五、回顾一下</h3><ul><li><p>v-bind 是用来绑定属性的和 props 传递对象或值使用的「props 默认传递的是字符串，如果想要传值、对象，那么就要使用 v-bind」</p></li><li><p>如果 props 中声明的是数据是驼峰标识，那么传值的时候就要使用 - 标识</p><p>  如：props 中的数据是 myData 那么在组件中传值时就要使用 my-data=”” ,如果没有使用驼峰那不牵扯</p></li><li><p>props 用来定义一些默认值，我们不能直接修改 props 的值，只能通过 data 来间接修改</p></li><li><p>要写一个”合格”的 vue 组件，那么 props 最好加上验证</p></li><li><p>props 也可以用来传递方法，达到父组件调用子组件方法并且回调的目标</p></li><li><p>vue 中的方法建议写在 methods 中，无参方法调用时就不要加括号</p></li></ul><p>怎么样，说了这么多就这么几个知识点，再次提示一定支动手写一写「感受一下」</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/手把手教Vue/">手把手教Vue</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/vue-lesson" target="_blank" rel="noopener">手把手教 Vue</a> 方便大家查看，欢迎大家 fork，喜欢的话给个 star </p><p><a href="https://mp.weixin.qq.com/s/B_0x849XtTiKJGokX2YLlg" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 手把手教Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05、基本小部件-Row&amp;Column</title>
      <link href="/2019/07/31/flutter-row-column/"/>
      <url>/2019/07/31/flutter-row-column/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/Row&amp;Column_struct.png" alt="本节大纲"></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、Row-amp-Column"><a href="#一、Row-amp-Column" class="headerlink" title="一、Row &amp; Column"></a>一、Row &amp; Column</h3><h4 id="1、Row-和-Column-感知"><a href="#1、Row-和-Column-感知" class="headerlink" title="1、Row 和 Column 感知"></a>1、Row 和 Column 感知</h4><p>从字面意思也可以看出这是横向布局和纵向布局组件，其类似于 Android 中的 Linearlayout 的 android:orientation=”horizontal” 和 android:orientation=”vertical” 属性，并且 Row 和 Column 是基于 Flex 布局的</p><table><thead><tr><th>Android 原生</th><th>Flutter</th></tr></thead><tbody><tr><td>LinearLayout 的android:orientation=”horizontal”</td><td>Row 组件</td></tr><tr><td>LinearLayout 的android:orientation=”vertical”</td><td>Column 组件</td></tr></tbody></table><h4 id="2、Row-组件"><a href="#2、Row-组件" class="headerlink" title="2、Row 组件"></a>2、Row 组件</h4><p>Row 组件里面是存放一系列子组件的，包括子组件的对齐方式「主轴方式和侧轴方式，基于 Flex 布局」、主轴的大小等，如果使用 Row 组件那么轴的方向就是横向的，侧轴的方向就是垂直的</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row.png" alt="Row 组件概图"></p><h4 id="3、Column-组件"><a href="#3、Column-组件" class="headerlink" title="3、Column 组件"></a>3、Column 组件</h4><p>和 Row 组件是一样的，只不过主轴默认的方式是纵向的，侧轴的方式是横向的</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/column.png" alt="Column 组件概图"></p><h3 id="二、-Row-实例"><a href="#二、-Row-实例" class="headerlink" title="二、 Row 实例"></a>二、 Row 实例</h3><p><strong>Row 构造方法</strong></p><p>我们说过，学习一个组件之前，先看其构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Key key<span class="token punctuation">,</span>    MainAxisAlignment mainAxisAlignment <span class="token operator">=</span> MainAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 主轴的对齐方式</span>    MainAxisSize mainAxisSize <span class="token operator">=</span> MainAxisSize<span class="token punctuation">.</span>max<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 主轴的大小，默认等屏幕宽</span>    CrossAxisAlignment crossAxisAlignment <span class="token operator">=</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 侧轴的对齐方式</span>    TextDirection textDirection<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 文本对齐方式 </span>    VerticalDirection verticalDirection <span class="token operator">=</span> VerticalDirection<span class="token punctuation">.</span>down<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 垂直方向</span>    TextBaseline textBaseline<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 基线</span>    List<span class="token operator">&lt;</span>Widget<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 要摆放的组件列表</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><h4 id="1、mainAxisAlignment-属性"><a href="#1、mainAxisAlignment-属性" class="headerlink" title="1、mainAxisAlignment 属性"></a>1、mainAxisAlignment 属性</h4><p>此属性是 Row 组件的内容对齐方式，有以下几种形式</p><pre class=" language-dart"><code class="language-dart">  MainAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>   MainAxisAlignment<span class="token punctuation">.</span>end<span class="token punctuation">,</span>  MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>  MainAxisAlignment<span class="token punctuation">.</span>spaceBetween<span class="token punctuation">,</span>  MainAxisAlignment<span class="token punctuation">.</span>spaceAround<span class="token punctuation">,</span>  MainAxisAlignment<span class="token punctuation">.</span>spaceEvenly</code></pre><p>下面我们分别介绍</p><h5 id="（1）、MainAxisAlignment-start-属性"><a href="#（1）、MainAxisAlignment-start-属性" class="headerlink" title="（1）、MainAxisAlignment.start 属性"></a>（1）、MainAxisAlignment.start 属性</h5><p>此属性是 Row 组件对齐方式的默认属性，意为居左对齐，如下图所示：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_mainaxis_start.png" alt="MainAxisAlignment.start"></p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_main_start_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p>我们可以看到 MainAxisAlignment 只是对齐方式不同，所以我封装了一个组件，通过传递不同参数显示不同效果即可</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_main_axis_common_code.png" alt="Row 主轴对齐方式组件封装"></p><p>然后如下调用即可</p><pre class=" language-dart"><code class="language-dart"><span class="token function">mainAxisAlignmentWidget</span><span class="token punctuation">(</span>MainAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token string">'MainAxisAlignment.start 居左对齐'</span><span class="token punctuation">)</span> <span class="token punctuation">,</span></code></pre><h5 id="（2）、MainAxisAlignment-center-属性"><a href="#（2）、MainAxisAlignment-center-属性" class="headerlink" title="（2）、MainAxisAlignment.center 属性"></a>（2）、MainAxisAlignment.center 属性</h5><p>没什么说的，从字面意思也可以知道是内容成中对齐,概图如下：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_mainaxis_center.png" alt="MainAxisAlignment.center"></p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_main_center_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p>直接调用我们封装的组件即可</p><pre class=" language-dart"><code class="language-dart"><span class="token function">mainAxisAlignmentWidget</span><span class="token punctuation">(</span>MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span> Colors<span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token string">'MainAxisAlignment.center 居中对齐'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h5 id="（3）、MainAxisAlignment-end-属性"><a href="#（3）、MainAxisAlignment-end-属性" class="headerlink" title="（3）、MainAxisAlignment.end 属性"></a>（3）、MainAxisAlignment.end 属性</h5><p>此属性是 Row 内容右对齐属性，概图如下所示：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_mainaxis_end.png" alt="MainAxisAlignment.end"></p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_main_end_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><pre class=" language-dart"><code class="language-dart"><span class="token function">mainAxisAlignmentWidget</span><span class="token punctuation">(</span>MainAxisAlignment<span class="token punctuation">.</span>end<span class="token punctuation">,</span> Colors<span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token string">'MainAxisAlignment.end 居右对齐'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h5 id="（4）、MainAxisAlignment-spaceBetween-属性"><a href="#（4）、MainAxisAlignment-spaceBetween-属性" class="headerlink" title="（4）、MainAxisAlignment.spaceBetween 属性"></a>（4）、MainAxisAlignment.spaceBetween 属性</h5><p>此属性元素之间距离相等并且两端无间距「不设置间距的情况」下，可以用做元素两端对齐等，概图如下：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_mainaxis_spacebetween.png" alt="MainAxisAlignment.spaceBetween"></p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_main_spacebetween_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><pre class=" language-dart"><code class="language-dart"><span class="token function">mainAxisAlignmentWidget</span><span class="token punctuation">(</span>MainAxisAlignment<span class="token punctuation">.</span>spaceBetween<span class="token punctuation">,</span> Colors<span class="token punctuation">.</span>pink<span class="token punctuation">,</span><span class="token string">'MainAxisAlignment.spaceBetween 两端对齐，不设置边距则两端贴着屏幕两端，且元素之间间距相等'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h5 id="（5）、MainAxisAlignment-spaceAround-属性"><a href="#（5）、MainAxisAlignment-spaceAround-属性" class="headerlink" title="（5）、MainAxisAlignment.spaceAround 属性"></a>（5）、MainAxisAlignment.spaceAround 属性</h5><p>此属性是 Row 在主轴上对齐方式，特点是元素之间间距相等，并且两边留有间距「间距为元素之间间距的 1/2」,概图如下：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_mainaxis_spaceAround.png" alt="MainAxisAlignment.spaceAround"></p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_main_speckaround_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><pre class=" language-dart"><code class="language-dart"><span class="token function">mainAxisAlignmentWidget</span><span class="token punctuation">(</span>MainAxisAlignment<span class="token punctuation">.</span>spaceAround<span class="token punctuation">,</span> Colors<span class="token punctuation">.</span>grey<span class="token punctuation">,</span> <span class="token string">'MainAxisAlignment.spaceAround 两端对齐，两边间距相等，并且两边间距为元素之间间距的 1/2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h5 id="（6）、MainAxisAlignment-spaceEvenly-属性"><a href="#（6）、MainAxisAlignment-spaceEvenly-属性" class="headerlink" title="（6）、MainAxisAlignment.spaceEvenly 属性"></a>（6）、MainAxisAlignment.spaceEvenly 属性</h5><p>此属性是 Row 组件在主轴方向上将空白区域均分，元素之间和两边间距都相等，概图如下：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_mainaxis_spaceEvenly.png" alt="MainAxisAlignment.spaceEvenly"></p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_main_spaceevenly_result.png" alt="显示效果"></p><blockquote><p>核心代码 </p></blockquote><pre class=" language-dart"><code class="language-dart"> <span class="token function">mainAxisAlignmentWidget</span><span class="token punctuation">(</span>MainAxisAlignment<span class="token punctuation">.</span>spaceEvenly<span class="token punctuation">,</span> Colors<span class="token punctuation">.</span>deepOrange<span class="token punctuation">,</span> <span class="token string">'MainAxisAlignment.spaceEvenly 主轴方向上空白区域均分，元素之间和两边间距都相等'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h4 id="2、textDirection-属性"><a href="#2、textDirection-属性" class="headerlink" title="2、textDirection 属性"></a>2、textDirection 属性</h4><p>mainAxisAlignment 属性描述的 Row 主轴的内容的对齐方式，而 textDirection 描述的内容的摆放顺序，是从左到右还是从右到左 textDirection 只有两个属性：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> TextDirection <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// The text flows from right to left (e.g. Arabic, Hebrew).</span>  rtl<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 从左向右</span>  <span class="token comment" spellcheck="true">/// The text flows from left to right (e.g., English, French).</span>  ltr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 从右向左</span><span class="token punctuation">}</span></code></pre><p>下面看看 Demo 同样，我们封装一下由于只有两个属性，封装成一个组件即可：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_textdirection_common_code.png" alt="TextDirection 封装代码"></p><p>直接看效果吧</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_textdirection_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p>直接调用我们封装的组件即可：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">//  TextDirection.ltr 从左向向排列，也是默认方式</span><span class="token function">textDirectionWidget</span><span class="token punctuation">(</span>TextDirection<span class="token punctuation">.</span>ltr<span class="token punctuation">,</span><span class="token string">'我是文本 -> TextDirection.ltr'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 相当于 marginTop 为 10 </span><span class="token comment" spellcheck="true">//  TextDirection.rtl 从右向左排列</span><span class="token function">textDirectionWidget</span><span class="token punctuation">(</span>TextDirection<span class="token punctuation">.</span>rtl<span class="token punctuation">,</span><span class="token string">'我是文本 -> TextDirection.rtl'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h4 id="3、mainAxisSize-属性"><a href="#3、mainAxisSize-属性" class="headerlink" title="3、mainAxisSize 属性"></a>3、mainAxisSize 属性</h4><p>mainAxisSize 在 Row 组件上指的是主轴方向上的大小，它只有两个选项，大和小即屏幕等宽和包裹内容，默认是屏幕等宽的，同样封装一个组件来通过传参来设置 mainAxisSize</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_mainaxis_size_common_result.png" alt="mainAxisSize 组件封装"></p><p>看效果吧</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_mainaxis_size_result.png" alt="显示效果"></p><p>可以看到 mainAxisSize 两个属性区别</p><blockquote><p>核心代码</p></blockquote><p>直接调用封装好的组件即可</p><pre class=" language-dart"><code class="language-dart"><span class="token function">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mainAxisSizeSetiing</span><span class="token punctuation">(</span>MainAxisSize<span class="token punctuation">.</span>min<span class="token punctuation">,</span><span class="token string">'--> MainAxisSize.min 属性'</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token function">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mainAxisSizeSetiing</span><span class="token punctuation">(</span>MainAxisSize<span class="token punctuation">.</span>max<span class="token punctuation">,</span><span class="token string">'--> MainAxisSize.max 属性'</span><span class="token punctuation">)</span> <span class="token punctuation">,</span></code></pre><h4 id="4、crossAxisAlignment-属性"><a href="#4、crossAxisAlignment-属性" class="headerlink" title="4、crossAxisAlignment 属性"></a>4、crossAxisAlignment 属性</h4><p>Row 的侧轴方向对齐方式的属性「垂直方向」，默认是居中的，此属性和 mainAxisAlignment 属性用法基本相同，就不过多做介绍了,大概说一下，再配合效果图感受一下即可</p><pre class=" language-dart"><code class="language-dart">CrossAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span> 子控件显示在交叉轴的起始位置。CrossAxisAlignment<span class="token punctuation">.</span>end<span class="token punctuation">,</span> 子控件显示在交叉轴的末尾位置。CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span> 子控件显示在交叉轴的中间位置。CrossAxisAlignment<span class="token punctuation">.</span>stretch<span class="token punctuation">,</span> 子控件完全填充交叉轴方向的空间。CrossAxisAlignment<span class="token punctuation">.</span>baseline<span class="token punctuation">,</span> 让子控件的baseline在交叉轴方向对齐。</code></pre><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_crossaxis_result.png" alt="CrossAxisAlignment 属性效果图"></p><p><strong>PS：</strong> verticalDirection 属性会影响显示效果，此属性是决定垂直方向是从上向下还是从下向上的</p><h4 id="5、顺带说一下-Expanded-组件"><a href="#5、顺带说一下-Expanded-组件" class="headerlink" title="5、顺带说一下 Expanded 组件"></a>5、顺带说一下 Expanded 组件</h4><p>Expanded 组件一般就用在 Row/Column 或 Flex 组件中用来给空间权重「使用 flex 的值来给，默认是1」，看构造方法：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">Expanded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Key key<span class="token punctuation">,</span>    int flex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token metadata symbol">@required</span> Widget child<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> flex<span class="token punctuation">:</span> flex<span class="token punctuation">,</span> fit<span class="token punctuation">:</span> FlexFit<span class="token punctuation">.</span>tight<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们来实现如下效果图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_divider_equally_result.png" alt="横向均分并显示分隔线"></p><p>试想一下用前面的 Row 的基本知识可以实现吗？先尝试一下，肯定有的人说使用  MainAxisAlignment.spaceEvenly 非常容易实现，你可以尝试一下</p><p>这里我们使用 Expanded 就非常容易实现了，首先是等分的，那么我们使用 Expanded 的 flex　都为 1，如果熟悉 Android 的朋友其实这和 LinearLayout 中的子控件的 android:layout_weight 属性是一样的，我们将每个分隔的区域封装成一个组件吧</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_expand_commom_code.png" alt="Expanded 组件的封装"></p><p>我们给了一个可选参数 flex ,不传的时候默认就是 1 ，我们调用一下看看效果，并且有无分隔线是通过参数传过来的</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_expand_flex_code_001.png" alt="Row 水平均分并带分隔线"></p><p>效果就是我们开头看到的效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_divider_equally_result.png" alt="横向均分并显示分隔线"></p><p>我们再传递 flex 参数</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_expand_flex_code_002.png" alt="传递 flex 参数"></p><p>再看看效果</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/row_divider_not_equally_result.png" alt="传递 flex 参数显示效果"></p><p>可以看到权重按 1 2 3 去分隔了，注意 flex 是个整数不要传小数即可「下去自己可以慢慢玩」</p><h3 id="三、Column-实例"><a href="#三、Column-实例" class="headerlink" title="三、Column 实例"></a>三、Column 实例</h3><p>说完了 Row 组件感觉 Column 没什么说的，和 Row 组件属性一毛一样，只不过主轴是纵向的「垂直的」，侧轴是横向的，其实上面我们封装 Row 主轴方向上对齐方式的时候使用了 Column ，并且在 Text&amp;Image 中也大量使用了 Column 组件</p><p>我们来看看 Column 的 crossAxisAlignment「侧轴的对齐方式，也就是横向对齐方式」 属性</p><h4 id="crossAxisAlignment-属性"><a href="#crossAxisAlignment-属性" class="headerlink" title="crossAxisAlignment 属性"></a>crossAxisAlignment 属性</h4><p>crossAxisAlignment 是 Column 侧轴的对齐方式也就是水平对齐方式，默认是居中的「前提在背景宽度的基础上居中，废话居中肯定要有参照物」</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/column_corssaxis_result.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/column_corssaxis_result_code.png" alt="Column 水平居中属性代码"></p><h4 id="2、其它属性"><a href="#2、其它属性" class="headerlink" title="2、其它属性"></a>2、其它属性</h4><p>看看构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Key key<span class="token punctuation">,</span>    MainAxisAlignment mainAxisAlignment <span class="token operator">=</span> MainAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>    MainAxisSize mainAxisSize <span class="token operator">=</span> MainAxisSize<span class="token punctuation">.</span>max<span class="token punctuation">,</span>    CrossAxisAlignment crossAxisAlignment <span class="token operator">=</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>    TextDirection textDirection<span class="token punctuation">,</span>    VerticalDirection verticalDirection <span class="token operator">=</span> VerticalDirection<span class="token punctuation">.</span>down<span class="token punctuation">,</span>    TextBaseline textBaseline<span class="token punctuation">,</span>    List<span class="token operator">&lt;</span>Widget<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>    children<span class="token punctuation">:</span> children<span class="token punctuation">,</span>    key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>    direction<span class="token punctuation">:</span> Axis<span class="token punctuation">.</span>vertical<span class="token punctuation">,</span>    mainAxisAlignment<span class="token punctuation">:</span> mainAxisAlignment<span class="token punctuation">,</span>    mainAxisSize<span class="token punctuation">:</span> mainAxisSize<span class="token punctuation">,</span>    crossAxisAlignment<span class="token punctuation">:</span> crossAxisAlignment<span class="token punctuation">,</span>    textDirection<span class="token punctuation">:</span> textDirection<span class="token punctuation">,</span>    verticalDirection<span class="token punctuation">:</span> verticalDirection<span class="token punctuation">,</span>    textBaseline<span class="token punctuation">:</span> textBaseline<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从属性 <strong>direction: Axis.vertical</strong> 可以看到默认的方式就是垂直的，主要属性是</p><ul><li>mainAxisAlignment 主轴「纵向」的对齐方式</li><li>mainAxisSize 主轴「纵向」的大小，有包裹和尽量大</li><li>textDirection 文本对齐方式</li><li>verticalDirection 垂直方向方向</li><li>textBaseline 基线</li><li>children 要摆放的组件们</li></ul><p>其实 Column 组件真的没有什么好说的，把 Row 组件掌握了以后，Column 无非就是把 Row 换成纵向排列而已，就不一一写这些属性了，大家下去实操一下就好</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>本节主要说了 Flutter 两个布局类组件 Row 和 Column 是必须掌握的组件，我们来大概总结一下</p><p><strong>Row 组件</strong></p><ul><li>水平方向上布局子组件的，默认主轴是等屏幕宽，有多种对齐方式</li><li>侧轴的方向「垂直方向」对齐方式默认是居中的</li><li>textDirection 描述主轴的孩子组件摆放顺序</li><li>搭配 Expanded 来完成一些拆分效果</li></ul><p><strong>Column 组件</strong></p><ul><li>垂直方向上布局子组件的，默认主轴是等屏高度「如果不设置限制调试的话」，有多种对齐方式</li><li>侧轴的方向「水平方向」对齐方式默认是居中的</li><li>textDirection 描述主轴的孩子组件摆放顺序</li><li>同样也可以搭配 Expanded 来完成一些拆分效果</li></ul><p>好了本节就到此结束了，下去多写一下就了解了，想玩那个属性直接看其构造方法即可</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/从头整-Flutter/">从头开始整 Flutter</a></p><p><a href="https://mp.weixin.qq.com/s/Rq86mEHYoKSEnvSVisIfmw" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从头整 Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04、基本小部件-Container</title>
      <link href="/2019/07/25/flutter-container/"/>
      <url>/2019/07/25/flutter-container/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/container_struct.png" alt="本节大纲"></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是-Container"><a href="#一、什么是-Container" class="headerlink" title="一、什么是 Container"></a>一、什么是 Container</h3><p>在 Flutter 中宇宙万物都是组件，Container 也是一个组件，它类似于 Html 中的 div，Android 中的 ViewGroup，我们可以给　Container 的子组件设置一些边距、宽高、装饰等样式，一般情况下写一个组件直接套一个 Container 没什么大的问题「扩展性好一点」</p><h3 id="二、Container-的属性"><a href="#二、Container-的属性" class="headerlink" title="二、Container 的属性"></a>二、Container 的属性</h3><h4 id="1、Container-的属性及含义"><a href="#1、Container-的属性及含义" class="headerlink" title="1、Container 的属性及含义"></a>1、Container 的属性及含义</h4><p>学一个组件首先看其构造方法，以下就包括了 Container 构造方法中的属性</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>alignment</td><td>子控件 child 的对齐方式，这个方式可以影响背景宽度为等屏幕宽</td></tr><tr><td>padding</td><td>设置内边距,可以控制子控件 child 和 Container 的边距</td></tr><tr><td>color</td><td>用来设置 Container 的背景色,foregroundDecoration 可测会覆盖此属性，并全此属性不能和 decoration 同时设置</td></tr><tr><td>decoration</td><td>装饰器，是子控件 child 的后面的装饰，设置了此属性就不能设置 color，而应该使用 decoration 的 color 属性</td></tr><tr><td>foregroundDecoration</td><td>这个装饰器会绘制在 child 的上层</td></tr><tr><td>width</td><td>Container 的宽度，设置为 double.infinity 可以撑满屏幕宽度 如果不设置默认为子控件的宽度「前提要有 child」</td></tr><tr><td>height</td><td>Container 的高度 ，设置为 double.infinity 可以撑满屏幕高度,如果不设置默认为子控件的高度「前提要有 child」</td></tr><tr><td>constraints</td><td>添加到 child 上的一些结束，比如设置圆角、任何一边的边框等</td></tr><tr><td>margin</td><td>围绕在 decoration 和 child 之间的空白区域</td></tr><tr><td>transform</td><td>Container 的变换矩阵</td></tr><tr><td>child</td><td>包裹在 Container 的子控件，是一个 Widget</td></tr></tbody></table><h4 id="2、使用场景"><a href="#2、使用场景" class="headerlink" title="2、使用场景"></a>2、使用场景</h4><p>一般情况下在如下场景中使用 Container「当然也可能有替代方式」</p><ul><li>要设置内边距和外边距</li><li>要设置 child 的背景，或是圆角、边框、边框阴影等</li><li>要设置 child 的对齐方式，当然包一个 Align 组件也可以实现</li><li>设置背景图片</li></ul><p>有一个图可以形象的表示 Container 的使用场景</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/container_use_pic.jpg" alt="Container 的使用场景"></p><p><strong>PS:</strong> Container 如果没有设置 child 那么他默认的宽高是填充整个屏幕的</p><h3 id="三、Container-实例演练"><a href="#三、Container-实例演练" class="headerlink" title="三、Container 实例演练"></a>三、Container 实例演练</h3><p><strong>1、color 属性</strong></p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/simple_container.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/simple_container_code.png" alt="背景色和 Text 的 Container"></p><p><strong>2、padding 属性</strong></p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/padding_container.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/padding_container_code.png" alt="Container padding 属性"></p><p><strong>3、decoration 属性</strong></p><p>我们先看看 decoration 有那些扩展类</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/decoration_impl.png" alt="decoration 的扩展类"></p><p>我们用的比较多的就是 BoxDecoration ，顺便看一下他的构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">BoxDecoration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>image<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>border<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>borderRadius<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>boxShadow<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>gradient<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>backgroundBlendMode<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>shape <span class="token operator">=</span> BoxShape<span class="token punctuation">.</span>rectangle<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>可以看到盒子装饰可以设置颜色，图片，边框，边框圆角，边框阴影和形状等</p><h5 id="1、BoxDecoration-border-底边框"><a href="#1、BoxDecoration-border-底边框" class="headerlink" title="1、BoxDecoration border 底边框"></a>1、BoxDecoration border 底边框</h5><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/border_bottom_container.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/border_bottom_container_code.png" alt="border 底边框"></p><h5 id="2、BoxDecoration-border-四边框"><a href="#2、BoxDecoration-border-四边框" class="headerlink" title="2、BoxDecoration border 四边框"></a>2、BoxDecoration border 四边框</h5><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/border_container.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/border_container_code.png" alt="border 四边框"></p><h5 id="3、BoxDecoration-borderRadius-圆角"><a href="#3、BoxDecoration-borderRadius-圆角" class="headerlink" title="3、BoxDecoration borderRadius 圆角"></a>3、BoxDecoration borderRadius 圆角</h5><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/border_radius_container.png" alt="显示效果"></p><blockquote><p>核心代码 </p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/border_radius_container_code.png" alt="圆角设置"></p><h5 id="4、BoxDecoration-shape、boxShadow-形状和阴影"><a href="#4、BoxDecoration-shape、boxShadow-形状和阴影" class="headerlink" title="4、BoxDecoration shape、boxShadow 形状和阴影"></a>4、BoxDecoration shape、boxShadow 形状和阴影</h5><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/shap_boxshadow_container.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/shap_boxshadow_container_code.png" alt="设置形状和阴影"></p><h5 id="5、BoxDecoration-gradient-渐变"><a href="#5、BoxDecoration-gradient-渐变" class="headerlink" title="5、BoxDecoration.gradient 渐变"></a>5、BoxDecoration.gradient 渐变</h5><p>gradient 有三种形式渐变，LinearGradient「线性渐变」、RadialGradient 圆形渐变和 SweepGradient「扫描形渐变」，具体可以看其构造方法，渐变使用的频率不高，所以不重点说，这里举一个RadialGradient 的例子来画一个太阳吧</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/container_radialgradient_result.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/container_radialgradient_code.jpg" alt="渐变太阳核心代码"></p><p>其中 colors 是必须的，stops 不必须，但是如果同时出现的话，参数是对应起来「一样多」，关于渐变就说这么，感兴趣的可以下去仔细看看其它两个渐变</p><p><strong>4、constraints 属性</strong></p><p>constraints 属性对应的是 BoxConstraints 也就是对 Container 的宽高做一个限制，看看 BoxConstraints 的首个构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">BoxConstraints</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minWidth <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maxWidth <span class="token operator">=</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minHeight <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maxHeight <span class="token operator">=</span> double<span class="token punctuation">.</span>infinity  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>BoxConstraints 有许多构构方法常用的就是以下三个 tight loose 和 expand</p><h5 id="1、BoxConstraints-tight"><a href="#1、BoxConstraints-tight" class="headerlink" title="1、BoxConstraints.tight"></a>1、BoxConstraints.tight</h5><pre class=" language-dart"><code class="language-dart">BoxConstraints<span class="token punctuation">.</span><span class="token function">tight</span><span class="token punctuation">(</span>Size size<span class="token punctuation">)</span><span class="token punctuation">:</span> minWidth <span class="token operator">=</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>  maxWidth <span class="token operator">=</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>  minHeight <span class="token operator">=</span> size<span class="token punctuation">.</span>height<span class="token punctuation">,</span>  maxHeight <span class="token operator">=</span> size<span class="token punctuation">.</span>height<span class="token punctuation">;</span></code></pre><p>从构造方法中可以看到 BoxConstraints.tight 方法给定的 size 那么 min=max 没有区间</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/constraints_tight_container.png" alt="显示效果"></p><blockquote><p>核心代码 </p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/constraints_tight_container_code.png" alt="BoxConstraints.tight 举例"></p><h5 id="2、BoxConstraints-loose"><a href="#2、BoxConstraints-loose" class="headerlink" title="2、BoxConstraints.loose"></a>2、BoxConstraints.loose</h5><p>不废话看其构造方法</p><pre class=" language-dart"><code class="language-dart">BoxConstraints<span class="token punctuation">.</span><span class="token function">loose</span><span class="token punctuation">(</span>Size size<span class="token punctuation">)</span><span class="token punctuation">:</span> minWidth <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>  maxWidth <span class="token operator">=</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>  minHeight <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>  maxHeight <span class="token operator">=</span> size<span class="token punctuation">.</span>height<span class="token punctuation">;</span></code></pre><p>从构造方法中可以看到其最小宽高都是 0.0 最大度宽高为设置的 size </p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/constraints_loose_container.png" alt="显示效果"></p><blockquote><p>核心代码 </p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/constraints_loose_container_code.png" alt="BoxConstraints.loose 举例"></p><h5 id="3、BoxConstraints-expand"><a href="#3、BoxConstraints-expand" class="headerlink" title="3、BoxConstraints.expand"></a>3、BoxConstraints.expand</h5><p>构造方法如下</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> BoxConstraints<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">{</span>double width<span class="token punctuation">,</span>double height<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> minWidth <span class="token operator">=</span> width <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> width <span class="token punctuation">:</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span>  maxWidth <span class="token operator">=</span> width <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> width <span class="token punctuation">:</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span>  minHeight <span class="token operator">=</span> height <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> height <span class="token punctuation">:</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span>  maxHeight <span class="token operator">=</span> height <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> height <span class="token punctuation">:</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">;</span></code></pre><p>如果宽或高不设置则在其方向上等屏幕展示</p><blockquote><p>显示效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/constraints_expand_container.png" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/constraints_expand_container_code.png" alt="BoxConstraints.expand 举例"></p><p>可以看到此效果是高度为 120，宽度屏幕等宽</p><p><strong>5、foregroundDecoration 属性</strong></p><p>foregroundDecoration 顾名思义就是 child 的前景装饰，decoration、child、foregroundDecoration 三者的关系如下图所示</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/child_decoration_forground.jpg" alt="child 和两个 decoration 关系"></p><p>可以看到 foregroundDecoration 在 child 的上面，child 在 decoration 的上面，例子就不举了，decoration 我们说过了 foregroundDecoration 那还不是菜</p><h3 id="四、合理的使用-Container"><a href="#四、合理的使用-Container" class="headerlink" title="四、合理的使用 Container"></a>四、合理的使用 Container</h3><p>Container 虽然好用，包括你使用一些 Flutter 的插件「快速生成组件快捷键」生成组件的时候它会自动给你返回一个根组件为 Container「一般情况这往往是好的，因为加了 Container 扩展性变的很好」，但是也不能乱使用，一定要明白 Container 的使用场景，否则就会变得臃肿，必定使用的组件多了多少会对性能有些影响，它要渲染呀，我们来看一个例子效果如下：</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/container_use_suilt.png" alt="例子"></p><p>如果不合理的使用 Container 就会出现以下又臭又长的写法</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/container_use_not_suilt_code.jpg" alt="不合理使用 Container 代码"></p><p>看到了吧，实现上述效果图用了五个组件才搞定「有什么问题吗？在显示效果上来说真的没有什么问题，但是这样写很操蛋」，其实一个 Container 组件和一个 Text 组件足够了，我们来看应该如何精简</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/container_use_suilt_code.jpg" alt="合理的使用 Container 代码"></p><p>使用上面两个组件足以搞定效果图样式，所以写组件之前先画画或是在脑子里过一下不要直接就动手去整</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>这节我们说了一下 Container 组件「最常用的组件之一」，下面我们来总结一下 Container 的使用场景</p><ul><li>要给子组件设置部分样式</li><li>设置边框或圆角</li><li>设置渐变</li><li>设置内外边距</li><li>设置阴影 </li><li>设置背景图等</li></ul><p>再来看一下使用场景图</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/container_use_pic.jpg" alt="Container 的使用场景"><br>其中 Border 只是样式的一种体现而已「还有圆角等属性」</p><p>到此为之我们把 Container 大概就介绍完了，当然没有把所有的属性都介绍完比如 transform 「变换属性，就是一些旋转、放大、缩小等」，有兴趣的可以自己玩一把，下一节我们来说说 Row 和 Column 组件</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/从头整-Flutter/">从头开始整 Flutter</a></p><p><a href="https://mp.weixin.qq.com/s/HZyF2H_AQz6DSIs_fAirsA" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从头整 Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03、基本小部件-Text&amp;Image</title>
      <link href="/2019/07/22/flutter-text-image/"/>
      <url>/2019/07/22/flutter-text-image/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text&amp;Image_struct.png" alt="本节大纲"></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、组件化思想"><a href="#一、组件化思想" class="headerlink" title="一、组件化思想"></a>一、组件化思想</h3><p>我们前面说过 Flutter 是借鉴了 React 的组件化思想，一切皆组件「小部件」，在 Flutter 中一个个组件就是一个类「当然我们知道类就有属性和方法」，为什么要有组件化思想，这是前端的一大进步「可以说 React 功不可没」，组件化其实就是封装的粒度，把小小的按钮或是界面封装成一个个小组件便于维护和扩展「也便于团队协作」，团队中可以封装一些公共的组件，后期使用即可「一次编写，到处使用」，再重声一遍在 Flutter 中小部件和我们说的组件是一个东西「只不过我习惯说组件，保不齐会两者都说，大家知道是一个东西即可」</p><h3 id="二、Flutter-中的组件"><a href="#二、Flutter-中的组件" class="headerlink" title="二、Flutter 中的组件"></a>二、Flutter 中的组件</h3><p>Flutter 中的组件分为两种</p><h4 id="1、无状态组件"><a href="#1、无状态组件" class="headerlink" title="1、无状态组件"></a>1、无状态组件</h4><p><strong>无状态组件定义</strong></p><p>无状态组件就是不能修改状态的组件，也就是传递过去的值不能动态修改，我们说过组件是一个类，无状态组件就是继承 <strong>StatelessWidget</strong> 类的组件</p><p><strong>无状态组件声明</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">CustomWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Container</span><span class="token punctuation">(</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>即通过继承 StatelessWidget 类并重写其 build 方法就可以声明一个无状态组件「build 方法就相当于 React 中的 Render 方法」</p><h4 id="2、有状态组件"><a href="#2、有状态组件" class="headerlink" title="2、有状态组件"></a>2、有状态组件</h4><p><strong>有状态组件定义</strong></p><p>有状态组件和无状态组件是相对的即我们想动态修改数据的时候必须定义的组件，它是继承 <strong>StatefulWidget</strong> 类的组件</p><p><strong>有状态组件声明</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">CustomWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  _CustomWidgetState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_CustomWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_CustomWidgetState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>CustomWidget<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Container</span><span class="token punctuation">(</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>和无状态组件声明还是有点区别要重写 createState 方法并且重写 State 的 build 方法来构建界面</p><p>总之不管是无状态组件还是有状态组件都是通过重写 build 方法来构建界面的「至于底层是如何渲染界面的，后面专门开一篇来说」，以上两种定义组件的基本骨架一定要把它记下</p><h3 id="三、组件-Text-amp-Image"><a href="#三、组件-Text-amp-Image" class="headerlink" title="三、组件 Text &amp; Image"></a>三、组件 Text &amp; Image</h3><h4 id="1、文本组件-Text"><a href="#1、文本组件-Text" class="headerlink" title="1、文本组件 Text"></a>1、文本组件 Text</h4><p>先来个最简单的组件文本组件–Text 可以定义一个文本并且声明其颜色字体大小，颜色、对齐方式等样式</p><p><strong>Text 常用属性</strong></p><table><thead><tr><th align="left">属性</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">style</td><td align="left">文本的样式</td></tr><tr><td align="left">textAlign</td><td align="left">文本的对齐方式</td></tr><tr><td align="left">textDirection</td><td align="left">文本的装饰，比如下划线等</td></tr><tr><td align="left">locale</td><td align="left">用于选择区域特定字形的语言环境，很少使用</td></tr><tr><td align="left">softWrap</td><td align="left">是否自动换行，超出一行时设置</td></tr><tr><td align="left">overflow</td><td align="left">超出一行的处理方式，比如加…或是直接裁断</td></tr><tr><td align="left">textScaleFactor</td><td align="left">文本缩放的倍率</td></tr><tr><td align="left">maxLines</td><td align="left">设置文本的最大行数</td></tr><tr><td align="left">semanticsLabel</td><td align="left">图像描述</td></tr></tbody></table><p><strong>Text 例子</strong></p><h5 id="1-、普通文本"><a href="#1-、普通文本" class="headerlink" title="(1)、普通文本"></a>(1)、普通文本</h5><blockquote><p>不废话，先看效果</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_imgs_001.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_imgs_001_code.jpg" alt="普通文本组件代码"></p><h5 id="2-、文本居左对齐「默认方式」"><a href="#2-、文本居左对齐「默认方式」" class="headerlink" title="(2)、文本居左对齐「默认方式」"></a>(2)、文本居左对齐「默认方式」</h5><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_002.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_imgs_002_code.jpg" alt="文本居左对齐"></p><h5 id="3-、文本居右对齐"><a href="#3-、文本居右对齐" class="headerlink" title="(3)、文本居右对齐"></a>(3)、文本居右对齐</h5><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_imgs_003.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_imgs_003_code.jpg" alt="文本居右对齐"></p><h5 id="4-、文本样式-style-TextStyle"><a href="#4-、文本样式-style-TextStyle" class="headerlink" title="(4)、文本样式 style:TextStyle"></a>(4)、文本样式 style:TextStyle</h5><h6 id="（1）、字体颜色和文本大小-color-fontSize"><a href="#（1）、字体颜色和文本大小-color-fontSize" class="headerlink" title="（1）、字体颜色和文本大小 color/fontSize"></a>（1）、字体颜色和文本大小 color/fontSize</h6><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_style_001.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_style_0001_code.jpg" alt="文本大小和颜色"></p><h6 id="2-、字体加粗-fontWeight-FontWeight-bold"><a href="#2-、字体加粗-fontWeight-FontWeight-bold" class="headerlink" title="(2)、字体加粗 fontWeight:FontWeight.bold"></a>(2)、字体加粗 fontWeight:FontWeight.bold</h6><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_style_002.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_style_002_code.jpg" alt="字体加粗"></p><h6 id="3-、斜体字、字符间距、字或单词间距「加空格才有效果」"><a href="#3-、斜体字、字符间距、字或单词间距「加空格才有效果」" class="headerlink" title="(3)、斜体字、字符间距、字或单词间距「加空格才有效果」"></a>(3)、斜体字、字符间距、字或单词间距「加空格才有效果」</h6><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_004.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_004_code.jpg" alt="斜体字、字符间距、字或单词间距"></p><p>下面我们来看看文本装饰器 decoration</p><h6 id="4-、decoration-TextDecoration-overline-文本上划线"><a href="#4-、decoration-TextDecoration-overline-文本上划线" class="headerlink" title="(4)、decoration:TextDecoration.overline 文本上划线"></a>(4)、decoration:TextDecoration.overline 文本上划线</h6><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_005.jpg" alt="显示效果"></p><p><strong>PS:</strong> 线是直的，由于截图问题所以看起来线不直</p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_005_code.jpg" alt="文本上划线"></p><h6 id="5-、decoration-TextDecoration-lineThrough-文本删除线"><a href="#5-、decoration-TextDecoration-lineThrough-文本删除线" class="headerlink" title="(5)、decoration:TextDecoration.lineThrough 文本删除线"></a>(5)、decoration:TextDecoration.lineThrough 文本删除线</h6><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_006.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_006_code.jpg" alt="文本删除线"></p><h6 id="6-、decoration-TextDecoration-underline-文本下划线"><a href="#6-、decoration-TextDecoration-underline-文本下划线" class="headerlink" title="(6)、decoration:TextDecoration.underline 文本下划线"></a>(6)、decoration:TextDecoration.underline 文本下划线</h6><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_007.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_007_code.jpg" alt="文本下划线"></p><h6 id="7-、decoration-TextDecoration-underline-文本下划线，TextDecorationStyle-dashed：下划线样式为虚线"><a href="#7-、decoration-TextDecoration-underline-文本下划线，TextDecorationStyle-dashed：下划线样式为虚线" class="headerlink" title="(7)、decoration:TextDecoration.underline 文本下划线，TextDecorationStyle.dashed：下划线样式为虚线"></a>(7)、decoration:TextDecoration.underline 文本下划线，TextDecorationStyle.dashed：下划线样式为虚线</h6><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_img_008.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/text_imgs_008_code.jpg" alt="文本下划线为虚线"></p><p>到此我们就把 Text 组件大概说了一下，我们学习一个组件的时候，直接进去看它的构造方法就像查 API 一样学习，这样就能掌握此组件了，当然有的属性我们没有试，就留给读者吧，下面我看看 Image 组件</p><h4 id="2、图片组件-Image"><a href="#2、图片组件-Image" class="headerlink" title="2、图片组件 Image"></a>2、图片组件 Image</h4><p><strong>Image 的若干构造方法</strong></p><p>在一个应用中除了文本之外使用最多的就是图片组件了，上面说了，学习一个组件就是看它的构造方法，不废话我们直接看 Image() 的构造方法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">Image</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Key key<span class="token punctuation">,</span>    <span class="token metadata symbol">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>image<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>frameBuilder<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadingBuilder<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>semanticLabel<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>excludeFromSemantics <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colorBlendMode<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fit<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>repeat <span class="token operator">=</span> ImageRepeat<span class="token punctuation">.</span>noRepeat<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>centerSlice<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>matchTextDirection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>gaplessPlayback <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>filterQuality <span class="token operator">=</span> FilterQuality<span class="token punctuation">.</span>low<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>我们可以看到 Image 有众多属性，有宽、高、颜色、填充方式等等，我们知道图片的来源有很多种，有来自本地图片，有来自网络图片，有来自内存的图片，上面的构造方法是从 ImageProvider 中加载图片，什么是 ImageProvider 后面会说，根据以上说的图片来源方式，Image 的构造方法分为以下几种：</p><ul><li>Image() 上面贴出了全部构造方法参数，从 ImageProvider 中加载图片</li><li>Image.asset() 从资源包资源目录中加载本地图片</li><li>Image.network() 顾名思义从网络加载图片</li><li>Image.file() 从文件中加载图片</li><li>Image.memory() 从 Uint8List「一个高效的 byte 数组存储类，存储图片二进制可以缩短转换时间」 中加载图片</li></ul><p>其它的构造方法就不贴出来了，有兴趣可以仔细去看看</p><p><strong>Image 例子</strong></p><p>#####（1）、Image.asset()</p><p>在使用 Image.asset() 方法来加载本地资源目录中「一般创建叫 assets 目录，当然可以叫别的名字」的图片之前我们先要在项目根目录下创建 assets 目录</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_asset_folder.jpg" alt="新建 assets 目录"></p><p>如图所示创建 assets 目录「当然你可以直接在里面放进图片，也可以分别建立子目录放图片，不一定非要和我一样创建 imgs/img 这样的目录，并且主目录也不一定非叫 assets 」，这还没完还要在 pubspec.yaml 文件中配置才可以使用</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">flutter</span><span class="token punctuation">:</span>  // 在此命令下面配置<span class="token key atrule">assets</span><span class="token punctuation">:</span> // 名字不能变 <span class="token punctuation">-</span> assets/images/ <span class="token punctuation">-</span> assets/images/image/</code></pre><p><strong>ps：</strong> 如果在 assets 目录下有子目录就要像上面配置先配置主目录再配置子目录，如果有多个目录类似配置即可，使用的时候我可以使用 Image.asset(‘assets/imgs/img/xxx.png’) 加载即可</p><p>为了方便，我们将图片路径定义成一个常量方便调用</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> _PATH <span class="token operator">=</span> <span class="token string">"assets/imgs/img"</span><span class="token punctuation">;</span><span class="token keyword">const</span> _IMG04 <span class="token operator">=</span> <span class="token string">"$_PATH/img_04.png"</span><span class="token punctuation">;</span><span class="token keyword">const</span> _IMG06 <span class="token operator">=</span> <span class="token string">"https://xxx.yyy.zzz.jpg"</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 网络图片</span></code></pre><p>下面看看我们使用 Image.asset() 加载图片的一个效果</p><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_001.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_001_code.jpg" alt="Image.asset 演示代码"></p><p>#####（2）、Image.network()</p><p>用法和 Image.asset() 一样，只不过图片的来源是网络而已，直接看效果吧</p><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_002.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_002_code.jpg" alt="Image.network 代码"></p><p>细心的朋友可能会发现，我们给图片设置和宽高都是 100 但是貌似没有起什么作用，这就和我们接下来说的 fit 属性有关系，如果不设置 fit 属性就看不到设置的宽高效果。</p><p>#####（3）、Image fit 属性</p><p>我们可以大概的看看源码查看 fit 属性 可以看到默认的属性是在 paintImage 中的</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_paintImage.jpg" alt="paintImage"></p><p>我们稍微看看 paintImage 的构造方法，其中有 fit 的初始化操作</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_fit_defalut.jpg" alt="fit 初始化"></p><p>我们可以看到如果不设置 centerSlice 属性那么默认图片的 fit 属性是 BoxFit.scaleDown 类型的 centerSlice 是图片的内部拉升，一般是针对 .9 图片的，至于 BoxFit.scaleDown 是什么样式的我们后面会说，这下我们就了解了设置了宽高，但是没有给 fit 属性宽高就没有起实际作用的原因了吧</p><h6 id="1-、Image-fit-属性"><a href="#1-、Image-fit-属性" class="headerlink" title="(1)、Image fit 属性"></a>(1)、Image fit 属性</h6><p>总的来说 fit 有以下属性</p><ul><li>BoxFit.fill 全图显示，图片会被拉升，并充满父容器</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/box_fit_fill.png" alt="box_fit_fill"></p><ul><li>BoxFit.fitWidth 宽度充满（横向充满），显示可能拉伸，高度调试可能裁切。</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/box_fit_fitWidth.png" alt="box_fit_fitWidth"></p><ul><li>BoxFit.fitHeight 高度充满（竖向充满）,显示可能拉伸，宽度可能裁切</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/box_fit_fitHeight.png" alt="box_fit_fitHeight"></p><ul><li>BoxFit.cover 显示可能拉伸，可能裁切，充满（图片要充满整个容器，还不变形）。</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/box_fit_cover.png" alt="box_fit_cover"></p><ul><li>BoxFit.contain 全图显示，显示原比例，可能会有空隙。</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/box_fit_contain.png" alt="box_fit_contain"></p><ul><li>BoxFit.scaleDown 效果和contain差不多，但是此属性不允许显示超过源图片大小，可小不可大</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/box_fit_scaleDown.png" alt="box_fit_scaleDown"></p><ul><li>BoxFit.none 图片居中显示，不改变分大小，可能会被截断。</li></ul><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/box_fit_none.png" alt="box_fit_none"></p><h6 id="2-、Image-fit-属性实例"><a href="#2-、Image-fit-属性实例" class="headerlink" title="(2)、Image fit 属性实例"></a>(2)、Image fit 属性实例</h6><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_fit.jpg" alt="显示效果"></p><p>可以看到我们把 fit 的所有属性都罗列出来</p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/mig_boxfit_fill_code.jpg" alt="BoxFit.fill 代码"><br><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_BoxFit_fillWidth.jpg" alt="BoxFit.fillWidth 代码"><br><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_BoxFill_fillHeight.jpg" alt="BoxFit.fillHeight 代码"><br><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_BoxFill_cover.jpg" alt="BoxFit.cover 代码"><br><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_BoxFill_contain.jpg" alt="BoxFit.contain 代码"><br><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_BoxFill_scaleDown.jpg" alt="BoxFit.scaleDown 代码"><br><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_BoxFill_none.jpg" alt="BoxFit.none 代码"></p><p>这没什么好说的，尝试写一下感受一下「代码中我们用了大量的 Container 组件，它就相当于 html 中的 Div 下节我们再具体的介绍」，我们在实际项目中开发中，还会遇到圆角图片，圆形图片等，接下来我们看看如何实现</p><p>#####（3）、Image 圆形、圆角图片</p><p>实现圆形图片不止一种方式，我们来看看有那些方式可以实现圆形图片</p><p><strong>圆形图片</strong></p><h6 id="（1）、ClipOval、BoxDecoration-分别实现圆形图片"><a href="#（1）、ClipOval、BoxDecoration-分别实现圆形图片" class="headerlink" title="（1）、ClipOval、BoxDecoration 分别实现圆形图片"></a>（1）、ClipOval、BoxDecoration 分别实现圆形图片</h6><p>ClipOval 圆形剪裁使用其可以实现圆形图片，也可以使用 Container「下节我们具体介绍，这节先知道有这么个组件就好」 的盒子装饰来实现圆形图片，我们来看看效果图</p><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_circle_001.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_cricle_001_code.jpg" alt="ClipOval、BoxDecoration 圆形图代码"></p><h6 id="（2）、CircleAvatar-现圆形图片"><a href="#（2）、CircleAvatar-现圆形图片" class="headerlink" title="（2）、CircleAvatar 现圆形图片"></a>（2）、CircleAvatar 现圆形图片</h6><p>从字面意思就可以看出来 CircleAvatar 是圆形头像的意思，我们可以用其来设置圆形图片，具体组件的构造方法就不看了，下来了可以具体研究「要是把所有组件的构造方法都说一遍，那就不要开发项目了，光看完所有组件都得几个月」</p><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_circle_002.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_circle_002_code.jpg" alt="CircleAvatar 实现圆形图片"></p><p><strong>圆角图片</strong></p><p>同样实现圆角图片也有多种方式可以使用 ClipRRect「矩形裁剪」来实现，也可以使用 Container 的 BoxDecoration 来实现</p><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_border_radius.jpg" alt="显示效果"></p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_cliprrect_code.jpg" alt="ClipRRect 实现圆角"></p><p>使用 ClipRRect 其 borderRadius 就可以实现圆角图片，当然可以选择性的设置四个角那个需要圆角</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_border_raduis_002_code.jpg" alt="Container 的 BoxDecoration 实现圆角"></p><p>#####（3）、Image 的占位图 FadeInImage 的 placeholder</p><p>我们在实际开发中可能会在显示图片之前添加一个默认的图片来占位，那么我们使用 FadeInImage 组件来完成，FadeInImage 组件图片可以来自任何地方：内存、本地，文件和网络，同样 FadeInImage 有多个构造方法「感兴趣可以下去仔细看一下」</p><blockquote><p>效果图</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_FadeInImage_placeholder.jpg" alt="显示效果"></p><p>在此 demo 中我们使用本地图片做为 placeholder 占位图，你可以试试其它的方式</p><blockquote><p>核心代码</p></blockquote><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_FadeInImage_placeholder_001_code.jpg" alt="使用 FadeInImage 实现占位图代码"><br><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/img_FadeInImage_placeholder_002_code.jpg" alt="使用 FadeInImage 实现占位图代码"></p><h5 id="4-、Image-其它属性"><a href="#4-、Image-其它属性" class="headerlink" title="(4)、Image 其它属性"></a>(4)、Image 其它属性</h5><p>除了以上 Image 的属性之外，还有 alignment、repeat、centerSlic、matchTextDirection 等属性，有兴趣的可以都试一下「这里不展开说了，只要学会方法即可，学一个组件就看其构造方法，然后一个个的试看到结果自然就领会了」</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>本节我们介绍了 Flutter 中最常见的两个组件 Text 和 Image 分别介绍了它们的常见的用法，当然没有把每个属性都介绍完，如果把每个属性都介绍完，估计又得单独再开一篇文章来说了，如果我们在使用的过程想知道组件的用法和属性直接看其构造方法就可以「就像查 API 一样」，本节就到此为止，文中的代码全部以图片的形式给出就是为了让大家动手敲一遍「后面整理完了会给出组件的 demo 源码」，下节我们来说 Container 组件</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/从头整-Flutter/">从头开始整 Flutter</a></p><p><a href="https://mp.weixin.qq.com/s/LZdHDef-M_yrXPRfeYHwaQ" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从头整 Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03、Vue 组件</title>
      <link href="/2019/07/19/vue/vueinstruction/"/>
      <url>/2019/07/19/vue/vueinstruction/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/19/vue/vueinstruction/vue_component_struct.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/手把手教Vue/">TigerChain  手把手教Vue</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li><li>3、Demo 地址:<a href="https://github.com/tigerchain/vue-lesson" target="_blank" rel="noopener">https://github.com/tigerchain/vue-lesson</a> 请看 02、vue组件 组件这一节</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是组件"><a href="#一、什么是组件" class="headerlink" title="一、什么是组件"></a>一、什么是组件</h3><p>Vue 玩的就是组件，如果看过我　React 文章的朋友对组件肯定不会陌生。其实我们的应用界面就是由一个个组件构成的。</p><p>举个栗子，我们就以手淘首页部分界面为例子来说</p><img src="/2019/07/19/vue/vueinstruction/taobao-component.png" title="淘宝组件"><p>从图中我们可以直观的看到，这些框出来的就可以开发成一个个组件，然后把这些组件合并在一起就完成首页了「淘宝不一定是这样的做的，这里只是为了让大家直观的感受一下什么是组件」</p><h3 id="二、Vue-中组件的形式"><a href="#二、Vue-中组件的形式" class="headerlink" title="二、Vue 中组件的形式"></a>二、Vue 中组件的形式</h3><p>在 Vue 中有四种组件形式，分别是全局组件、局部组件、嵌套组件和单个组件，下面我们一一来看</p><h4 id="1、全局组件"><a href="#1、全局组件" class="headerlink" title="1、全局组件"></a>1、全局组件</h4><blockquote><p>1、全局组件含义和使用方法</p></blockquote><p>全局组件，顾名思义，就是本页「所有 vue 实例中」都可以使用的组件</p><p>注册全局组件方法如下 </p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'组件名称'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  模版和方法等<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>我们可以使用 Vue.extend() 函数「也可以不用，直接使用 Vue.component()」来创建一个 Vue 的构造器「注意它不是 Vue 实例」</p><blockquote><p>2、直接撸码感受一下全局组件「引入 vue.js 这里就不说了，直接上核心代码」</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>vue-component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>爱吃什么水果？ app 实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todolist</span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todolist</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>爱吃什么水果？ app2 实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todolist</span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todolist</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>爱吃什么水果？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    组件没有在任何实例中，所以不显示 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>「组件一定要挂载到某个 Vue 实例中，否则不会生效」<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todolist</span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todolist</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 定义一个组件构造器，不是实例</span>    <span class="token keyword">var</span> todolist <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span><span class="token string">'&lt;div>&lt;li v-for="(item,index) in datas" @click="showName(index)">{{item.text}}&lt;/li>&lt;/div>'</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          datas<span class="token punctuation">:</span><span class="token punctuation">[</span>           <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'苹果'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'香蕉'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'只要是水果我都爱吃'</span> <span class="token punctuation">}</span>         <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 组件的方法</span>      methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">showName</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>datas<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 全局组件注册</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todolist'</span><span class="token punctuation">,</span>todolist<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定义一个 Vue 实例</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// data:{}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定义另一个 Vue 实例</span>    <span class="token keyword">var</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">'#container2'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>从上面的代码中我们可以看出来，我们使用 Vue.extend() 函数创建了一个 Vue 构造器，并且使用全局注册组件方式注册了组件，还声明了三个 div ，两个 Vue 实例，我们来看看运行结果吧</p><img src="/2019/07/19/vue/vueinstruction/global-v-component.png" title="Vue 全局组件"><p>从结果上我们可以看出:</p><ul><li>1、 前两个 Div 都把 todolist 组件渲染出来了，这就说明了 todolist 是一个全局组件，在所有的 Vue 实例中都可以使用，但是在第三个 div 中却没有渲染出来，因为组件必须挂载到 Vue 实例中「很明显组件没有挂载到第三个 div」中。</li><li>2、组件可以看成一个 Vue 实例，里面可以写 methods ，可以写 template 模版，并且可以定义数据「但是这里 data 一定要写成函数，并且在 return 中写数据」，当然以后 props 等都可以写</li></ul><h4 id="2、局部组件"><a href="#2、局部组件" class="headerlink" title="2、局部组件"></a>2、局部组件</h4><blockquote><p>1、局部组件和使用方法</p></blockquote><p>我们使用 Vue 对象的 components 属性来实现局部组件注册，顾名思义局部组件就是只能在本对象中使用的组件，模版如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#myapp'</span><span class="token punctuation">,</span>  <span class="token operator">...</span>  <span class="token comment" spellcheck="true">// 把组件注册到本 Vue 实例下</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'组件别名'</span><span class="token punctuation">:</span> 组件名<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>2、代码中体验局部组件</p></blockquote><ul><li>1、我们接着上面的代码直接修改，修改的地方很简单，如下所示：</li></ul><img src="/2019/07/19/vue/vueinstruction/modify-part-component.png" title="全局组件改造成局部组件"><ul><li>2、运行查看结果：</li></ul><img src="/2019/07/19/vue/vueinstruction/part-component.png" title="Vue 局部组件"><p>可以看到，只有 app 实例下正确的加载了 todolist 组件，别的没有加载「这就是局部组件」</p><ul><li>3、注意</li></ul><p>我们如果在 app2 中使用局组件 todolist 是不会显示的，我们的 demo 强行使用，是为了演示效果，其实浏览器已经报错了，如下：</p><img src="/2019/07/19/vue/vueinstruction/other-vue-usecomponent.png" title="其它 vue 实例使用局部组件报错"><p>大概意思就是找不到 todolist 组件，你是否正确注册的意思</p><h4 id="3、嵌套组件「组合组件」"><a href="#3、嵌套组件「组合组件」" class="headerlink" title="3、嵌套组件「组合组件」"></a>3、嵌套组件「组合组件」</h4><blockquote><p>1、嵌套组件「组合组件」的含义和使用方法</p></blockquote><p>我们可以在一个组件中嵌套另一个组件，也就是在组件中定义 components 并且传入子组件即可，一般使用方法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义一个组件</span><span class="token keyword">var</span> customcomponent <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">'&lt;div>。。。。&lt;/div>'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> parentcomponent <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模版中就可以使用子组件了</span>    template<span class="token punctuation">:</span> <span class="token string">'&lt;div>你类组件的一些模版 &lt;custom-component>&lt;/custom-component>&lt;/div>'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 把子组件注册到父类组件中</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'custom-component'</span><span class="token punctuation">:</span>customcomponent    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>基本使用方法就是如此，当然我们可以加入 methods 等属性和方法</p><blockquote><p>2、撸码看效果</p></blockquote><p>我们在上面的代码的基础上修改如下三个地方：</p><img src="/2019/07/19/vue/vueinstruction/com-component.png" title="嵌套组件"><p>分为三个步骤：</p><ul><li>1、定义组件</li><li>2、注册组件</li><li>3、使用组件</li></ul><p>运行查看结果：</p><img src="/2019/07/19/vue/vueinstruction/child-component-result.png" title="嵌套组件显示结果"><p>我们可以看到，子组件在 todolist 组件中显示出来了，这样嵌套组件就完成了</p><h4 id="4、单个组件"><a href="#4、单个组件" class="headerlink" title="4、单个组件"></a>4、单个组件</h4><p>我们通上以上方式就可以实现组件化 Vue ，但是如果在大型项目中这样使用会让人感觉到 T 疼，全部组件写在一个页面中，难维护，难查阅。那么有就第 4 种方式–单个组件，什么是单个组件，也就是定义一个后缀为 .vue 的文件，然后把模版、js、style 都写在这个文件中，这就是单个组件，我们开始吧</p><blockquote><p>1、创建一个单个组件的项目</p></blockquote><p>如果看过第一节的朋友应该知道，我们通过 vue-cli 能快速创建一个 vue 项目，并且里面单个组件等全部都为你生成了，下面我们通过自己手动来模拟一个类似于 vue-cli 创建出来的项目这么一个过程，直接上代码</p><ul><li>1、新建一个文件夹–myvuedemo</li></ul><pre class=" language-bash"><code class="language-bash">// 命令行输入，无论是 windows 还是 mac <span class="token function">mkdir</span> myvuedemo<span class="token function">cd</span> myvuedemo </code></pre><ul><li>2、使用 yarn 初始化项目「当然也可以使用 npm ，yarn 和 npm 的安装以前在 React 教程中说过，不清楚的可以自行百度一下」</li></ul><pre class=" language-bash"><code class="language-bash">yarn init </code></pre><p>一路回车即可，目录如下：</p>{% asset_img yarn-init-vue.png myvuedemo目录 %}<p>我们可以看到使用 yarn init 初始代项目，就多了一个 package.json 文件</p><ul><li>3、在 myvuedemo 目录下新建 src 和 dist 目录，并且新建 index.html 文件</li></ul>{% asset_img create-src-dist.png 创建相关目录 %}<ul><li>4、安装依赖</li></ul><p>在前面我们都是使用引信　vue.js 的方式来使用 vue 的，现在我们安装依赖的方式来使用 vue ，所以我们要安装一些依赖，在 myvuedemo 目录下使用如下命令</p><pre class=" language-bash"><code class="language-bash">yarn add vue</code></pre><p>安装 webpack 和 webpack-dev-server，由于我们在开发环境中需要，所以在开发环境下安装依赖「生产环境中是不需要的」</p><pre class=" language-bash"><code class="language-bash">yarn add webpack webpack-dev-server --dev</code></pre><p>我们查看 package.json 文件，就会看到依赖安装上了，如下所示：</p>{% asset_img yarn-add-dependencies.png 安装部分依赖 %}<ul><li>5、在 index.html 输入以下内容 </li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>我们定义了一个 id 为 container 的 div 并且，引入了打包后的　bundle.js</p><ul><li>6、在 src 中新建 main.js</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#container'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span>h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span><span class="token string">'HelloWorld'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>以上代码就是把 helloWorld 渲染到 id 为 container 的 div 中</p><ul><li>7、在根目录下新建 webpack.config.js 并配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 入口文件</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 输出</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/dist/'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 名字叫 bundle.js</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 导入的时候就可以不添加后缀后了</span>  resolve<span class="token punctuation">:</span><span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//webpack-dev-server配置</span>    historyApiFallback<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不跳转</span>    noInfo<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//实时刷新</span>    hot<span class="token punctuation">:</span><span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>好了基本上完成了，下面我们来测试一下</p><ul><li>8、查看结果</li></ul><p>在目录所在的命令行中输入以下命令</p><pre class=" language-bash"><code class="language-bash">webpack-dev-server --port 8888 --open --hot</code></pre><p>输入上述命令就会自动打开浏览器，并且显示出 HelloWorld 来，我们一个简单的基于 webpack 的 vue demo 就是跑起来了</p>{% asset_img webpack-vue-helloworld.png webpack 的 vue demo 结果 %}<p>这好像跟组件没有半毛钱关系呀，不要急，我们接着来「就不休息了」</p><ul><li>9、我们在 src 中新建一个 first.vue</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template lang<span class="token operator">=</span><span class="token string">"html"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    我是一个单个组件  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"css"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>以上是一个标准的 vue 组件，并且把这个组件暴露出来，这就是一个单组件</p><ul><li>10 、在 main.js 引入 first.vue 组件，修改 main.js</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token punctuation">;</span><span class="token keyword">import</span> first <span class="token keyword">from</span> <span class="token string">'./first'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#container'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span>h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>我们来运行一下，看结果</p><img src="/2019/07/19/vue/vueinstruction/babel-loader-error.png" title="babel-loader 错误"><p>挂了，从图可以看出说我们缺少 babel-loader「就是用来转化 es6 语法的」，我们安装一下 babel-loader 并配置　webpack</p><p>安装 babel-loader「babel 依赖于 babel-core 我们一同安装」</p><pre class=" language-bash"><code class="language-bash">yarn add babel-loader babel-core --dev</code></pre><p>配置 webpack.config.js「配置在 module 的 rules 下面」</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>   test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>   exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>   loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span> <span class="token punctuation">}</span></code></pre><p>再运行结果</p><img src="/2019/07/19/vue/vueinstruction/vue-loader-error.png" title="vue-loader 错误"><p>靠，又挂了，不过这次说的是 vue-loader 的问题，什么是 vue-loader 呢？先说一下 loader 吧,webpack 里面的 loader 的作用就是资源转化，由于 webpack 默认支持 js ，如果你想转化 vue 为 js 模版，那么就要使用 vue-loader ，如果你想把　css 转化成原生的　css 那么就要使用 style-loader 等</p><p>vue-loader 是一个加载器，能把以上的类似于 first.vue 组件转化成 JavaScript 模块。这里不过多的介绍 vue-loader。可自行百度，或者我抽出一篇把 webpack 大概说一下</p><ul><li>11、安装 vue-loader</li></ul><p>我们安装 vue-loader</p><pre class=" language-bash"><code class="language-bash">yarn add vue-loader --dev</code></pre><p>运行查看结果：</p>{% asset_img vue-template-compiler-error.png vue-template-compiler错误 %}<p>疯了，还报错，但是 vue-loader 错误没有了，这是一个新的错误，说找不到 vue-template-compiler「它就是一个把 vue2.0 模版预编译为渲染函数，避免开销」</p><p>好吧，没有办法，我们安装一下</p><pre class=" language-bash"><code class="language-bash">yarn add vue-template-compiler --dev</code></pre><p>再次运行查看结果：</p><img src="/2019/07/19/vue/vueinstruction/single-component-result.png" title="单个组件显示"><p>不容易呀，终于显示出来了，不过不要激动，还有一些问题，我们看 chrome 的 cosole 中显示下面错误</p><img src="/2019/07/19/vue/vueinstruction/css-loader-error.png" title="css-loader 错误"><p>说的是找不到　css-loader,为什么呢？由于我们使用 vue 的单个组件里面使用了 style 标签，识别不到，就要使用 css-loader，我们安装一下</p><pre class=" language-bash"><code class="language-bash">yarn add css-loader --dev</code></pre><p>我们知道安装完 loader 一定要配置一下 webpack , 在　webpack.config.js 中的 module 下的 rules 下添加</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>    test: /\.css$/,    loader: <span class="token string">'style-loader!css-loader'</span><span class="token punctuation">}</span>,</code></pre><p>继续运行查看结果：</p><img src="/2019/07/19/vue/vueinstruction/single-component-result.png" title="添加 css-loader 结果]"><p>完美，调试窗口也没有报错，这样我们就一步一步搭建了一个 类似于 vue-cli 创建 vue 项目「当然没有 vue-cli 那样的完善」</p><ul><li>12、我们再建一个组件来丰富一下此 demo 吧</li></ul><blockquote><p>我们定义一个名为 login.vue 的组件</p></blockquote><pre class=" language-vue"><code class="language-vue"><template lang="html"><div >  <h4>我是登录组件，包含在　first.vue 组件中</h4>  用户名:<input type="text" name="" value="" placeholder="用户名" v-model="username"> <br/>  密&nbsp;&nbsp;&nbsp;码:<input type="password" name="" value="" placeholder="密码" v-model="userpass"><br/>  <div >      <button type="button" name="button" class="loginbutton" @click="login()">登录</button>      <button type="button" name="button" class="resetbutton" @click="reset()">重置</button>  </div>  {{showmessage}}</div></template><script>export default {  name: 'login',  data() {    return {      // 用户名      username:'',      // 密码      userpass: '',      // 显示信息      showmessage:''    }  },  methods: {    login() {      if(this.username.length==0 || this.userpass.length==0){        this.showmessage = '用户名或密码不能为空！'        return      }      this.showmessage = "欢迎 "+this.username+" 登录"      this.username = ''      this.userpass = ''    },    reset() {      this.username = ''      this.userpass = ''      this.showmessage = ''    }  }}</script><style lang="css" scoped>  .loginbutton{    background: red;  }  .resetbutton{    background-color: green;  }</style></code></pre><blockquote><p>修改 first.vue 组件「引入 login.vue 组件并且使用」</p></blockquote><img src="/2019/07/19/vue/vueinstruction/use-login-component.png" title="引入 login.vue 组件"><blockquote><p>运行查看结果</p></blockquote><img src="/2019/07/19/vue/vueinstruction/use-login-component.gif" title="引入 login.vue 组件结果"><p>从以上结果可以看到，我们不仅在 first.vue 中引入了 login.vue 组件，而且 login.vue 组件的方法和事件完美运行</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>本节我们着重介绍了 vue 最重要的特性之一 — 组件，并用知道了 vue 中的组件有四种形式</p><ul><li>1、全局组件–在所有的 vue 实例中都可以使用</li><li>2、局部组件–只能在指定的 vue 实例中使用</li><li>3、嵌套组件–一个组件中可以嵌套另一个组件</li><li>4、单个组件–通过手写类 vue-cli 实现一个 vue demo 并且通过编写单个组件进行组件之间的组合</li></ul><p><strong>PS:</strong> 我们在开发中，尽量使用单个组件的方式进行开发，这样不仅好维护并且方便阅读，更便于团队之间的协作</p><p>到此为止，我们把 vue 的组件就介绍完了，赶紧撸起袖子写一写吧</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/手把手教Vue/">手把手教Vue</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/vue-lesson" target="_blank" rel="noopener">手把手教 Vue</a> 方便大家查看，欢迎大家 fork，喜欢的话给个 star </p><p><a href="https://mp.weixin.qq.com/s/X23REqDLOKSEjQSHBX83Rw" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 手把手教Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02、Vue 常见指令</title>
      <link href="/2019/07/14/vue/vueinstruction/"/>
      <url>/2019/07/14/vue/vueinstruction/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/14/vue/vueinstruction/vue_instruction_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/手把手教Vue/">TigerChain  手把手教Vue</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、Vue-的实例"><a href="#一、Vue-的实例" class="headerlink" title="一、Vue 的实例"></a>一、Vue 的实例</h3><p>通过上节课，我们知道如何引入 Vue 来工作，初学者不建议使用 vue-cli 来创建项目，在这里我们使用引入 script 来编写 Vue demo</p><p>Vue 完全可以看作是面向对象的语言，我们创建一个 Vue 的实例一般是这样做的</p><pre class=" language-vue"><code class="language-vue">var vm = new Vue({  // 数据  data:{  }，  methods:{      // 方法  }，  等等其它 })</code></pre><p>我们可以看到 – data 作为属性、methods 作为方法，new Vue 就是一个实例对象，这样理解 Vue 就会很轻松「如果有面向对象的基础」</p><h3 id="二、什么是指令"><a href="#二、什么是指令" class="headerlink" title="二、什么是指令"></a>二、什么是指令</h3><p>传统意义上的指令就是指挥机器工作的指示和命令，vue 中的指令一般是以 v- 开头</p><p>vue 中的指令的职责是，当表达式的值改变时，会响应式的对 DOM 产生影响</p><p>在开始指令之前，我们先来一个 helloWorld 来直观的感受下下 Vue 吧</p><h4 id="1、先来一个-HelloWorld"><a href="#1、先来一个-HelloWorld" class="headerlink" title="1、先来一个 HelloWorld"></a>1、先来一个 HelloWorld</h4><p>在这里我使用 atom 来开发</p><blockquote><p>1、新建一个目录，并且导入 vue.js 如下</p></blockquote><img src="/2019/07/14/vue/vueinstruction/floder_1.png" title="基本目录"><blockquote><p>2、打开 index.html，输入以下内容</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Vue 的指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">2</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">2</span>px dashed <span class="token hexcode">#0066CC</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./instructions/hello.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>以上是核心代码，body 中的代码「没有写 html 标准模版代码，完整的可以看 index.html界面」</p><blockquote><p>3、在 js 目录下引入 vue.js 文件「在官方上下载」</p></blockquote><img src="/2019/07/14/vue/vueinstruction/include_vue.png" title="添加 vue.js"><blockquote><p>4、在 instructions 目录下新建 hello.html</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue--hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">'#container'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>        msg<span class="token punctuation">:</span><span class="token string">'hello world'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>5、查看一下结果吧，这里我们使用 browser-sync 来启动一个服务「帮你解决手动刷新的困扰，看过我 react 系列的应该非常熟悉」,这里不过多介绍 browser-sync , 了解更多请查看官网：<a href="http://www.browsersync.cn" target="_blank" rel="noopener">http://www.browsersync.cn</a></p></blockquote><p>打开命令行，在根目录下输入 </p><pre><code>vue-study/vue-lesson/01、基本指令 // 在当前目录▶ browser-sync start --server --files "**/*.css, **/*.html"</code></pre><img src="/2019/07/14/vue/vueinstruction/browser_sync_start.png" title="查看结果"><p>就会自动打开默认浏览器，然后界面就出来了，往后你修改的内容，不用 F5 不用刷新，内容自动就同步了「真 TM 帅」</p><img src="/2019/07/14/vue/vueinstruction/result_helloword.gif" title="运行查看结果"><p>看到了吧，输入命令以后就会自动打开浏览器容器，并且显示 index.html 的内容，我们也正确的看到了 hello world 的内容「使用 vue 创建的」</p><h4 id="二、v-on-v-if-v-for-指令"><a href="#二、v-on-v-if-v-for-指令" class="headerlink" title="二、v-on,v-if,v-for 指令"></a>二、v-on,v-if,v-for 指令</h4><blockquote><p>1、v-on 是用来监管 DOM 事件的，并执行一些 js 代码，比如点击事件，提交事件等</p></blockquote><p><code>用法</code></p><pre><code>v-on:click="表达式"</code></pre><p>废话不多说直接上例子吧</p><ul><li>1、在 instructions 下新建 v-on.html，然后在 index.html 中引入</li></ul><p>先看 index.html 中修改「见下面红色框」</p>{% asset_img add_v_on_html.png  index.html 中添加 v-on.html %}<ul><li>2、v-on.html 给出 body 中的核心代码「html 基本模版和 vue.js 引信省略」</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这里添加 v-on:click 然后定义一个方法--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickme()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">"#container"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义一个数据默认是1</span>        num<span class="token punctuation">:</span><span class="token number">1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 方法写在 methods 关建字中，从字名看里面可以多个方法</span>      methods<span class="token punctuation">:</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 这里就是 v-onclick:后面跟的方法</span>        clickme<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// this 指的是当前对象 -- vm</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><ul><li>3、这样一个简单的 v-on:click 指令就可以使用了，我们来看一下结果</li></ul><img src="/2019/07/14/vue/vueinstruction/v-on.gif" title="v-on 结果"><p><strong>PS:</strong> v-on 的缩写</p><pre><code>&lt;!-- 完整语法 --&gt;&lt;a v-on:click="doSomething"&gt;...&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a @click="doSomething"&gt;...&lt;/a&gt;</code></pre><blockquote><p>2、v-if 和 v-for 指令</p></blockquote><p>v-if 是条件判断，v-for 是用来循环数据的，从名字就可以看出来</p><p><code>v-if 的模版</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'A'"</span><span class="token operator">></span>  A<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'B'"</span><span class="token operator">></span>  B<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'C'"</span><span class="token operator">></span>  C<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>  Not A<span class="token operator">/</span>B<span class="token operator">/</span>C<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>其中 v-else-if 和 v-else 不是必须的「根据实际情况看是否需要」</p><p><code>v-for 的模版</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>标签 v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in imtes"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>标签<span class="token operator">></span>比如：遍历 li  假设有一个数组 items<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"vue"</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in items"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>如果想要使用 v-for 来遍历带索引使用</p><pre><code>v-for="(item,index) in items"</code></pre><p>其中 index 就是索引，如果想使用索引的话就可以使用此种方式</p><p>这里的标签指的需要循环的标签，好了不多说了，直接看例子吧，下面我们实现一个下面的例子</p>{% asset_img v-if_v-for.gif  v-if 和 v-for 指令 %}<p>我们使用 v-if 来判断需要显示方形按钮/div 还是圆形按钮/div ，并且使用 v-for 遍历了两个数组「分别使用 ul 和 table 样式显示」</p><p><code>核心代码</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>1、使用 v-if 来切换按钮上的文字和 div 的显示样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cheangeDiv()<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{theWord}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--  如果 flag 为 true 的话那么就显示 div --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            我显示出来了        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 否则显示圆形的 div --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showBuleDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>white</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>2、使用 v-for 来循环数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>列举出你喜欢吃的水果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    我喜欢吃的水果有    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in fruit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span> 3、使用 v-for 循环输出 以下 json 串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    mydatas:[      {"name":"TigerChain","age":"保密","address":"地球中国","lover":"不告诉你"},      {"name":"张三","age":"23","address":"地球中国","lover":"打游戏"},      {"name":"李四","age":"25","address":"地球中国","lover":"读书"},      {"name":"王五","age":"30","address":"是中唯一不下雪的地方","lover":"写代码"},      {"name":"赵六","age":"18","address":"中国北京","lover":"写博客"},      {"name":"钱七","age":"27","address":"中国陕西","lover":"做菜"}    ]  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>爱好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in mydatas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 其中 index 是索引，也就是数组的角标 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{item.age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{item.address}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{item.lover}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">'#container'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 数据</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>        theWord<span class="token punctuation">:</span><span class="token string">"圆形"</span><span class="token punctuation">,</span>        flag<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        msg<span class="token punctuation">:</span><span class="token string">'show me'</span><span class="token punctuation">,</span>        mydatas<span class="token punctuation">:</span><span class="token punctuation">[</span>          <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"TigerChain"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"保密"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">:</span><span class="token string">"地球中国"</span><span class="token punctuation">,</span><span class="token string">"lover"</span><span class="token punctuation">:</span><span class="token string">"不告诉你"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"23"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">:</span><span class="token string">"地球中国"</span><span class="token punctuation">,</span><span class="token string">"lover"</span><span class="token punctuation">:</span><span class="token string">"打游戏"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"25"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">:</span><span class="token string">"地球中国"</span><span class="token punctuation">,</span><span class="token string">"lover"</span><span class="token punctuation">:</span><span class="token string">"读书"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"30"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">:</span><span class="token string">"是中唯一不下雪的地方"</span><span class="token punctuation">,</span><span class="token string">"lover"</span><span class="token punctuation">:</span><span class="token string">"写代码"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"18"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">:</span><span class="token string">"中国北京"</span><span class="token punctuation">,</span><span class="token string">"lover"</span><span class="token punctuation">:</span><span class="token string">"写博客"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"钱七"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"27"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">:</span><span class="token string">"中国陕西"</span><span class="token punctuation">,</span><span class="token string">"lover"</span><span class="token punctuation">:</span><span class="token string">"做菜"</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        fruit<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"苹果"</span><span class="token punctuation">,</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span><span class="token string">"葡萄"</span><span class="token punctuation">,</span><span class="token string">"美国香瓜"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 方法</span>      methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 切换 div</span>        <span class="token function">cheangeDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>theWord <span class="token operator">==</span><span class="token string">"圆形"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>theWord <span class="token operator">=</span> <span class="token string">"方形"</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>theWord <span class="token operator">=</span> <span class="token string">"圆形"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>具体代码可以查看 <a href="https://github.com/githubchen001/vue-lesson" target="_blank" rel="noopener">https://github.com/githubchen001/vue-lesson</a> 中的基本指令章节</p><blockquote><p>3、v-show 和 v-model</p></blockquote><p><code>v-show</code></p><p>在前面我们使用了 v-if 指令，v-show 的指令和 v-if 类似，基本模版是：</p><pre><code>&lt;标签 v-show="条件"&gt;如果达到条件要显示的内容&lt;/标签&gt;</code></pre><p>比如：我们有一个按钮点击显示或隐藏 div 如下效果</p>{% asset_img v-show.gif  v-show 效果 %}<p><code>核心代码:</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickMe()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{defaultButton}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 如果 v-show = true 的话就会显示 此 div  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是 v-show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#container'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 是否显示 div 的标志，默认是不显示</span>      flag<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 默认按钮显示字样</span>      defaultButton<span class="token punctuation">:</span><span class="token string">'显示'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 按钮点击的方法</span>      <span class="token function">clickMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultButton <span class="token operator">==</span> <span class="token string">"显示"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>defaultButton <span class="token operator">=</span><span class="token string">"隐藏"</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>defaultButton <span class="token operator">=</span><span class="token string">"显示"</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>从上面的例子中，我们可以感受到 v-show 的用法了</p><p><code>v-model</code></p><p>v-modle 体现了 mvvm 设计思想，它是一个双向数据绑定「在 input 和 textarea 上」</p><p>我们直接在上面 id 为 container 的 div 中添加如下代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itext<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myinput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>你输入的值是：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{itext}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre><p>并且我们在 data 中定义一个 itext 属性</p><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 是否显示 div 的标志，默认是不显示</span>  flag<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 默认按钮显示字样</span>  defaultButton<span class="token punctuation">:</span><span class="token string">'显示'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 新添加的属性</span>  itext<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>运行查看结果：</p><img src="/2019/07/14/vue/vueinstruction/v-model.gif" title="v-model结果"><p>从上面的结果中我们可以看到，当我们给 input 中输入文本的时候就下面就会自动的显示出所对应的文本，并且点击按钮的时候改变文本的值，输入框中的值会自动改变，这就是双向绑定</p><h3 id="三、来个-blog-实例"><a href="#三、来个-blog-实例" class="headerlink" title="三、来个 blog 实例"></a>三、来个 blog 实例</h3><blockquote><p>1、经过上面我们学习了几个指令，我们来写一个综合的小案例，效果如下：</p></blockquote><img src="/2019/07/14/vue/vueinstruction/v-blog.gif" title="v-blog"><blockquote><p>2、开始撸码「在这里我们给出核心代码」，后面会放出 demo 地址</p></blockquote><p>我们在 instructions 目录下新建一个 blog-demo.html 文件</p><ul><li>1、首先我们在这里要引入一个 sweetalert2.js 来做弹出框</li><li>2、我们来看看 div 中的内容</li></ul><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>标题：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 遍历把内容显示出来 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(data,index) in datas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{index+1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{data.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{data.content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteRow(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modifyData(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datas.length!<span class="token punctuation">=</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteAllData()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全部删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 没有数据的显示这个标签 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datas.length<span class="token punctuation">=</span><span class="token punctuation">=</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>没有数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>以上我们定义了一个 blog 的模版，下面我们给它添加一些操作功能</p><ul><li>3、添加 script 代码</li></ul><p>从上面的代码中，我们看到了 v-modle,v-show ,v-for 等指令，下面我们来看看 vue 中的代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span><span class="token string">'#container'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 标题</span>    title<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 内容</span>    content<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 所有的内容</span>    datas<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加数据</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">==</span><span class="token string">""</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"标题或内容不能为空"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 把标题和内容添加到数组中</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>datas<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token string">"content"</span><span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 添加完数据以后把标题和内容置空</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">""</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token operator">=</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 删除数据</span>    <span class="token function">deleteRow</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//在一个方法中调用</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 由于是在方法的方法内部，this 就指的是当前方法了， 所以要使用 var that = this 来声明一下</span>     <span class="token comment" spellcheck="true">//在一个方法中调用 另一个方法</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">deleteMethod</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         that<span class="token punctuation">.</span>datas<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//修改数据</span>    <span class="token function">modifyData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 取得原来的数据</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>datas<span class="token punctuation">[</span>index<span class="token punctuation">]</span>      <span class="token function">swal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'修改'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// type: 'info',</span>        html<span class="token punctuation">:</span>          <span class="token string">"&lt;div>&lt;p>标题:&lt;input id=\"title\" value="</span><span class="token operator">+</span>data<span class="token punctuation">.</span>title<span class="token operator">+</span><span class="token string">" >&lt;/input>&lt;/p>"</span><span class="token operator">+</span>          <span class="token string">" &lt;p>内容:&lt;input  id=\"content\" value="</span><span class="token operator">+</span>data<span class="token punctuation">.</span>content<span class="token operator">+</span><span class="token string">">&lt;/input>&lt;/p>&lt;/div>"</span> <span class="token punctuation">,</span>        showCancelButton<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        focusConfirm<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        confirmButtonText<span class="token punctuation">:</span><span class="token string">'确定'</span><span class="token punctuation">,</span>        cancelButtonText<span class="token punctuation">:</span><span class="token string">'取消'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">let</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value          <span class="token keyword">let</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value          <span class="token comment" spellcheck="true">// 修改数据</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>datas<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span>title<span class="token punctuation">,</span><span class="token string">"content"</span><span class="token punctuation">:</span>content<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//删除 全部数据</span>    <span class="token function">deleteAllData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//这里使用箭头函数就不用再使用 let that = this 来转化了,可以上面的比较一下，两种方式</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">deleteMethod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 封装一个删除方法</span>    <span class="token function">deleteMethod</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">swal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'确定删除吗?'</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span> <span class="token string">"全部删除了以后就不恢复不了哦！"</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>        showCancelButton<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        confirmButtonColor<span class="token punctuation">:</span> <span class="token string">'#3085d6'</span><span class="token punctuation">,</span>        cancelButtonColor<span class="token punctuation">:</span> <span class="token string">'#d33'</span><span class="token punctuation">,</span>        cancelButtonText<span class="token punctuation">:</span><span class="token string">'取消'</span><span class="token punctuation">,</span>        confirmButtonText<span class="token punctuation">:</span> <span class="token string">'确定删除!'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>以上就是 blog-demo 的核心代码，注释的非常清楚，这里不过多解释了，请自行实践</p><p>到此为止，我们就把 vue 的几个常用的指令说完了</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>通过这节，我们学习了 vue 的几个常见的指令，并且写了一个小 demo ，通过动手就能直观的感受到 vue 指令的作用</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/手把手教Vue/">手把手教Vue</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/vue-lesson" target="_blank" rel="noopener">手把手教 Vue</a> 方便大家查看，欢迎大家 fork，喜欢的话给个 star </p><p><a href="https://mp.weixin.qq.com/s/AS2TZ5gcQqG6B4kmrI_93A" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 手把手教Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01、环境搭建</title>
      <link href="/2019/07/13/vue/vueenv/"/>
      <url>/2019/07/13/vue/vueenv/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/13/vue/vueenv/env_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/手把手教Vue/">TigerChain  手把手教Vue</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是-Vue"><a href="#一、什么是-Vue" class="headerlink" title="一、什么是 Vue"></a>一、什么是 Vue</h3><p>Vue 是一个用于构建用户界面的渐进式框架「注意读音类似于 View，作者的初衷也是让其起 View 的功能」，Vue 只注重视图层，这点和 React 的是一毛一样的</p><blockquote><p>vue 的特点</p></blockquote><ul><li>简单、易用</li><li>灵活</li><li>高效</li></ul><h3 id="二、Vue-环境搭建"><a href="#二、Vue-环境搭建" class="headerlink" title="二、Vue 环境搭建"></a>二、Vue 环境搭建</h3><h4 id="1、Vue-的使用方式"><a href="#1、Vue-的使用方式" class="headerlink" title="1、Vue 的使用方式"></a>1、Vue 的使用方式</h4><blockquote><p>1、下载 vue.js 引入到项目中</p></blockquote><p>我们直接下载 vue.js 然后引入 <script></script> 标签中即可，Vue 分为开发版本和生产版本</p><ul><li>1、开发版本：<a href="https://vuejs.org/js/vue.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.js</a></li><li>2、生产版本：<a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></li></ul><p><strong>PS：</strong> 开发版本有完整的调试和警告，而生产版本则是一个精简版本，删除了警告，如果我们在开发的时候建议选择开发版本方便调试</p><p>使用方式</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 引入 vue.js 所在的目录--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>2、使用 CDN 引用</p></blockquote><p>官方推荐使用 <a href="https://cdn.jsdelivr.net/npm/vue" target="_blank" rel="noopener">https://cdn.jsdelivr.net/npm/vue</a></p><blockquote><p>3、使用 nmp/yarn 安装</p></blockquote><ul><li>1、安装 node </li></ul><p>使用 npm 和 yarn 首先要安装 node，可以去官网下载：<a href="https://nodejs.org/en/download/current/" target="_blank" rel="noopener">https://nodejs.org/en/download/current/</a></p><img src="/2019/07/13/vue/vueenv/node_dowonload.png" title="下载 node"><p>下载对应 win 系统还是 mac 系统的版本，然后安装即可</p><p>在我的 mac 电脑上我直接使用 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 安装的</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> node </code></pre><p>安装完 node 会自带 npm「node 的包管理器」,安装完成以后在命令行中输入</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><p>看到以下 node 的版本信息则表示安装成功了</p><img src="/2019/07/13/vue/vueenv/node-v.png" title="查看 node 的版本"><ul><li>2、使用 npm 安装 vue</li></ul><p>在命令行输入以下命令即完成安装</p><pre class=" language-bash"><code class="language-bash">// 全局安装<span class="token function">npm</span> <span class="token function">install</span> -g vue</code></pre><p>使用 vue-V 查看是否安装成功，如果显示出版本号则表示安装成功</p><img src="/2019/07/13/vue/vueenv/vue-v.png" title="npm 安装 vue"><ul><li>3、使用 yar「替代 npm 的包管理器」 安装</li></ul><p><strong>a)、</strong> 要使用 yarn 先需要安装 yarn , 在这里我们使用 npm 安装 yarn </p><pre class=" language-bash"><code class="language-bash">// 全局安装<span class="token function">npm</span> <span class="token function">install</span> yarn -g </code></pre><p><strong>b)、</strong> 使用 yarn 安装 vue</p><pre class=" language-bash"><code class="language-bash">yarn global add vue </code></pre><p>以上命令在 win 系统上安装完成以后，在命令行中使用 vue 可能会出现 Command not found 命令，那么我们需要配置一下环境变量。把 yarn 的 bin 目录配置到环境变量即可「配置到 path 路径下」，使用以下命令直接查看 yarn 的 bin 目录「把此命令显示出的路径直接配置到 path 后面即可」</p><pre class=" language-bash"><code class="language-bash">yarn global bin </code></pre><p>由于我这里是 mac 电脑，所以就不演示了，如果碰到这个问题，就配置一下环境变量即可</p><p>使用 vue-V 查看是否安装成功，如果显示出版本号则表示安装成功</p><img src="/2019/07/13/vue/vueenv/vue-v.png" title="yarn 安装 vue"><h4 id="2、使用-cli-「命令行工具」"><a href="#2、使用-cli-「命令行工具」" class="headerlink" title="2、使用 cli 「命令行工具」"></a>2、使用 cli 「命令行工具」</h4><p>我们除了上面的引用或安装 vue 外，还可以使用 vue-cli「脚手架工具」</p><p>vue-cli 是一个脚手架工具「就是一个工具集合，可以快速的创建一个 vue 项目」</p><p>同样使用 yarn/npm 来安装 vue-cli，我们全局安装</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --global vue-cli 或者使用yarn global add vue-cli</code></pre><p>安装完以后，我们输入 vue -V 查看是否安装成功，或使用 vue-list 查看</p><img src="/2019/07/13/vue/vueenv/vue-list.png" title="vue-list"><p>看到上面内容则证明我们的 vue-cli 脚手架工具安装成功了</p><h4 id="3、使用-vue-cli-来创建一个项目"><a href="#3、使用-vue-cli-来创建一个项目" class="headerlink" title="3、使用 vue-cli 来创建一个项目"></a>3、使用 vue-cli 来创建一个项目</h4><ul><li>1、新建一个目录，我这里放在桌面「我以 mac 电脑演示，win 同理」</li></ul><pre class=" language-bash"><code class="language-bash"> <span class="token function">cd</span> Desktop <span class="token function">mkdir</span> myvuedemo <span class="token function">cd</span> myvuedemo</code></pre><ul><li>2、使用 vue-cli 创建项目</li></ul><pre class=" language-bash"><code class="language-bash">vue init webpack myfirstvuedemo</code></pre><p>这里的 vue 项目是基于 webpack 的，使用上述命令我就可以创建一个名为 myfirstvuedemo 的 vue 项目</p><p>当我们输入上述命令以后就会开始下载模版，然后会提示输入项目名「自己写一个即可」，完了一路回车，出现 yes 就直接回车「目前先这样搞，别管为什么，但是如果看过我的 react 教程就会了解，最后提示使用 npm 还是 yarn 来管理包，我选择的是 yarn」</p>{% asset_img vue-init-project.png  vue init project %}<p>安装完依赖以后，就会出现下面的命令</p>{% asset_img finish-vue-project.png  项目创建成功提示 %}<p>如图所示，我们成功创建出了项目，如果大家使用 npm 或是 yarn 出现安装不了的情况，那么切换一下源即可「tabao 的源就非常不错」，我们根据上面的提示，进入到项目中，然后运行一下项目看看结果</p><ul><li>3、运行项目</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> myfirstvuedemo然后运行yarn run dev</code></pre><p>我们就会看到使用 webpack 启动服务，然后编译，完成以后提示项目运行的地址：默认是–<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><img src="/2019/07/13/vue/vueenv/run-vue-project.png" title="启动项目"><p>我们在浏览器中输入 <code>http://localhost:8080</code> 回车，看结果</p><img src="/2019/07/13/vue/vueenv/vue-cli-show-result.png" title="vue-cli 项目结果显示"><p>怎么样，我们使用 vue-cli 就成功创建出一个 vue 项目，只不过他默认的主页是 Vue 的一些介绍，要搞成自己项目修改即可「后面说到 vue-cli 创建项目会说到的」，怎么样？脚手架创建项目简单吧「建议初学者不要直接使用 vue-cli 来创建项目，而是引入 vue.js 来使用，后面熟练了再使用 vue-cli」</p><h3 id="三、Vue-开发工具"><a href="#三、Vue-开发工具" class="headerlink" title="三、Vue 开发工具"></a>三、Vue 开发工具</h3><ul><li>1、webstorm </li></ul><img src="/2019/07/13/vue/vueenv/webstrom.png" title="webstorm"><ul><li>2、sublime</li></ul><img src="/2019/07/13/vue/vueenv/sublime.png" title="sublime"><ul><li>3、atom</li></ul><img src="/2019/07/13/vue/vueenv/atom.png" title="atom"><ul><li>4、Visual Studio Code[即 vscode]</li></ul><img src="/2019/07/13/vue/vueenv/vscode.png" title="vscode"><p>对于开发工具来说，没有最好，只有最合适，完全看个人习惯，有的就习惯使用 vim 开发「你咬我呀」,我个人习惯于使用 atom 和 webstrom </p><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p><strong>Vue 的特点：</strong></p><ul><li>简单、易用、灵活高效</li></ul><p><strong>Vue 的使用方式：</strong></p><ul><li>1、直接引入 script</li><li>2、使用 CDN</li><li>3、使用 yarn/npm</li><li>4、使用 vue-cli 脚手架</li></ul><p>到此为之，我们简单介绍了一下 vue，并创建了第一个小 demo ，感受一下吧，下节我们看看 vue 的些指令完成一些交互 </p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/手把手教Vue/">手把手教Vue</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/vue-lesson" target="_blank" rel="noopener">手把手教 Vue</a> 方便大家查看，欢迎大家 fork，喜欢的话给个 star </p><p><a href="https://mp.weixin.qq.com/s/cVrii2EYl5Xg0frLLR0mTA" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 手把手教Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09、装饰模式</title>
      <link href="/2019/07/10/decorator/"/>
      <url>/2019/07/10/decorator/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/10/decorator/decorator.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级</li><li>3、Demo 地址：<br>Android Demo—<a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 对应的 Decorator<br>Java Demo：<a href="https://github.com/tigerchain/designpattern_javademo/tree/master/src/Decorator" target="_blank" rel="noopener">https://github.com/tigerchain/designpattern_javademo/tree/master/src/Decorator</a></li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是装饰模式"><a href="#一、什么是装饰模式" class="headerlink" title="一、什么是装饰模式"></a>一、什么是装饰模式</h3><h4 id="1、生活中的装饰模式"><a href="#1、生活中的装饰模式" class="headerlink" title="1、生活中的装饰模式"></a>1、生活中的装饰模式</h4><blockquote><p>1、穿衣服</p></blockquote><p>这个模式每个人都知道，我们天天穿衣服「有的人天天换衣服」，这就是一个装饰模式，装饰谁呢？当然是自己了。男人让自己变得更加有精气神，女人让自己变得更加靓丽有气质，无形中给人一种附加的”能力”「吸引人」</p><blockquote><p>2、房子装修</p></blockquote><p>我们买的房子要装修了，可以装成高端大气上档次的，也可以装成低调奢华有内涵的，还可以装成简易风格、欧美风格等等，房子还是原来的房子，但是通过装修我们赋予了房子不同的体现风格–这就是装饰模式</p><blockquote><p>3、礼品盒，包装盒</p></blockquote><p>同样的产品不同的包装卖的价格不一样，以苹果为例，一般的苹果一斤斤的卖，礼品盒的苹果按个数卖价格是没有包装的几倍，包装经济下的利润都是非常可观的，其实我们做为程序员也是这个道理，如果自己有开源项目、有高仿问量的博客、有知名度「都是对自己的包装」，那么自己的身价也不低「学完装饰模式赶紧给自己镀金吧」</p><blockquote><p>4、孙悟空炼就火眼金睛</p></blockquote><p>我们都知道猴子被放到八卦炉里炼了七七四十九天，没有想到猴子没有死，反到变成火眼金睛了，这无形之中又用到了装饰模式「猴子还是原来的猴子可是多了一项技能」</p><h4 id="2、程序中的装饰模式"><a href="#2、程序中的装饰模式" class="headerlink" title="2、程序中的装饰模式"></a>2、程序中的装饰模式</h4><blockquote><p>装饰模式的定义</p></blockquote><p>在不改变原有对象的基础之下给原有对象扩展功能，是对继承关系的一种替换方案，装饰模式也叫包装器模式「Wrapper Pattern」</p><blockquote><p>装饰模式的目的</p></blockquote><p>定义里说的很清楚了就是扩展原有对象的功能「不改变原有对象」<br>当然在对原有对象不改变的前提下扩展对象的功能可不止这一种做法：通常的做法会有</p><ul><li>1、继承</li><li>2、动态代理</li><li>3、装饰模式</li><li>4、其它等等</li></ul><p>动态代理应该算是最好的一种解决方案，但是还有有区别的，具体下面会说</p><blockquote><p>装饰模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Component</td><td>抽象角色「抽象类或接口」</td><td>抽象的构件对象，真实对象和装饰对象都实现此相同的接口,不是必须的</td></tr><tr><td>ConcreteComponent</td><td>具体的构件角色</td><td>即被装饰的对象可以有多个「因为被装饰的对象可以有多个」</td></tr><tr><td>Decorator</td><td>装饰角色</td><td>持有一个抽象构件的引用，并且把客户端的请求转发给真实的对象，起到扩展真实对象的功能，不是必须的</td></tr><tr><td>ConcreteDecorator</td><td>具体的装饰角色</td><td>负责给构件对象扩展功能</td></tr></tbody></table><blockquote><p>装饰模式简单的 UML</p></blockquote><img src="/2019/07/10/decorator/DecoratorUML.jpg" title="装饰模式简单的 UML"><p>装饰者类装饰的对象是具体的构件类</p><h3 id="二、装饰模式的举例"><a href="#二、装饰模式的举例" class="headerlink" title="二、装饰模式的举例"></a>二、装饰模式的举例</h3><blockquote><p>1、人穿衣服</p></blockquote><p>人靠衣装马靠鞍，说的就是包装对一个人来说非常重要。当然男人有男人的装扮风格，女人就女人的装扮风格，如果是一个明星再穿个个性的衣服一般就会达到炒作的目的–结果可想而知身价倍增，那么对于我们平常人来说，穿着也非常重要，比如你面视的时候，穿着得体映象分就会大大提高，可见装饰模式对我们有多么主要呀</p><p><code>人穿衣服简单的 UML</code></p><img src="/2019/07/10/decorator/cloths_uml.jpg" title="人搭配衣服简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、装饰装饰肯定要有装饰的对象，定义一个抽象的被装饰者 Person.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象的构件--人 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 取得搭配的衣服</span>    String <span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>java<span class="token punctuation">}</span></code></pre><ul><li>2、定义具体的构件–即具体的被装饰者 TigerChain.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的构件 -- TigerChain  即被装饰的对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TigerChain</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String selectResult <span class="token operator">=</span> <span class="token string">"TigerChain 搭配衣服："</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> selectResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、穿一身衣服有上衣、裤子、鞋子等，这里只考虑上衣和裤子「上衣和裤子也是各种样式 和品牌，我们统一抽象成装饰者」，定义抽象装饰者上衣 IOuter.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 上衣，抽象的装饰者，被装饰的对象是人 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOuter</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String <span class="token function">getOuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义具体的上衣装饰者 1 西装 Suit.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 上衣具体的装饰者---西服 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Suit</span> <span class="token keyword">implements</span> <span class="token class-name">IOuter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Person person <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里体现出装饰「即包装，把被装饰的对象包起来」</span>    <span class="token keyword">public</span> <span class="token function">Suit</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token operator">=</span> person <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"西装"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getOuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"---上衣 "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、定义具体的上衣装饰者 2 夹克 Jacket.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的上衣装饰者，皮夹克 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jacket</span> <span class="token keyword">implements</span> <span class="token class-name">IOuter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 被包装的抽象类</span>    <span class="token keyword">private</span> Person person <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Jacket</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token operator">=</span> person <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 皮夹克"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getOuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"---上衣"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、定义抽象的装饰者裤子 ITrousers.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象的装饰者--裤子 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITrousers</span> <span class="token punctuation">{</span>    String <span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>7、定义具体的裤子装饰者 1 西裤 Pants.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 裤子的具体装饰者--西裤 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pants</span> <span class="token keyword">implements</span> <span class="token class-name">ITrousers</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Person person <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Pants</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token operator">=</span> person <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"西裤"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>8、定义具体的裤子装饰者 2 牛仔裤 Jean.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的裤子装饰者--牛仔裤 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jean</span> <span class="token keyword">implements</span> <span class="token class-name">ITrousers</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Person person <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Jean</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token operator">=</span> person <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"牛仔裤"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>9、来个测试类，测试一下 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TigerChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方式一：全身西装"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上衣西装</span>        IOuter suit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Suit</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>suit<span class="token punctuation">.</span><span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>suit<span class="token punctuation">.</span><span class="token function">getOuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 裤子西裤</span>        ITrousers pants <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pants</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pants<span class="token punctuation">.</span><span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方式二：皮夹克+牛仔裤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上衣皮夹克</span>        IOuter jacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jacket</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jacket<span class="token punctuation">.</span><span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>jacket<span class="token punctuation">.</span><span class="token function">getOuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 裤子牛仔裤</span>        ITrousers jean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jean</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jean<span class="token punctuation">.</span><span class="token function">getCloths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>10、运行查看结果</li></ul><img src="/2019/07/10/decorator/cloths.png" title="搭配衣服结果"><p>怎么样，我还是我没有改变，只是换个皮而已，没什么大不了的。从结果来看，我个人还是比较土的「不会搭配衣服 ^_^」</p><blockquote><p>2、装修房子</p></blockquote><p>当初我装修房子的时候–装修公司给我们介绍他们有两种装修风格：简约和欧美风格，问我要什么风格的，作为屌丝的我选择了简约风格「其实不喜欢欧美风格，感觉越简单越好，主要还是手头没有银子」</p><p>这里被装饰的对象就是房子、装修风格就是装饰者，我们来看看 UML 吧</p><p><code>装修房子简单的 UML</code></p><img src="/2019/07/10/decorator/DecoratorHouseUML.jpg" title="装修房子简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、定义抽象的被装饰的对象 AbstractHouse.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象的构件房子 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractHouse</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 取得房子的风格</span>    <span class="token keyword">abstract</span> String <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义具体的被装饰对象简约房子 JianYi.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的构件1 简易房子 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JianYi</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHouse</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"简易风格的房子"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义具体的被装饰对象欧美房子 OuMei.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的构件2 欧美风格房子 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuMei</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHouse</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"欧美风格的房子"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义抽象的装饰者 AbstractDecorator.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象的装饰者 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHouse</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 返回装修价格</span>    <span class="token keyword">abstract</span> String <span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>5、定义简约风格房子具体装饰者 DiDiaoDecorator.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的装饰者之一:简易装修 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiDiaoDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractHouse abstractHouse <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DiDiaoDecorator</span><span class="token punctuation">(</span>AbstractHouse abstractHouse<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>abstractHouse <span class="token operator">=</span> abstractHouse <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>abstractHouse<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 低调奢华有内涵"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">" 8 万元装修"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、定义欧美风格房子具体装饰者 GaoDuanDecorator.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的装饰者--高端装修 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GaoDuanDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractHouse abstractHouse <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GaoDuanDecorator</span><span class="token punctuation">(</span>AbstractHouse abstractHouse<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>abstractHouse <span class="token operator">=</span> abstractHouse <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> abstractHouse<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 高端大气上档次"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">" 10 万元装修"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>7、来测试一下 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        AbstractHouse jianYiHouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JianYi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        AbstractDecorator diDiaoDecorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiDiaoDecorator</span><span class="token punctuation">(</span>jianYiHouse<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>diDiaoDecorator<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>diDiaoDecorator<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractHouse ouMei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuMei</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        AbstractDecorator gaoDuanDecorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GaoDuanDecorator</span><span class="token punctuation">(</span>ouMei<span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>gaoDuanDecorator<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>gaoDuanDecorator<span class="token punctuation">.</span><span class="token function">getCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>8、运行查看结果</li></ul><img src="/2019/07/10/decorator/decoratorhouse_result.png" title="装修房子结果"><p>其实这里的 AbstractHouse 不是必须的，我们可以定义一个 House 类，然后包装它即可「这里为了演示包装器模式的全部角色，所以在实际中可以灵活设计」</p><blockquote><p>3、悬浮的 ExpandableListView</p></blockquote><p>我们都知道 ExpandableListView 是实现分组列表的，它本身是不支持组头悬浮功能的，为了达到这一目的，我们要重写 adapter 功能 ExpandableListView 的滚动功能。实现相关功能的三方类库非常多，我这里选择一个叫 <a href="https://github.com/diegocarloslima/FloatingGroupExpandableListView" target="_blank" rel="noopener">FloatingGroupExpandableListView</a> 的三方库，它使用装饰模式来实现悬浮组头的功能，我们来看看吧,我们直接以 FloatingGroupExpandableListView 的 demo 为例来说</p><p><code>先看看 本Demo 地运行结果</code></p><ul><li>1、没有悬浮的 ExpandableListView</li></ul><img src="/2019/07/10/decorator/normaldapter.gif" title="普通的 ExpandableListView"><ul><li>2、带悬浮的 FloatingGroupExpandableListView</li></ul><img src="/2019/07/10/decorator/wrapperadapter.gif" title="FloatingGroupExpandableListView"><p><code>WrapperExpandableListAdapter 简单的 UML</code></p><img src="/2019/07/10/decorator/FloatingGroupExpandableListView_UML.jpg" title="WrapperExpandableListAdapter 简单的 UML"><p><code>FloatingGroupExpandableListView 的使用方式</code></p><ul><li>1、声明 XML</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.diegocarloslima.fgelv.lib.FloatingGroupExpandableListView</span><span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/my_list<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>2、在 Activity.onCreate() 或 Fragment.onCreateView() 方法中添加如下代码</li></ul><pre class=" language-java"><code class="language-java">FloatingGroupExpandableListView myList <span class="token operator">=</span> <span class="token punctuation">(</span>FloatingGroupExpandableListView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>my_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自己定义的 BaseExpandableListAdapter</span>BaseExpandableListAdapter myAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看到了吧，从名字可以看到这是一个包装器，用来包装 ExpandableListAdapter 的</span>WrapperExpandableListAdapter wrapperAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WrapperExpandableListAdapter</span><span class="token punctuation">(</span>myAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里把包装 adapter 传进去就达到了悬浮组头的目的</span>myList<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>wrapperAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>怎么样，原来的 BaseExpandableListAdapter 压根不用修改就达到扩展的目的，很爽吧，当然当配合 FloatingGroupExpandableListView「扩展了解ExpandableListView 」 来使用</p><p><code>具体代码</code></p><p>具体的代码我就不贴了，我上传到 github 上了，大家可自行下载去查看，Demo 地址：<a href="https://github.com/githubchen001/DesignPattern" target="_blank" rel="noopener">https://github.com/githubchen001/DesignPattern</a> 的 wrapperExpandableListAdapter 部分</p><p>如果想看 FloatingGroupExpandableListView 的源码，包括 WrapperExpandableListAdapter 是如何实现的，我们可以扒扒它的源码：地址是：<a href="https://github.com/diegocarloslima/FloatingGroupExpandableListView" target="_blank" rel="noopener">https://github.com/diegocarloslima/FloatingGroupExpandableListView</a> 建议亲看扒扒这部分源码来学习一下</p><h3 id="三、Android-源码中的装饰模式"><a href="#三、Android-源码中的装饰模式" class="headerlink" title="三、Android 源码中的装饰模式"></a>三、Android 源码中的装饰模式</h3><blockquote><p>1、ContextWrapper</p></blockquote><p>Context 我们做 Android 的基本上天天和它打交道，启动 Activity ,发送广播，启动服务等，Content 就用到了包装器模式，那是一个叫做 ContentWrapper 的东东</p><p><code>ContentWrapper 简单的 UML</code></p><img src="/2019/07/10/decorator/ContextWrapperUML.jpg" title="ContentWrapper 简单的 UML"><p><code>简单的源码分析</code></p><img src="/2019/07/10/decorator/ContextWrapper.png" title="ContextWrapper 部分源码"><p>我们可以看到 <code>ContextWrapper</code> 就是对 <code>Context</code> 的一个包装，没有什么好说的，其实我们看 UML 就知道 <code>ContextWrapper</code> 其实是持有 <code>ContextImpl</code> 一个引用的，由于 <code>ContextWrapper</code> 就上面两个方法来接收 <code>Context</code> 的，所以接收的肯定是 <code>ContextImpl</code>，我们接着看 <code>ContextImpl</code> 是如何被传递到 <code>ContentWrapper</code> 的，我们看看 <code>ActivityThread</code> 部分源码</p><img src="/2019/07/10/decorator/ActivityThread.png" title="ActivityThread 部分源码"><p>从图我们可以很清楚的看到从 performLaunchActivity 方法开始如何一步步把 <code>ContextImpl</code> 传递给 mBase 了，所以 Activity 就可以任性的调用 Context 的相关方法了</p><p><strong>Why?</strong></p><p>为什么 Andorid 系统要把 Content 使用包装器包装一下呢？我们试想一下，Activity、Application、Service 等等都要使用 Context ，假使没有 ContentWrapper ，那么我们要使用 Context 只能是继承自 ContextImpl「或者直接继承 Context」,那么如果 Context 要修改「或者有一个新的 ContextImplB 方式是更好的」，会导致 Activity、Application、Service 都要修改「或重新继承 ContextImplB」，这无疑是恶心的。而有了 ContextWrapper ,假如有一个新的 Context 变种，我们直接将所包装的对象替换掉即可就是这么方便和任性</p><blockquote><p>2、 android.hardware.camera2.utils.Decorator</p></blockquote><p>感兴趣的可以扒扒这部分源码，同样使用的装饰模式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***This is an implementation of the 'decorator' design pattern using java's proxy mechanism.See also:newInstance(java.lang.Object,android.hardware.camera2.utils.Decorator.DecoratorListener)Hide:***/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DecoratorListener</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onBeforeInvocation</span><span class="token punctuation">(</span>Method m<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略若干代码    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略若干代码 <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>T obj<span class="token punctuation">,</span> DecoratorListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Decorator</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略若干代码<span class="token punctuation">}</span></code></pre><p>从注释就可以看出使用的装饰模式</p><h3 id="四、装饰模式的分类"><a href="#四、装饰模式的分类" class="headerlink" title="四、装饰模式的分类"></a>四、装饰模式的分类</h3><blockquote><p>1、 透明</p></blockquote><p>具体构件角色、装饰角色的接口和抽象构件的接口完全一致，则称为透明模式，这是一种极端的例子不太常见，由于装饰模式就是为了在不改变接口的前提下—扩展对象，扩展肯定就要对外公开一些自己的方法，所以不可能接口完全一致</p><blockquote><p>2、 半透明</p></blockquote><p>如果装饰角色的接口与抽象构件角色不一致，一般情况下装饰角色扩展一些自己的方法，也就是上面我们普遍的例子</p><h3 id="五、装饰模式的优缺点"><a href="#五、装饰模式的优缺点" class="headerlink" title="五、装饰模式的优缺点"></a>五、装饰模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、比继承灵活，可以动态的给一个对象扩展功能「而不改变原有的对象」，并且不同的装饰器可以实现不同的效果</li><li>2、具体的被装饰者和具体的装饰者可以独立变化「新添加一个实现即可」，原有的代码不用改变，符合开–闭原则</li></ul><blockquote><p>缺点</p></blockquote><ul><li>1、会写更多的代码，生成更多的对象</li><li>2、如果是封装的三方类，如果装饰类有多个，那么调用者具体实例化那个不太容易确定「其实文档写清楚，这个就不是问题」</li></ul><h3 id="六、装饰模式-VS-适配器模式-动态代理"><a href="#六、装饰模式-VS-适配器模式-动态代理" class="headerlink" title="六、装饰模式 VS 适配器模式/动态代理"></a>六、装饰模式 VS 适配器模式/动态代理</h3><ul><li><p>适配器模式：把一个类的接口变成客户所期望的另一个接口，从而使原本因接口不匹配的而无法运行的两个类一起工作，基本上把原的接口都重写成满足自己的接口了，而装饰模式只是对对象行为功能的增加「不改变接口」</p></li><li><p>动态代理：是使用代理控制对对象仿问「是控制仿问」</p></li><li><p>装饰模式：动态的新增或组合对象的行为「是为对象的行为的加强」</p></li></ul><h3 id="七、参考资料"><a href="#七、参考资料" class="headerlink" title="七、参考资料"></a>七、参考资料</h3><ul><li>悬浮 ExpandableListView:<a href="https://github.com/diegocarloslima/FloatingGroupExpandableListView" target="_blank" rel="noopener">https://github.com/diegocarloslima/FloatingGroupExpandableListView</a></li></ul><h3 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h3><p><strong>PS:</strong>文中的 Android 源码均到自 Android Api 26</p><ul><li>1、装饰模式是在不改变原有对象的基础之上对对象功能的扩展</li><li>2、装饰模式中抽象构件和抽象装饰都都不是必须的「如果只有一个，还抽象个毛线呀」</li><li>3、装饰模式提供了比继承更灵活的扩展类行为的方法</li><li>4、当我们需要为已有功能动态的添加新功能时可以考虑装饰模式</li><li>5、装饰模式和动态代码/适配器模式相似又不同「适用场景不一样」</li></ul><p>到此为止，我们的装饰模式「包装器模式」就介绍完了，伸出你的小手给个赞吧</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/">人人都会设计模式</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/DesignPattern" target="_blank" rel="noopener">人人都会设计模式</a> 欢迎大家查看</p><p><a href="https://mp.weixin.qq.com/s/21uVXTtXEAEXBwPeionm7g" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没有最好，只有最合适</title>
      <link href="/2019/07/08/nobest/"/>
      <url>/2019/07/08/nobest/</url>
      
        <content type="html"><![CDATA[<h3 id="一、陷入思考"><a href="#一、陷入思考" class="headerlink" title="一、陷入思考"></a>一、陷入思考</h3><p>最近一直没有更新公号，而是一直陷入思考「与其说是思考，不如说是总结」，我们都知道搞 IT 行业的要时刻不断的学习「技术总是在抛弃我们，但是我们决对不能停止追赶的脚步」，市面上技术更新太快，就拿前端来说刚学完 Jquery 又来一个 Angular，Angular 用的正熟练的时候又崩出一个 React ,学完 React  又听说一个 Vue 性能更高点，于是乎又学了 Vue，给人一种感觉就是出要什么新的技术就要学什么似的「很大一部分就喜欢这样去玩，曾今的我也是这样」</p><p>最近 flutter 发布了正式版又霸屏了，你学不学？明天又出一个 Blutter 你看不看？对技术敏感这是非常好的，第一时间了解也是值得学习的，但是一定针对自己公司实际项目和业务去选型和实践「当然当作业余兴趣爱好的另当别论」，一味的只是为了技术而技术，听别人说牛 B 而去学习，这样是会有问题的，这让我想起了学生时代的我，来一段小插曲</p><h3 id="二、小插曲"><a href="#二、小插曲" class="headerlink" title="二、小插曲"></a>二、小插曲</h3><p>这里插入一个小插曲，我本身大学学的就是计算机专业，刚上学那会先学 c 「据说学了 c 以后任何语言都不在话下」，学了一段时间 c「二级指针把我放倒了」，于是 vb 很牛叉「那个时候认知有限觉得 vb 可以写病毒，黑客的感觉真好」，就把 vb 学了，最后又听说 java 不错，我就开始看 java「入了个门」，又看到 php 是世界上最好的语言，而且比 java 还容易学，我就使用 php 做了个网站「php 也入门了」，后来觉得 php 只能搞电子商务「还是当时的认知决定的，口子太窄了」，转了一圈我感觉自己啥好像都会了，啥又都不会，于是乎我又重回 java 道路上「也是因为 java 可以搞 j2me ,j2se j2ee，那个时候根本没有 android ，而且 java gui 编程还有搞头」以后就业道路宽些，所以我决定就搞 java ，就这样我最终走了 java 的道路上「目前是做 android」</p><img src="/2019/07/08/nobest/languages.jpg" title="开发语言迷人眼"><p>在以前上学的时候，基本上都听别人说，或是网上别人说，没有主动思考过到底应该成为什么样的人，觉得把啥都学会那才是真的牛 B ，可是理想是美好的，现实是残忍的，我一度一次性学习两三门语言，导致啥都没有学好，后面工作了我走上了 android 的开发道路，我深刻理解了一定要有一门吃饭的语言–在这个语言上多下功夫，有了编程思维，语言转那是非常好过度的</p><h3 id="三、适合最重要"><a href="#三、适合最重要" class="headerlink" title="三、适合最重要"></a>三、适合最重要</h3><p>看过我公号的人都知道我在写的文章也比较杂，有 React 有 Vue 有 android 还有 RN ，python 等，我是在走以上学的道路吗？看见啥就学啥吗？当然不是，我学习的这些东西都是为业务或是使用场景准备的，我学 React 是为了学习 RN ，其目的是为了搞 hybird 开发「最早的时候趟过 phonegap/cordova 的坑」，学习 Vue 是因为团队中人员对 js html 等熟悉一些，对 jsx 不感冒，所以我们做的 webapp 就使用 vue ,学习 pyhton 当然我是为了做自动化测试，都是为了目的而学，不是为了学习而学习，所以说离开业务和使用场景谈技术都是扯淡，我不反对我对新技术很敏感，但是不代表每个技术都要学习「你根本不可能学完所有技术」，只有要最合适的情况下「或相对合适」选择适合的技术</p><p>说到这里不得不说这几天被 Airbnb 刷屏的文章—不再使用 RN 而是回归到原生开发，原文是于 6 月 20 日发布在 Medium 上的，部分截图如下</p><img src="/2019/07/08/nobest/airbnb-rn.png" title="aribnb 放弃 RN"><p>大概意思就是说由于技术和组织等方面的原因，我们将停止使用 RN ,并把我们所有为 RN 付出的所有努力都将转化成原生开发–也就是放弃 RN 转原生开发了</p><p>好多瓜众就开始宣传 RN 不好，还是原生是王道的舆论，其实存在就有必要，还是那句话离开使用场景和业务所谓的技术和技术选型都是耍流氓，对于 airbnb 而言，在过去它为 RN 的社区也做了不少的贡献，从原文的弃用计划我中我们可以明确的看到，aribnb 说的很清楚，使用 RN 无法实现他们的特定目标，他们知道 RN 不再”适合”它们，并且在 18 年继续支持 RN ，在年底计划将大多数高流量的页面转化成原生的,原文截图如下：</p><img src="/2019/07/08/nobest/aribnb-unsunset.png" title="aribnb 放弃 RN 原因"><p>现在大多数 app 都采用 hybird 形式开发「不是 webview 嵌套一个 jsp 或是一个网站」，BTAJ 都在使用「技术使用看什么一般就是看一线公司」，包括支付宝的五福活动也是 webview 形式展现的，所以说使用场景最重要。</p><p>对技术要持有敬畏的心态，并且要和实际的工作相结合，不要别人说个什么就是什么，没有自己的思考和判断「恍如学生时代的我」，原生开发确实很吊很牛 B ，个人觉得对于常用的核心的业务还是非常有必要使用原生开发的「除非你们公司压根只关心进度，什么性能了，交互了等等统统的不管，又或是技术负责人最明确你必须要使用纯 H5 开发 APP」，但是对于复杂展示类界面或是非常用「临时性」的功能采用 H5 或是 RN 或 Weex 等都是一种很好的选择</p><h3 id="四、谁给你重构的”底气”"><a href="#四、谁给你重构的”底气”" class="headerlink" title="四、谁给你重构的”底气”"></a>四、谁给你重构的”底气”</h3><p>对于不同的公司有不同的技术应对策略，对于像 aribnb 这样的公司来说，有专门的创新团队和技术研究团队，人家有时间和精力并且有能力重构自己的产品，可以达到令人发指的地步，不说 aribnb ，BATJ 都是有这种实力的，像阿里的钉钉就是来往团队最后搞出来的「有专门的团队搞这个事情」</p><p>但是对中小公司来说，就那么几个人，恨不得一个人当十个人来用，小公司想的第一件事情绝对不是公司所用的技术多么牛 B ，产品令人发指，首先要想的事情是如何让公司活下来，只有活下来才可能有未来，一般情况下这类公司往往看重的交付，时间对他们来说是最宝贵的「当然除了那些真正的技术型驱动型公司」，公司不可能给你太多的机会让你去搞技术「基本上都是拿来主意，有开源的直接拿来使用」</p><p>在这种背景下，如何去选择适合公司业务的技术呢？我觉得应该从以下几个方面来考虑：「这里以手机端开发为例，服务端类似」</p><ul><li>1、首先了解产品的特点，它是一个业务系统，还是一个单独的外卖 app 等</li></ul><p>对于业务类系统来说，各种表单操作等比较多，展示类也居多「这种我们采用混合式开发」，但量对于像直播和一些炫酷的动画老老实实的用原生开发吧「最好不要尝试着走捷径」</p><ul><li><p>2、根据团队情况来考虑</p><p>  这里一定要根据团队的情况来考虑如何选择技术「而不是一个人玩个人 show，好多技术老大就受犯这个错误，总觉得自己决定的框架或是技术就是最好的，别人一定要按照这个来，这是有问题的」，以我们团队为例子来说，我给内部人员培训了 React，Vue，最后给的感觉是团队对 Vue 接受程度和反馈都高于 React–所以我们就选择 Vue 来开发我们的 webapp 「除非你的团队只有你一个人，那么随便你怎么玩，你想捅破天都可以」</p></li><li><p>3、要尊重每个人员建议或是意见</p><p>  其实这和第 2 点是差不多，每个人的领域是不一样的，刚毕业的同学掌握的东西你四五年经验的人不一定掌握，所以每个人都有自己的长处，吸收团队成员的建议并且加以讨论就会得到想要的结果 </p></li><li><p>4、学会利用工具</p></li></ul><p>我们要选择提升我们效率的工具，而不是被工具选择，能配置的就不写代码，能机器干的就不人工去干预</p><p>总之从大局上来说产品是先完成后完善，技术选择一定要快、准，特别是对于创业类型的公司、赚钱是第一要素「活着才可能会幸福」，所以早期的创业公司可能没什么架构、技术栈这也不足为奇</p><p>经常在网上看到，一些什么架构设计，项目重构，我是如何把产品拆分的？如何一步步做架构升级的，可是如果在一些小型公司或是创业公司，项目重构是一种奢侈，也没有人给你那个时间让你去重构「你说破嘴也没有用，你觉得项目越来越大，越来越不好扩展，不能友好的支持业务，于是你想重构，可是你 no time no person 你如何去搞呢，往往新的需求都改不完，于是乎只能在一堆烂代码继续添加烂代码」</p><p>在这里说一下我的体验和看到的一些选择重构场景：基本上来说分为两种</p><ul><li>1、确实目前的技术方案满足不了业务和需求了</li></ul><img src="/2019/07/08/nobest/refactor.jpeg" title="重构"><p>有的公司由于没有架构「也就是写几个 base 类和若干个工具类」，都是采用混编的方式来东拼一块，西凑一块的方式来添加，最后越来越难添加，相同的功能都是把代码 copy 一份然后修改，最后开发人员变成了 cv 战士，于是乎技术负责人受不了想要重构「此时添加新功能产生的 bug 和种种效率来说是巨大的」，对于这种情况一定要说服你的领导或是老板必须得重构了「此时花一半个月，为以后省出时间是不可计算的，因为这些有时按指数级别算的」</p><ul><li>2、技术负责人换了，看不惯以前遗留的代码</li></ul><p>这有一个很有趣的现象，一般情况下如果一个公司的技术负责人换了，基本上都会引入自己的框架和方案「并且还说的一套一套的」，不管三七二十一就是指责以前的代码怎么不好「看不懂不代表烂」，杂的杂不好，然后就鼓动发起项目重构</p><img src="/2019/07/08/nobest/refactor.png" title="我让你重构你就重构"><p>就按这个套路，一直”重构”，这样一样就把一套项目来回推倒 N 次，对于这类型的重构，我想说是谁给你重构的底气的</p><h3 id="五、如何正确选择技术"><a href="#五、如何正确选择技术" class="headerlink" title="五、如何正确选择技术"></a>五、如何正确选择技术</h3><h5 id="1、小创公司"><a href="#1、小创公司" class="headerlink" title="1、小创公司"></a>1、小创公司</h5><p>对于小创型公司，活着是首要任务「赚钱是第一要务」，对于产品和项目我们可以根据先完成后完善的理念去做，在技术选型上不建议去从底层架构到各个层代码全部自己开发「可是创造，能不重复造轮子就不要重复造轮子」，对于这一类型的公司个人感觉核心的业务自己去开发「并且选择一些成熟的开源框架去做基础」，对于服务类的「像什么推送了、直播了、统计了等，非核心类的东西直接使用第三方服务，以节省时间为主」，总之一句话–使用最少的时间和最低的成本开发出产品「如果啥都自己亲自去弄，并且把所有的问题都考虑进去，那产品开发出来，黄花菜都凉了，只有死路一条」，在这个类型的公司中基本上不给你重构和架构设计的时间「当然技术型驱动公司还是会很重视的」，所以一切以交付为主</p><p>网上常常出来，xxx 的架构演进，xxx 的架构升级，我认为在这一个阶段由于人员和时间的关系，你没有精力去做这些时间，老板也不会允许你去这样做的「这跟情怀没有关系，并定公司不赚钱，一切都是扯淡」</p><h5 id="2、中大型公司"><a href="#2、中大型公司" class="headerlink" title="2、中大型公司"></a>2、中大型公司</h5><p>对于中型和大型公司来说，对产品我们有一些自己的沉淀，并且人员也相对来说足够充裕，我们就可以去做一些整理归纳「把产品规范和架构升级纳入迭代的进度当中」，大公司我们就不说了，人家不仅注重架构设计、开发分层「并且也非常乐意重复造轮子，并且这类公司常常有自己的研究小组和创新团队，专门去做这些事情」，对于中型公司来说，刚好是界于小型和大型之间的，我们可以自己造部分轮子，并结合业务去扩展相应的技术栈，对于花个五天能为以后节省十天时间的事情我们何乐而不为「所以一定要做一个评估，当然不仅仅是时间、性能等也是同等适用的」</p><p>最好有什么用，适合才是最重要的</p><h3 id="六、拥抱变化"><a href="#六、拥抱变化" class="headerlink" title="六、拥抱变化"></a>六、拥抱变化</h3><p>当然我们要拥抱新的技术「工作中不一定能用到，但是我们适当的了解一下，把握一个技术的前沿和趋势为我们以后做技术选型打一个基础」，对于新的技术我们要心存敬畏而不是一味的”鄙视”「更不要以手头的任务太重没有时间去看为理由来成为自己不学习的借口，刷抖音杂那么有时间的？？」</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容<br>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/侃大山/">侃大山</a></p><p><a href="https://mp.weixin.qq.com/s/8rqTAlalOqvIMHlY3HbFTQ" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 侃大山 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 侃大山 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08、模版方法模式</title>
      <link href="/2019/07/08/template-method/"/>
      <url>/2019/07/08/template-method/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/08/template-method/templatemethod.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li><li>3、Demo 地址：Android Demo—<a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 对应的 TemplateMethod<br>java Demo：<a href="https://github.com/tigerchain/designpattern_javademo/tree/master/src/template" target="_blank" rel="noopener">https://github.com/tigerchain/designpattern_javademo/tree/master/src/template</a></li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是模版方法模式"><a href="#一、什么是模版方法模式" class="headerlink" title="一、什么是模版方法模式"></a>一、什么是模版方法模式</h3><h4 id="1、生活中的模版方法模式"><a href="#1、生活中的模版方法模式" class="headerlink" title="1、生活中的模版方法模式"></a>1、生活中的模版方法模式</h4><blockquote><p>1、烧茶、煮咖啡</p></blockquote><p>身为苦逼的程序猿(媛),一定是茶叶和咖啡的忠实粉丝，多少个夜晚加班加点，累了困了喝红牛—不对是喝茶叶、咖啡「我们无形中使用了一个设计模式–模版方法模式」。我们知道不管是烧茶、煮咖啡都基本上分为以下几个步骤：</p><ul><li>1、烧水</li><li>2、把茶叶或咖啡放入水壶中</li><li>3、加热不停的煮</li><li>4、把煮好的茶叶或咖啡到入杯子中</li><li>5、拿起杯子喝「不能直接喝，小心你的嘴」</li></ul><p>我们看到除了原材料放入的不同「茶叶和咖啡」，其它的方法都一毛一样，那么我们把这些方法就可以制定为一个模版「相当于我们有一个既能烧茶又有煮咖啡的器具」，这就是模版定义了一个基本框架</p><blockquote><p>2、高考答题</p></blockquote><p>说了上面的例子，大家可能还懵懵的。那么来说一个更实际的例子，参加过考虑的同学都知道一张考试卷子对所有的同学都是一模一样的，这个卷子就是一个模版，以数学卷子为例吧：有选择题、填空题、判断题、应用题「这都是固定的」–这就是一个题的框架，是一个模版，至于每位考生如何答题那就考生的事情</p><h4 id="2、程序中的模版方法模式"><a href="#2、程序中的模版方法模式" class="headerlink" title="2、程序中的模版方法模式"></a>2、程序中的模版方法模式</h4><blockquote><p>模版方法模式的定义</p></blockquote><p>定义一个操作算法的骨架「我们知道这个算法所需要的关键步骤」，而将一些步骤的实现延迟到子类中去实现。通俗的说模版就是一个抽象类，方法就是策略「一些固定的步骤」。模版方法模式是一个行为型模式</p><blockquote><p>模版方法模式的特点</p></blockquote><p>算法的结构不变，子类可以改变模版的某些步骤的实现方式，模版方法就是抽象的封装，一般情况下，模版方法中有一些具体方法「部分逻辑」，抽象方法实现其它剩余的逻辑「子类不同实现的方式就不同」，并且部分逻辑和剩余逻辑共同组成了算法的结构「一般是执行流程，这些流程是固定的，但是具体的实现细节不一样，就可以使用模版方法」</p><p>封装不变的部分，扩展可变的部分「可变的部分交给子类去实现」</p><blockquote><p>模版方法模式的目的</p></blockquote><p>模版方法模式的目的就是让子类扩展或者具体实现模版中的固定算法的中的某些算法的步骤</p><img src="/2019/07/08/template-method/temp_frame.png" title="模版方法简单框架"><blockquote><p>模版方法模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>AbstractClass</td><td>抽象类</td><td>抽象模版类</td></tr><tr><td>ConcreateClass</td><td>具体模版</td><td>可以有多个「因为每个具体模版实现的内容可能不一样」</td></tr><tr><td>HookMethod</td><td>钩子方法</td><td>不是必须的，是一个开关，用来提供某些方法是否需要调用</td></tr></tbody></table><blockquote><p>模版方法模式简单的 UML</p></blockquote><img src="/2019/07/08/template-method/templatemethod_uml.jpg" title="模版方法模式简单的 UML"><h3 id="二、模版方法模式举例"><a href="#二、模版方法模式举例" class="headerlink" title="二、模版方法模式举例"></a>二、模版方法模式举例</h3><blockquote><p>1、把大象装冰箱</p></blockquote><p>把大象装冰箱一共分为几步？我们都知道三步：第一步把冰箱门打开,第二步把大象装进去,第三步把冰箱门盖上。我们把装大象的这三步运作可以看做一个算法的步骤「这个步骤不变」，但是具体的你是使用松下冰箱装大象，还是海尔冰箱装大象，再进一步说使用冰箱装所有动物，大象只是其中的一种，那么就需要抽象出一个模版来，我们使用模版方法模式来实现这一过程</p><p><code>把大象装冰箱简单的 UML</code></p><img src="/2019/07/08/template-method/elephant_tem_md_uml.jpg" title="把大象装冰箱简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、抽象出一个冰箱接口 IRefrige.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象冰箱 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRefrige</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//取得品牌的名字</span>    String <span class="token function">getRefrigeModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置冰箱品牌</span>    <span class="token keyword">void</span> <span class="token function">setModel</span><span class="token punctuation">(</span>String model<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、抽象一个动物类 Animail.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义动物的抽象类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animail</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 取得动物的名字</span>    <span class="token keyword">abstract</span> String <span class="token function">getAnimailName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义抽象模版方法类 AbstractMothodWork.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象的模版类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractMothodWork</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//打开冰箱</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>IRefrige iRefrige<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把动物装进去</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">putin</span><span class="token punctuation">(</span>Animail animail<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把冰箱门盖上</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模版方法 定义算法骨架 为了防止子类篡改模版方法步骤，加一个 final</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>IRefrige iRefrige<span class="token punctuation">,</span>Animail animail<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>iRefrige<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一步</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">putin</span><span class="token punctuation">(</span>animail<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第二步</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第三步</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们看到冰箱装动物的步骤是固定的，但是具体步骤内部实现交给子类去处理吧，这就是模版模式的使用场景</p><ul><li>4、来一个具体的模版 ConcreateMethodWork.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的模版类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreateMethodWork</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMothodWork</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IRefrige iRefrige <span class="token punctuation">;</span>    <span class="token keyword">private</span> Animail animail <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>IRefrige iRefrige<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iRefrige <span class="token operator">=</span> iRefrige <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 1 步把 "</span><span class="token operator">+</span>iRefrige<span class="token punctuation">.</span><span class="token function">getRefrigeModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 门打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">putin</span><span class="token punctuation">(</span>Animail animail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>animail <span class="token operator">=</span> animail <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 2 步把 "</span><span class="token operator">+</span>animail<span class="token punctuation">.</span><span class="token function">getAnimailName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 装进去"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 3 步把冰箱门盖上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、来一个松下冰箱「当然可以是任意品牌的冰箱」 PanasonnicRefrige.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一台松下冰箱 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PanasonnicRefrige</span> <span class="token keyword">implements</span> <span class="token class-name">IRefrige</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String model <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getRefrigeModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token operator">!=</span>null<span class="token operator">?</span><span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setModel</span><span class="token punctuation">(</span>String model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、被装的对象大象「当然还可以任何动物」 Elephant.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 创建一个动物--大象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Elephant</span> <span class="token keyword">extends</span> <span class="token class-name">Animail</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">getAnimailName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"大象"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>7、测试一下 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 要有冰箱</span>        IRefrige panasonnicRefrige <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PanasonnicRefrige</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        panasonnicRefrige<span class="token punctuation">.</span><span class="token function">setModel</span><span class="token punctuation">(</span><span class="token string">"松下冰箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要有动物，这里是装大象</span>        Animail elephant <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//来个模版</span>        AbstractMothodWork  work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreateMethodWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行步骤</span>        work<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>panasonnicRefrige<span class="token punctuation">,</span>elephant<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>8、运行查看结果</li></ul><img src="/2019/07/08/template-method/elephant_result.png" title="把大家装冰箱的结果"><p>到此为止，我们就把大象装到冰箱里面了，当然你也可以把老虎、狼、猫装进冰箱「扩展模版即可」，其实我们使用回调也可以实现同样的功能「本质上是模版方法的一种变异—是什么？还是模版方法模式」，我们使用回调方式修改上面代码「不破坏原来的结构，我们直接新加类」</p><ul><li>9、我们把想要扩展的方法全部抽象成接口，定义 ITemplate.java</li></ul><img src="/2019/07/08/template-method/elephant_callback.png" title="抽象接口"><ul><li>10、定义具体的模版 ConCreateTemplate.java 由于我们把想要扩展的模版方法都抽象出来了，所以我们新建模版的时候就不用抽象了「即定义具体的模版就可以了」 </li></ul><img src="/2019/07/08/template-method/concreate_callback_tem.png" title="定义具体的模版"><ul><li>11、修改测试类 Test.java 只贴出调用代码</li></ul><img src="/2019/07/08/template-method/test_callback_tem.png" title="修改测试类"><p>运行结果和 8 中的结果是一样的，这里就不贴图了，具体的代码可以看:<a href="https://github.com/githubchen001/designpattern_javademo/tree/master/src/template/putAnimalInRefrigerator" target="_blank" rel="noopener">https://github.com/githubchen001/designpattern_javademo/tree/master/src/template/putAnimalInRefrigerator</a></p><blockquote><p>2、数据库增、删、改、查封装</p></blockquote><p>操作过数据库的朋友对数据的增、删、改、查再熟悉不过了，数据库无非就是干这个的。那么我们可以使用模版方法模式把数据库的增、删、改、查封装，至于查什么，改什么，交给具体的模版吧，典型的模版方法模式</p><p><code>数据库增、删、改、查 简单的 UML</code></p><img src="/2019/07/08/template-method/dbcrud_uml.jpg" title="数据库增、删、改、查 简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、定义抽象的模版–数据库增、删、改查抽象类 AbstractDAO.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义抽象的数据库增、删、改、查的模版 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractDAO</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 增加数据</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 id 删除数据</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新数据</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 id 查找数据</span>    <span class="token keyword">abstract</span> T <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查找所有数据</span>    <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们这里以泛型去接收实体类，至于查那个交给子类去实现–这样就把共同点抽象出来了</p><ul><li>2、我们操作用户表吧，定义一个 Person.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一个 javaBean 对应数据库中的表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// id</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 年龄</span>    <span class="token keyword">private</span> String address <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 地址</span>    <span class="token comment" spellcheck="true">// 省略 setter 和 getter 方法</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">}</span></code></pre><ul><li>3、定义一个操作用户表的 DAO PersonConCreateDAO.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> Created by TigerChain <span class="token operator">*</span> 一个具体的模版对用户表的增、删、改、查 <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonConCreateDAO</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDAO</span><span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 库中的用户列表</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Person<span class="token operator">></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实际上应该做插入数据库操作，为了简单我们直接输出语句</span>        persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加了 person "</span><span class="token operator">+</span>person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了 id 为 "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">" person "</span><span class="token operator">+</span>persons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        person<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"TigerChain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中国陕西西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新了 person "</span><span class="token operator">+</span>person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Person <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实际这里应该从数据库中查出数据，为了简单模拟一个数据</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            person<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"TigerChain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中国陕西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查找id 为 "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">" 的 person "</span><span class="token operator">+</span>person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查找所有的 person "</span><span class="token operator">+</span> persons<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> persons<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、测试一下 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟两个用户数据</span>        Person person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        person1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"TigerChain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person1<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中国陕西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        person2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小陈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person2<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中国陕西西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonConCreateDAO personConCreateDAO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonConCreateDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给库中添加用户</span>        personConCreateDAO<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>        personConCreateDAO<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新用户 1 的数据</span>        personConCreateDAO<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>        personConCreateDAO<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personConCreateDAO<span class="token punctuation">.</span><span class="token function">findall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除一条数据</span>        personConCreateDAO<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查找所有库中的数据</span>        personConCreateDAO<span class="token punctuation">.</span><span class="token function">findall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、运行查看结果</li></ul><img src="/2019/07/08/template-method/obcrud_result.png" title="运行结果"><p>至此，我们就使用模版方法模式实现了数据库的增、删、改、查、功能，至于你想操作别的表那直接写一个具体的模版继承抽象模版即可，大家动手写一下，好好的体验一下模版方法模式</p><blockquote><p>3、考试答题</p></blockquote><p>考试卷对每个考生来说都是一样的「考试卷就是一个模版」，至于每个人如何答题那是每个考生的事情，针对考试答题我们可以使用模版方法模式来模拟这一过程，代码就不贴了「我上传到了 github 上」，具体看这里：<a href="https://github.com/githubchen001/designpattern_javademo/tree/master/src/template/examination_page" target="_blank" rel="noopener">https://github.com/githubchen001/designpattern_javademo/tree/master/src/template/examination_page</a></p><p><strong>PS:</strong>模版方法模式除了抽象模版、具体模版之外，还可能会有一个钩子方法「Hook」,也就是说抽象模版中把规定好了算法的步骤 1 2 3 4 ，如果我只想使用 1 2 3 ，不想使用 4 呢？Hook 方法就派上用场了，以下是抽象模版带 Hook 的伪代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTemplateMethod</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">step4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">step5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模版方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isUseStep4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">step4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">step5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 钩子方法</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isUseStep4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>子类重写 isUseStep4() 的方法返回 true 或 fals 决定是否使用 step4 步骤,这就是钩子方法，大家自行感受一下，其实就是一个开关而已</p><h3 id="三、Android-源码中的模版方法模式"><a href="#三、Android-源码中的模版方法模式" class="headerlink" title="三、Android 源码中的模版方法模式"></a>三、Android 源码中的模版方法模式</h3><blockquote><p>1、View 中的 draw(Canvas canvas) 方法</p></blockquote><p>我们自定义 View 的时候有时调用 ondraw(Canvas canvas) 方法，这里就用到了模版方法模式，我们来看一下 ondraw 在什么情况下调用「在 View 的 draw() 方法中调用了」，看看 draw() 方法的核心代码</p><img src="/2019/07/08/template-method/draw_method.png" title="draw 核心代码"><p>这里只不过把抽象方法改成了 protected 的一个空方法而已「本质上是一样的」，具体代理就不贴了，大家动手扒扒这部分源码，其实模版方法模式我们经常用「只不过没有意识到而已」</p><blockquote><p>2、最熟悉的 Activity</p></blockquote><p>Activity 就是一个模版，其中生命周期的方法就是”不固定”的方法，如果要改变子类重写即可</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Activity</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">{</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里定义成 protected 方法，那么这个方法既可以是固定的也可以是不固定的「子类实现就不固定，如果不实现就是固定的,很灵活」，Activity 就是一个模版方法模式「你天天使用 Activity 知道它是模版模式吗？」</p><blockquote><p>3、封装 BaseActivity</p></blockquote><p>做过 Android 的朋友肯定都封装过 BaseActivity ,把一些共公的部分抽象出来，然后封装变化，比如我们的 app 应用界面都有共公的头、下面是内容区域，如下图</p><img src="/2019/07/08/template-method/baseActivity.png" title="封装 BaseActivity"><p>然后不同的界面写不同的子类继承即可，我们使用伪代码来模拟一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TemplateMethodActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button titlebar_btn_left<span class="token punctuation">,</span>titlebar_btn_right <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左右按钮 </span>    <span class="token keyword">private</span> TextView titlebar_tv_center <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 中间文字</span>    <span class="token keyword">private</span> RelativeLayout content <span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 内容布局</span>    <span class="token keyword">private</span> View titleView <span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载模版 xml 文件</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>templatemethod_activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置子类布局</span>        <span class="token function">setContentLayout</span><span class="token punctuation">(</span><span class="token function">getLayoutResID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getLayoutResID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化操作，比如修改按钮样式等</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取得子布局的 xml 文件</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getLayoutResID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置到 content 布局上</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setContentLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> ResId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>ResId<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略若干方法</span><span class="token punctuation">}</span></code></pre><p>然后子类继承这个 Activity 重写抽象方法即可实现自己的界面内容，我们写一个登录界面继承 TemplateMethodActivity ，代码不贴了，直接上地址：<a href="https://github.com/githubchen001/DesignPattern" target="_blank" rel="noopener">https://github.com/githubchen001/DesignPattern</a> 查看 TemplateMethod 相关代码即可</p><p>最终运行效果如下：</p><img src="/2019/07/08/template-method/loginActivity.png" title="模版方法模式实现 BaseActivity 结果"><p>怎么样，是不是一直在使用模版方法模式「只是不知道而已」</p><h3 id="四、模版方法模式的优缺点"><a href="#四、模版方法模式的优缺点" class="headerlink" title="四、模版方法模式的优缺点"></a>四、模版方法模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、封装不变的部分，扩展可变的部分「交给子类去实现」，这是设计模式一惯的原则「开、闭原则」</li><li>2、实现了代码复用</li></ul><blockquote><p>缺点</p></blockquote><ul><li>继承关系本身的缺点，如果父类添加一个新的抽象方法，所有的子类都要改一遍–痛苦</li></ul><h3 id="五、模版方法模式-VS-策略模式"><a href="#五、模版方法模式-VS-策略模式" class="headerlink" title="五、模版方法模式 VS 策略模式"></a>五、模版方法模式 VS 策略模式</h3><p>以前介绍过策略模式，是对算法的封装，而模版方法模式也是对算法执行，但是它们之间有明显的区别</p><ul><li><p><strong>策略模式：</strong>目的是使不同的算法可以被相互替换，不影响客户端的使用</p></li><li><p><strong>模版方法模式：</strong>针对定义一个算法的流程，而将一些不太一样的“具体实现步骤”交给子类去实现「不改变算法的流程」</p></li></ul><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><ul><li>1、抽象类就是一个模版，而接口是一个标准，按这样的规则可以确定该使用接口还是抽象类</li><li>2、模版方法模式就是把不固定的步骤实现方式延迟到子类实现的一种方式，它是一种行为模式</li><li>3、模版方法模式基本步骤是固定的「实际开发中会有很多变种，比如回调替换，没有固定的步骤全是不固定的等」</li><li>4、 一般情况下为了防止子类去更新算法的实现步骤，在抽象的模版方法上加一个 final 关键字</li></ul><p>到上为止，模版方法模式就介绍完了，还是那句话，一定要动手试试哦</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/">人人都会设计模式</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/DesignPattern" target="_blank" rel="noopener">人人都会设计模式</a> 方便大家查看</p><p><a href="https://mp.weixin.qq.com/s/20sg30NMCisB2_-Lk8YxNQ" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07、建造者模式</title>
      <link href="/2019/07/07/builder/"/>
      <url>/2019/07/07/builder/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/07/builder/builder_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 FactoryPatttern/Builder 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是建造者模式"><a href="#一、什么是建造者模式" class="headerlink" title="一、什么是建造者模式"></a>一、什么是建造者模式</h3><h4 id="1、生活中的建造者模式"><a href="#1、生活中的建造者模式" class="headerlink" title="1、生活中的建造者模式"></a>1、生活中的建造者模式</h4><blockquote><p>1、盖房子</p></blockquote><p>我们在生活中盖房子，一般就是打地基，盖框架「用砖头或钢筋混凝土」，然后是粉刷。基本上就是这个路子。当然我们这些工作全部可以自己做，可也以找几个工人去干，当然还可以可以直接找一个设计师，直接说我就要这样的房子，然后就不管了，最后问设计师「设计师给一张纸给工人，工人就啪啪的干了」验收房子即可「至于你是如何建的过程我不关心，我只要结果」—这就是建造者模式</p><blockquote><p>2、组装电脑</p></blockquote><p>我们买的电脑都是由主板、内存、cpu、显卡等组成，如何把这些东西组装起来给用户这就是建造者模式的作用，不同的人对电脑的配置需求不一样的「打游戏的对显卡要求高」，但是电脑构成部件是固定的，我们找电脑城的装机人员把电脑装起来这一过程就是建造模式</p><blockquote><p>3、软件开发</p></blockquote><p>我们开发一款产品，需要技术主管、产品经理、苦逼的程序员。在这里，产品经理就是指挥者「Director」和客户沟通，了解产品需求，技术主管是抽象的建造者[Builder]，让猿们杂做就杂做，而程序员就是体力劳动者「即具体的建造者，按照技术主管下发的任务去做」— 这就是一个接近完美的建造者模式「为什么说接近呢？因为没有百分之百，靠：又忘记吃药了」</p><h4 id="2、程序中的建造者模式"><a href="#2、程序中的建造者模式" class="headerlink" title="2、程序中的建造者模式"></a>2、程序中的建造者模式</h4><blockquote><p>建造者模式的定义</p></blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示，这是官方定义，通俗的说就是：建造者模式就是如何一步步构建一个包含多个组成部件的对象，相同的构建过程可以创建不同的产品</p><blockquote><p>建造者模式的特点</p></blockquote><p>建造者模式是一种创建型模式，适用于那些流程固定「顺序不一定固定」，建造的目标对象会有所改变这种场景「比如画一条狗，这个目标不变，但是不同的是有黄狗，胖狗，瘦狗等」，还有一种场景是代替多参数构造器</p><blockquote><p>建造者模式的作用</p></blockquote><ul><li>1、用户不知道对象的建造过程和细节就可以创建出复杂的对象「屏蔽了建造的具体细节」</li><li>2、用户只需给出复杂对象的内容和类型可以创建出对象</li><li>3、建造者模工按流程一步步的创建出复杂对象</li></ul><blockquote><p>建造者模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Builder</td><td>接口或抽象类</td><td>抽象的建造者，不是必须的</td></tr><tr><td>ConcreateBuilder</td><td>具体的建造者</td><td>可以有多个「因为每个建造风格可能不一样」</td></tr><tr><td>Product</td><td>普通的类</td><td>具体的产品「即被建造的对象」</td></tr><tr><td>Director</td><td>导演也叫指挥者</td><td>统一指挥建造者去建造目标，导演不是必须的</td></tr></tbody></table><blockquote><p>建造者模式简单的 UML</p></blockquote><img src="/2019/07/07/builder/BuilderPattern.jpg" title="建造者模式简单的 UML"><h3 id="二、建造者模式的举例"><a href="#二、建造者模式的举例" class="headerlink" title="二、建造者模式的举例"></a>二、建造者模式的举例</h3><blockquote><p>1、组装电脑</p></blockquote><p>小明想组装一个台式电脑，小明对电脑配置一窍不通，就直接跑到电脑城给装机老板说我要一台打游戏非常爽的电脑，麻烦你给装一下「配置什么的你给我推荐一下吧」，于是老板就让它的员工「小美」按小明的要求装了一个性能灰常牛 B 的电脑，1 个小时后电脑装好了，小明交钱拿电脑走人。不一会儿小张又来了，要一个满足平时写文章就可以的电脑，老板针对小张的要求给不同的装机配置。不同的人有不同的配置方案「但是装机流程是一样的」，这就是一个典型的建造者模式</p><p><code>组装电脑简单的 UML</code></p><img src="/2019/07/07/builder/AssemblerComputerBuilderUml.jpg" title="组装电脑简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、创建被建造的对象电脑 — Computer.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 产品类--被建造的对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String cpu <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cpu</span>    <span class="token keyword">private</span> String hardDisk <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//硬盘</span>    <span class="token keyword">private</span> String mainBoard <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 主板</span>    <span class="token keyword">private</span> String memory <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内存</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略 getter 和 setter<span class="token punctuation">}</span></code></pre><ul><li>2、抽象的建造者 — Builder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象的建造者，即装电脑的步骤 * 至于安装什么型号的主板，不是我关心，而是具体的建造者关心的 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 安装主板</span>    <span class="token keyword">void</span> <span class="token function">createMainBoard</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 安装 cpu</span>    <span class="token keyword">void</span> <span class="token function">createCpu</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 安装硬盘</span>    <span class="token keyword">void</span> <span class="token function">createhardDisk</span><span class="token punctuation">(</span>String hardDisk<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 安装内存</span>    <span class="token keyword">void</span> <span class="token function">createMemory</span><span class="token punctuation">(</span>String memory<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 组成电脑</span>    Computer <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、具体建造者，也就是装机工人小美 — AssemblerBuilder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 具体的建造者，这里是商场的一个装机人员 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssemblerBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createCpu</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createhardDisk</span><span class="token punctuation">(</span>String hardDisk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setHardDisk</span><span class="token punctuation">(</span>hardDisk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createMainBoard</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMainBoard</span><span class="token punctuation">(</span>mainBoard<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createMemory</span><span class="token punctuation">(</span>String memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Computer <span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> computer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、还有老板「”指手画脚的人”」安排装机工工作 — Direcror.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 声明一个导演类「指挥者，这里可以装电脑的老板」，用来指挥组装过程，也就是组装电脑的流程 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Direcror</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Builder builder <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用多态，装机工非常多，我管你小美，小兰，小猪，我统统收了</span>    <span class="token keyword">public</span> <span class="token function">Direcror</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 老板最后只想看到装成的成品---要交到客户手中</span>    <span class="token keyword">public</span> Computer <span class="token function">createComputer</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">,</span>String hardDisk<span class="token punctuation">,</span>String mainBoard<span class="token punctuation">,</span>String memory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体的工作是装机工去做</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createMainBoard</span><span class="token punctuation">(</span>mainBoard<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createCpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createMemory</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createhardDisk</span><span class="token punctuation">(</span>hardDisk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 装机员小美</span>      Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AssemblerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 老板把小明的需求转给小美</span>      Direcror direcror <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Direcror</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 老板最后拿到成品机子，工作全由小美去做</span>      Computer computer <span class="token operator">=</span> direcror<span class="token punctuation">.</span><span class="token function">createComputer</span><span class="token punctuation">(</span><span class="token string">"Intel 酷睿i9 7900X"</span><span class="token punctuation">,</span><span class="token string">"三星M9T 2TB （HN-M201RAD）"</span><span class="token punctuation">,</span><span class="token string">"技嘉AORUS Z270X-Gaming 7"</span><span class="token punctuation">,</span><span class="token string">"科赋Cras II 红灯 16GB DDR4 3000"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明这台电脑使用的是：\n"</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">getMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 主板\n"</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">getCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" CPU\n"</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">getHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"硬盘\n"</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">getMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 内存\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/07/builder/computer_builder.png" title="装机结果"><p>怎么样，至于小张，小猪要装机把自己要的配置给老板即可，然后老板如何装机不用你管，你就等着收装好的机子吧</p><blockquote><p>2、盖房子</p></blockquote><p>盖房子的基本步骤和流程是固定的无非就是打地基、盖框架、然后浇筑「至于盖平房、还是楼房那是每个客户的具体需求」。总体来说盖房子以有以三种方式：</p><ul><li>1、自己盖房子「没有办法有的人就是牛 B ,自己设计，自己动手，当然这属于小房子，你让一个人盖个32 层让我看看」</li><li>2、想盖房子的人是一个包工头，自己找一帮工人自己就把房子搞定了</li><li>3、想盖房子的人就是一个普通人，啥也不会，找一个设计师说“我就要盖个房子，南北通透，四秀常春”，设计师说没有问题，设计师把设计出来的图纸扔给包工头说：“就照这个样子盖”，包工头拿着图纸给工人们分工派活，最后完工</li></ul><p><code>盖房子建造者模式简单的 UML</code></p><img src="/2019/07/07/builder/houseBuilderUml.jpg" title="盖房子建造者模式简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、房子对象 House.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 最终的产品---房子 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打地基</span>    <span class="token keyword">private</span> String foundation <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 盖框架</span>    <span class="token keyword">private</span> String frame <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 浇筑</span>    <span class="token keyword">private</span> String pouring <span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略 setter 和 getter <span class="token punctuation">}</span></code></pre><ul><li>2、抽象建造者「包工头」 HouseBuilder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打地基</span>    <span class="token keyword">void</span> <span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 盖框架</span>    <span class="token keyword">void</span> <span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 浇灌</span>    <span class="token keyword">void</span> <span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 房子建成 </span>    House <span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、具体建造者「工人」–盖平房 PingFangBuilder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 盖平房 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PingFangBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> House house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setFoundation</span><span class="token punctuation">(</span><span class="token string">"盖平房的地基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"盖平房的框架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setPouring</span><span class="token punctuation">(</span><span class="token string">"盖平房不用浇灌，直接人工手刷就可以"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> House <span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> house<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、具体建造者「工人」–盖楼房 LouFangBuilder.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 盖楼房 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LouFangBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> House house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setFoundation</span><span class="token punctuation">(</span><span class="token string">"盖楼房的地基就打十米深"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"楼房的框架要使用非常坚固钢筋混凝土"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">setPouring</span><span class="token punctuation">(</span><span class="token string">"楼房拿个罐车把框架拿混凝土灌满即可"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> House <span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> house<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、指挥者「设计师」 HouseDirector.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 设计师 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseDirector</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 指挥包工头</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHouse</span><span class="token punctuation">(</span>HouseBuilder houseBuilder<span class="token punctuation">)</span><span class="token punctuation">{</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、测试一下 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 方式一、客户自己盖房子，亲力亲为</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========客户自己建房子，必须知道盖房的细节========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        House house <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        house<span class="token punctuation">.</span><span class="token function">setFoundation</span><span class="token punctuation">(</span><span class="token string">"用户自己建造房子：打地基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        house<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"用户自己建造房子：盖框架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        house<span class="token punctuation">.</span><span class="token function">setPouring</span><span class="token punctuation">(</span><span class="token string">"用户自己建造房子：浇筑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span><span class="token function">getFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span><span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span><span class="token function">getPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式二、客户找一个建造者盖房子「充当包工头角色」，但是要知道如何盖房子「调用建造者盖房子的顺序」</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========客户直接找盖房子的工人「建造者」，客户要调用建造者方法去盖房子，客户必须得知道房子如何造========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HouseBuilder houseBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PingFangBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">doFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">doFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">dpPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        House house1 <span class="token operator">=</span> houseBuilder<span class="token punctuation">.</span><span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house1<span class="token punctuation">.</span><span class="token function">getFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house1<span class="token punctuation">.</span><span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house1<span class="token punctuation">.</span><span class="token function">getPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式三、使用建造者模式，找一个设计师「设计师拉一帮建造者去干活」，告诉他我想要什么样的房子，最后客户只问设计师要房子即可</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========客户直接找一个设计师，设计师统一指挥建造者盖房子，房子杂盖，客户不关心，最后只是找设计师要房子即可========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HouseBuilder pingFangBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PingFangBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        HouseDirector houseDirector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        houseDirector<span class="token punctuation">.</span><span class="token function">buildHouse</span><span class="token punctuation">(</span>pingFangBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        House houseCreateByBuilder <span class="token operator">=</span> pingFangBuilder<span class="token punctuation">.</span><span class="token function">getHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>houseCreateByBuilder<span class="token punctuation">.</span><span class="token function">getFoundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>houseCreateByBuilder<span class="token punctuation">.</span><span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>houseCreateByBuilder<span class="token punctuation">.</span><span class="token function">getPouring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们对比了三种方式，自己盖房子，找工人盖房子，找设计师盖房子来逐步感受一下建造者模式的优点</p><ul><li>6、运行查看结果</li></ul><img src="/2019/07/07/builder/housebuild_result.png" title="盖房子结果"><p>可以看到最后一种最舒服，盖房子的时候直接外包给设计师自己就不用管了，到时候问设计师要建好的成品房子即可，这样对客户来说具体如何盖房子我不需要知道，屏蔽细节「只能说有钱就是任性」</p><blockquote><p>3、替代多参数构造函数的建造者模式，以组装电脑为例子</p></blockquote><p>前面我们说了在建造者模式中 Director 不是必须的，Director 的作用不是构造产品「建造产品是建造者的事情」而是指挥协调建造的步骤「当有一个新的建造者的时候直接实现抽象建造者，而不用关心具体的执行步骤，这就是 Director 干的事情」，我们直接看代码吧</p><ul><li>1、原始的 Computer.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String mainBoard <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 主板</span>    <span class="token keyword">private</span> String cpu <span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// cpu</span>    <span class="token keyword">private</span> String hd <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 硬盘</span>    <span class="token keyword">private</span> String powerSupplier <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 电源</span>    <span class="token keyword">private</span> String graphicsCard<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显卡</span>    <span class="token comment" spellcheck="true">// 其它一些可选配置</span>    <span class="token keyword">private</span> String mouse <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 鼠标</span>    <span class="token keyword">private</span> String computerCase <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//机箱</span>    <span class="token keyword">private</span> String mousePad <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//鼠标垫</span>    <span class="token keyword">private</span> String other <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//其它配件</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">,</span>String cpu<span class="token punctuation">,</span>String hd<span class="token punctuation">,</span>String powerSupplier<span class="token punctuation">,</span>                      String graphicsCard<span class="token punctuation">,</span>String mouse<span class="token punctuation">,</span>String computerCase<span class="token punctuation">,</span>String mousePad<span class="token punctuation">,</span>String other<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> mainBoard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hd <span class="token operator">=</span> hd <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>powerSupplier <span class="token operator">=</span> powerSupplier <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>graphicsCard <span class="token operator">=</span> graphicsCard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computerCase <span class="token operator">=</span> computerCase <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mousePad <span class="token operator">=</span> mousePad <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>other <span class="token operator">=</span> other <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Computer</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">,</span>String cpu<span class="token punctuation">,</span>String hd<span class="token punctuation">,</span>String powerSupplier<span class="token punctuation">,</span>                    String graphicsCard<span class="token punctuation">,</span>String mouse<span class="token punctuation">,</span>String computerCase<span class="token punctuation">,</span>String mousePad<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> mainBoard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hd <span class="token operator">=</span> hd <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>powerSupplier <span class="token operator">=</span> powerSupplier <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>graphicsCard <span class="token operator">=</span> graphicsCard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computerCase <span class="token operator">=</span> computerCase <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mousePad <span class="token operator">=</span> mousePad <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略其它的构造方法和 setter 和 getter 方法<span class="token punctuation">}</span></code></pre><p>如果我们想要调用这个类就得在构参数方法中传递“无数个参数”「如果有的参是一些可选项，我们还得重写构造方法」，要么就要调用多个 setter 方法，才能给一个对象赋值，方法虽然可行，但是也太扯淡了「谁能记住那些参数呀」，那么建造者模式可以解决多参数构造方法来建造对象</p><ul><li>2、使用建造者建立 ComputerB.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 替代多参构造方法--建造者模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerB</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String mainBoard <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 主板</span>    <span class="token keyword">private</span> String cpu <span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// cpu</span>    <span class="token keyword">private</span> String hd <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 硬盘</span>    <span class="token keyword">private</span> String powerSupplier <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 电源</span>    <span class="token keyword">private</span> String graphicsCard<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显卡</span>    <span class="token comment" spellcheck="true">// 其它一些可选配置</span>    <span class="token keyword">private</span> String mouse <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 鼠标</span>    <span class="token keyword">private</span> String computerCase <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//机箱</span>    <span class="token keyword">private</span> String mousePad <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//鼠标垫</span>    <span class="token keyword">private</span> String other <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//其它配件</span>    <span class="token comment" spellcheck="true">// ComputerB 自己充当 Director </span>    <span class="token keyword">private</span> <span class="token function">ComputerB</span><span class="token punctuation">(</span>ComputerBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> builder<span class="token punctuation">.</span>mainBoard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> builder<span class="token punctuation">.</span>cpu <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hd <span class="token operator">=</span> builder<span class="token punctuation">.</span>hd <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>powerSupplier <span class="token operator">=</span> builder<span class="token punctuation">.</span>powerSupplier <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>graphicsCard <span class="token operator">=</span> builder<span class="token punctuation">.</span>graphicsCard <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> builder<span class="token punctuation">.</span>mouse <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>computerCase <span class="token operator">=</span> builder<span class="token punctuation">.</span>computerCase <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mousePad <span class="token operator">=</span> builder<span class="token punctuation">.</span>mousePad <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>other <span class="token operator">=</span> builder<span class="token punctuation">.</span>other <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明一个静态内存类 Builder</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ComputerBuilder</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一个电脑的必须配置</span>        <span class="token keyword">private</span> String mainBoard <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 主板</span>        <span class="token keyword">private</span> String cpu <span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// cpu</span>        <span class="token keyword">private</span> String hd <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 硬盘</span>        <span class="token keyword">private</span> String powerSupplier <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 电源</span>        <span class="token keyword">private</span> String graphicsCard<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显卡</span>        <span class="token comment" spellcheck="true">// 其它一些可选配置</span>        <span class="token keyword">private</span> String mouse <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 鼠标</span>        <span class="token keyword">private</span> String computerCase <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//机箱</span>        <span class="token keyword">private</span> String mousePad <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//鼠标垫</span>        <span class="token keyword">private</span> String other <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//其它配件</span>        <span class="token comment" spellcheck="true">// 这里声明一些必须要传的参数「规定这些参数是必须传的，这里只是举例，再实中可能参数都是可选的」</span>        <span class="token keyword">public</span> <span class="token function">ComputerBuilder</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">,</span>String cpu<span class="token punctuation">,</span>String hd<span class="token punctuation">,</span>String powerSupplier<span class="token punctuation">,</span>String graphicsCard<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> mainBoard <span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu <span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hd <span class="token operator">=</span> hd <span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>powerSupplier <span class="token operator">=</span> powerSupplier <span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>graphicsCard <span class="token operator">=</span> graphicsCard <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> ComputerBuilder <span class="token function">setMainBoard</span><span class="token punctuation">(</span>String mainBoard<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mainBoard <span class="token operator">=</span> mainBoard<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> ComputerBuilder <span class="token function">setCpu</span><span class="token punctuation">(</span>String cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 其它的一些 <span class="token function">setXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法        <span class="token comment" spellcheck="true">// 生成最终的产品</span>        <span class="token keyword">public</span> ComputerB <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputerB</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码注释非常详细，乍一看好像和建造者模式没有毛关系，但是我们细细一分析这个确实是一个建造者模式，我们看一看：产品是–&gt;ComputerB,具体的建造者是一个静态内存类–&gt;ComputerBuilder,但是没有抽象的建造者和指挥者「其实 ComputerB 充当的就是指挥者的角色」，我们说过建造者模式中指挥者和抽象建造者都不是必须的，所以这是一个典型的建造者模式</p><ul><li>3、如何调用来个测试类 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不使用建造者模式</span>        Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">"主板"</span><span class="token punctuation">,</span><span class="token string">"cpu"</span><span class="token punctuation">,</span><span class="token string">"hd"</span><span class="token punctuation">,</span><span class="token string">"电源"</span><span class="token punctuation">,</span><span class="token string">"显卡"</span>        <span class="token punctuation">,</span><span class="token string">"鼠标"</span><span class="token punctuation">,</span><span class="token string">"机箱"</span><span class="token punctuation">,</span><span class="token string">"鼠标垫"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用普通的构造方法组装电脑："</span><span class="token operator">+</span>computer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用建造者模式</span>        ComputerB computerB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerB<span class="token punctuation">.</span>ComputerBuilder</span><span class="token punctuation">(</span><span class="token string">"主板"</span><span class="token punctuation">,</span><span class="token string">"cpu"</span><span class="token punctuation">,</span><span class="token string">"hd"</span><span class="token punctuation">,</span><span class="token string">"电源"</span><span class="token punctuation">,</span><span class="token string">"显卡"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMouse</span><span class="token punctuation">(</span><span class="token string">"鼠标"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMousePad</span><span class="token punctuation">(</span><span class="token string">"垫子"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用建造者模式组装电脑："</span><span class="token operator">+</span>computerB<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们分别使用普通构造方法「调用者能吐血」和建造者模式组装电脑，可以看到建造者模式调用 new ComputerB.ComputerBuilder(xxx).setxxx().setxxx().build() 调用方法直接打点调用「也叫流式调用，这样调用方便多了，想点那个就点那个」，如果使用过 rx 的话会非常有感觉</p><ul><li>4、运行查看一下结果</li></ul><img src="/2019/07/07/builder/computer_replace_cons.png" title="替代多参数构造方法的的建造者模式结果"><p>如果在以后如果遇到多参数构造对象的时候不仿考虑使用建造者模式</p><h3 id="三、Android-源码中的建造者模式"><a href="#三、Android-源码中的建造者模式" class="headerlink" title="三、Android 源码中的建造者模式"></a>三、Android 源码中的建造者模式</h3><blockquote><p>1、AlertDialog</p></blockquote><p>做 Android 的朋友一定不会对 AlertDialog 陌生，它是一个可以添加列表、单选列表、文本输入框，多选列表等弹窗组件，内部使用的是典型的建造者模式，我们看看 AlertDialog 的基本使用方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建构建器</span>   AlertDialog<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用建造者模式代替多参构造函数</span>   Dialog dialog<span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>XXX<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>XXX<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setXXX</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   dialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><p><code>AlertDialog 简单的 UML</code></p><img src="/2019/07/07/builder/AlertDialogUml.jpg" title="AlertDialog 简单的 UML"><p><code>AlertDialog 核心代码剥离</code></p><img src="/2019/07/07/builder/AlertDialog_Code.png" title="AlertDialog 核心代码剥离"><p>上图明显的显示出了 AlertDialog 的建造者模式「AlertDialog.Builder 同时扮演了 Builder、ConcreateBuilder、Director 等角色」</p><blockquote><p>2、Notification 的 setLatestEventInfo 方法「过时了，但是思想可以学习」</p></blockquote><p>我们看看 Notification 的 setLatestEventInfo 一看便知道使用的是建造者模式，我们看下图</p><img src="/2019/07/07/builder/notification.png" title="setLatestEventInfo"><p>以上的方法被 Notification.Builder 替代了「setLatestEventInfo 从终也是调用 Notification.Builder」，真正的建造者模式是 Notification.Builder </p><p>如果要支持到低版本可以使用 android.support.v4.app.NotificationCompat.Builder 来创建 Notification 名字一看又是一个建造者模式，感兴趣的可以看看 NotificationCompat.Builder 的源码</p><blockquote><p>3、AnimatorSet.Builder</p></blockquote><p>AnimatorSet 用作将一个动画集合按选定的顺序执行，我们可以使用 AnimatorSet.Builder 添加播放动画顺序「这只是其中一个方法」</p><p><code>使用方法举例</code></p><pre class=" language-java"><code class="language-java">AnimatorSet animSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatorSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//AnimatorSet.Builder 不能直接建立 ，只能通过 play(Animation)</span>AnimatorSet<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> animSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>anim2<span class="token punctuation">)</span><span class="token punctuation">;</span>  builder<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>anim3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>anim1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>anim4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// anim1先执行，然后再同步执行anim2、anim3，最后执行anim4  </span>animSet<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  animSet<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p><code>核心代码</code></p><img src="/2019/07/07/builder/AnimatorSet_builder.png" title="AnimatorSet.Builder 部分代码"><h3 id="四、建造者模式的优缺点"><a href="#四、建造者模式的优缺点" class="headerlink" title="四、建造者模式的优缺点"></a>四、建造者模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、使创建产品的步骤「把创建产品步骤放在不同的方法中，更加清晰直观」和产品本身分离，即使用相同的创建过程要吧创建出不同的产品</li><li>2、每个建造者都是独立的互不影响，这样就达到解耦的目的，所以如果想要替换现有的建造者那非常方便，添加一个实现即可。</li></ul><blockquote><p>缺点</p></blockquote><ul><li>1、只适用于产品具有相同的特点「过程和步骤」，如果产品之间差异非常大，则不适用「使用范围受限」</li><li>2、万一那天产品内部发生改变，那多个建造者都要修改，成本太大</li></ul><h3 id="五、建造者模式的使用场景"><a href="#五、建造者模式的使用场景" class="headerlink" title="五、建造者模式的使用场景"></a>五、建造者模式的使用场景</h3><ul><li>1、如果一个对象有非常复杂的内部结构「这些产品通常有很多属性」，那么使用建造者模式</li><li>2、如果想把复杂对象的创建和使用分离开来，那么使用建造者模式「使用相同的创建步骤可以创建不同的产品」</li></ul><h3 id="六、建造者模式-VS-简单工厂模式"><a href="#六、建造者模式-VS-简单工厂模式" class="headerlink" title="六、建造者模式 VS 简单工厂模式"></a>六、建造者模式 VS 简单工厂模式</h3><blockquote><p>相似点</p></blockquote><p>它们都属于创建型模式「都是创建产品的」</p><blockquote><p>区别 </p></blockquote><ul><li>1、创建对象的粒度不同</li></ul><p>工厂模式创建的对象都是一个鸟样子，而建造者模式创建的是一个复合产品，由各个复杂的部件组成，部件不同所构成的产品也不同</p><ul><li>2、关注点不同：</li></ul><p>工厂模式注重只要把这个对象创建出来就 o 了「不关心这个产品的组成部分」，而建造者模式不仅要创造出这个产品，还有知道这个产品的组成部分</p><p>到此为止，我们就介绍完了建造者模式，一定要动手试一下哦！你们的支持是我最大的动力</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/">人人都会设计模式</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/DesignPattern" target="_blank" rel="noopener">人人都会设计模式</a> 方便大家查看</p><p><a href="https://mp.weixin.qq.com/s/Qiu8koRHd9oSWQO05Wumhw" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06、观察者模式</title>
      <link href="/2019/07/06/observer/"/>
      <url>/2019/07/06/observer/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/06/observer/observer.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 FactoryPatttern/Observer 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是观察者模式"><a href="#一、什么是观察者模式" class="headerlink" title="一、什么是观察者模式"></a>一、什么是观察者模式</h3><h4 id="1、生活中的观察者模式"><a href="#1、生活中的观察者模式" class="headerlink" title="1、生活中的观察者模式"></a>1、生活中的观察者模式</h4><blockquote><p>1、警察抓小偷</p></blockquote><p>在现实生活中，警察抓小偷是一个典型的观察者模式「这以一个惯犯在街道逛街然后被抓为例子」，这里小偷就是被观察者，各个干警就是观察者，干警时时观察着小偷，当小偷正在偷东西「就给干警发送出一条信号，实际上小偷不可能告诉干警我有偷东西」，干警收到信号，出击抓小偷。这就是一个观察者模式</p><blockquote><p>2、装模作样写作业</p></blockquote><p>小时候家里家活比较多，爸妈让我去干活的时候，我偶尔会说我要学习「其实不想去干活，当然只是偶尔，我还是常常干家务的」，然后爸妈就去地里了，我一个人在家里，先摆出一张桌子「上面放好想看的书」，然后打开电视机看起电视剧，但是又怕家里人回到家中看到我在看电视，于是把家里的大门锁住「当爸妈回的时候肯定要开门」，当我听见开门声就会立马关掉电视，做到作业桌上「装模作样写作业」—-在这过程中：我充当的就是观察者，爸妈就是被观察者，他们开门就会触发门响「相当于告诉我说他们回来了」，我听到响声「关电视，写作业」，有过类似的经验的朋友们下面点个赞</p><blockquote><p>3、远程视频会议等</p></blockquote><p>老板和员工远程开会：老板是被观察者，员工是观察者。微信公号：微信公号作者是被观察者，微信用户是观察者「当公号作者发送一篇文章，关注了公号的观察者都可以收到文章」等</p><h4 id="2、程序中的观察者模式"><a href="#2、程序中的观察者模式" class="headerlink" title="2、程序中的观察者模式"></a>2、程序中的观察者模式</h4><blockquote><p>观察者模式的定义</p></blockquote><p>观察者模式描述的是一种一对多的关系「一个被观察者对应多个观察者」，当被观察者的状态发生改变时，所有观察者都会得到通知。通俗的理解：观察者模式就是在特定的时刻「被观察者发送通知」干特定的事情「观察者收到通知处理自己相应的事件」</p><img src="/2019/07/06/observer/one_more.png" title="观察者模式是一种一对多关系"><blockquote><p>观察者模式的特点</p></blockquote><p>观察者模式的三要素：观察者，被观察者，事件「订阅」</p><blockquote><p>观察者模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Subject</td><td>接口或抽象类</td><td>主题也叫被观察者</td></tr><tr><td>RealSubject</td><td>真实的主题类</td><td>具体的被观察者，内部维护了观察者的列表</td></tr><tr><td>IObserver</td><td>观察者接口或抽象类</td><td>抽象出观察者的接口</td></tr><tr><td>RealObserver</td><td>具体的观察者</td><td>被观察者有更新，观察者立马响应更新</td></tr></tbody></table><blockquote><p>观察者模式简单的 UML</p></blockquote><img src="/2019/07/06/observer/Observer_UML.jpg" title="观察者模式简单的 UML"><h3 id="二、观察者模式举例"><a href="#二、观察者模式举例" class="headerlink" title="二、观察者模式举例"></a>二、观察者模式举例</h3><p>在举例之前，我们先看看一个概念–回调，什么是回调：就调用一圈又回到自已了「通俗的就可以这样认为」</p><h4 id="1、回调"><a href="#1、回调" class="headerlink" title="1、回调"></a>1、回调</h4><blockquote><p>例子一：小明叫爸爸吃饭</p></blockquote><p>举个例子，小明妈妈做好了饭，让小明去地里叫他爸回来吃饭，小明说好的我马上去，过了半个小时小明和他爸一起来了，小明给妈妈的说：“妈，爸回来了”，妈妈说：“好的我知道了，让你爸洗洗手吃饭吧”，在这一过程中，小明给妈妈的说：“妈，爸回来了”就是一个回调，不好理解？那看代码吧</p><p><code>小明叫爸爸吃饭简单的 UML</code></p><img src="/2019/07/06/observer/xiaomingUML.jpg" title="小明叫爸爸吃饭简单的 UML"><p><code>写代码</code></p><ul><li>1、定义一个回调接口</li></ul><img src="/2019/07/06/observer/xm_callback.png" title="回调接口"><ul><li>2、定义妈妈类</li></ul><img src="/2019/07/06/observer/mom_class.png" title="妈妈"><ul><li>3、定义小明类</li></ul><img src="/2019/07/06/observer/xiaoming_class.png" title="小明类"><ul><li>4、测试</li></ul><img src="/2019/07/06/observer/xiaoming_test.png" title="测试类"><ul><li>5、运行查看结果</li></ul><img src="/2019/07/06/observer/xiaoming_result.png" title="结果"><p>这就是回调，我们看看的数据的走向 Mom–&gt;xiaoming–&gt;Mom 转了一圈回来了，这就是回调</p><blockquote><p>例子二，模拟Android 中 View 的点击事件</p></blockquote><p>经过例子一，我敢保证多数朋友对回调还是稀里糊涂，不要紧，我们再来一个例子感受一下，做过 Android 的朋友一定调用过 View.setOnclickListener(OnClickListener onClickListener) 点击函数,没错 OnClickListener 就是一个回调接口，我们来使用  代码模拟一下这个过程 </p><p><code>先看一下 UML</code></p><img src="/2019/07/06/observer/moniviewclick.jpg" title="自定义 View 点击事件的 UML"><p><code>根据 UML 写代码</code></p><ul><li>1、 定义一个 View 类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> OnClickListener onClickListener <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 触发点击事件</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>onClickListener <span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            onClickListener<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置回调</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnClickListener</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onClickListener <span class="token operator">=</span> onClickListener <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义回调方法</span>        <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义一个 Button 类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一个按钮 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、测试类 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Button button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//看到了没，看到这里是不是很亲切，是不是发现 次哦！ 这就是回调</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"自定义 View 的回调事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟用户点击这个运作，Android 系统的 View 是重写手势来调用这个方法的，没有暴露给用户</span>        button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、运行查看结果</li></ul><img src="/2019/07/06/observer/cutomview_result.png" title="测试自定义 View 点击事件结果"><p>如果你看 Android 源码，或是三方的源码会发现好多这样的回调方法，比如网络请求成功失败的回调等。</p><blockquote><p>使用观察者模式实现自定义 View</p></blockquote><ul><li>定义 View 「被观察者」</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//被观察者的列表</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>OnClickListener<span class="token operator">></span> onClickListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 触发通知</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token operator">:</span>onClickListeners<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>onClickListener <span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                onClickListener<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注册观察者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnClickListener</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>        onClickListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义通知的方法</span>        <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unRegister</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>onClickListeners<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            onClickListeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>onClickListener<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>这里的 OnClickListener 就是抽象的观察者</p><ul><li>2、定义一个 Button </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>3、测试 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个被观察者</span>        Button button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册其中一个观察者</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TigerChain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册另一个观察者</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"never give up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 被观察者触发事件</span>        button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、运行查看结果</li></ul><img src="/2019/07/06/observer/observer_view.png" title="观察者实现 View 的点击事件"><p><strong>PS:总结</strong>看到了没，观察者模式和回调是如此的相似，如果我们把上面的注册观察者改成一个「和 View 回调一模一样」，可以说回调是一种特殊的观察者模式，回调和观察者联系和区别</p><ul><li>1、回调可以说只有一个观察者，是一对一，是一种特殊的观察者模式「我是这样的认为的，个人观点，如果有误欢迎指出」</li><li>2、观察者：被观察者持有观察的列表，是一种一对多的关系</li><li>3、回调是一种监听方式，观察者模式是一种解决方案「设计模式」</li></ul><p>有了回调的基础，下面我们来看看观察者模式的几个精典例子</p><h4 id="2、观察者举例"><a href="#2、观察者举例" class="headerlink" title="2、观察者举例"></a>2、观察者举例</h4><blockquote><p>1、微信公号推送文章</p></blockquote><p>最近看了我文章的人都知道我最近在写关于设计模式这一系列，在这里我「TigerChain」就是一个被观察者，普通的微信用户就是观察者，如果微信用户关注了 TigerChain ,那么我推送的每一篇的文章，微信用户就会第一时间收到我的文章「订阅 TigerChain的用户」，这就是一个典型的观察者模式</p><p><code>微信公号推送文章简单的 UML</code></p><img src="/2019/07/06/observer/TigerChainWxObserver.jpg" title="微信公号推送文章简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、定义抽象的被观察者 IWxServerSubject.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义主题「被观察者接口」，所有的公号作者共同属性「其实这里功能上微信系统的功能，直接抽象成被观察者」 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWxServerSubject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加观察者</span>    <span class="token keyword">void</span> <span class="token function">attchObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移除观察者</span>    <span class="token keyword">void</span> <span class="token function">detachObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知观察者</span>    <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义抽象的观察者接口 IObserver.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义观察者接口,即关注公号的微信用户共同属性 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IObserver</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 观察者收到信息,内容为 info</span>    <span class="token keyword">void</span> <span class="token function">reciveContent</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义具体的被观察者「公号作者 TigerChain」 TigerChainSubject.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一个真实的被观察者 TigerChain「公号的作者」 * 里面存了订阅 TigerChain 微信公众账号的读者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TigerChainSubject</span> <span class="token keyword">implements</span> <span class="token class-name">IWxServerSubject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 订阅者列表「观察者列表」，即关注 TigerChain 公号的读者</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>IObserver<span class="token operator">></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//作者更新公号的内容 </span>    <span class="token keyword">private</span> String updateContent <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attchObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>iObserver<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>iObserver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>iObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>IObserver iObserver<span class="token operator">:</span>observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            iObserver<span class="token punctuation">.</span><span class="token function">reciveContent</span><span class="token punctuation">(</span>updateContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否关注我的公号     * @param iObserver     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAttchObserver</span><span class="token punctuation">(</span>IObserver iObserver<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>iObserver<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * TigerChain 在公号中发布文章     * @param updateContent     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitContent</span><span class="token punctuation">(</span>String updateContent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>updateContent <span class="token operator">=</span> updateContent <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义一个具体的观察者「普通的微信用户」 ReaderObserver.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 微信用户 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReaderObserver</span> <span class="token keyword">implements</span> <span class="token class-name">IObserver</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 微信用户的姓名</span>    <span class="token keyword">private</span> String uname <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ReaderObserver</span><span class="token punctuation">(</span>String uname<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reciveContent</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uname<span class="token operator">+</span><span class="token string">"注意，TigerChain 发送了文章---"</span><span class="token operator">+</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到微信用户有接收推送文章的能力「前提是要关注公号作者」</p><ul><li>5、来个 Test 类测试一下吧</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        IWxServerSubject iWxServerSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TigerChainSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 微信用户</span>        ReaderObserver zhangsai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReaderObserver</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        ReaderObserver lisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReaderObserver</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        ReaderObserver wangwu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReaderObserver</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        ReaderObserver zhaoLiu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReaderObserver</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 微信用户张三关注我的公号「即订阅」</span>        iWxServerSubject<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span>zhangsai<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 微信用户李四关注我的公号「即订阅」</span>        iWxServerSubject<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span>lisi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 微信用户王五关注我的公号「即订阅」</span>        iWxServerSubject<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span>wangwu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 我「被观察者」发布了一篇文章--观察者模式</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>TigerChainSubject<span class="token punctuation">)</span>iWxServerSubject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submitContent</span><span class="token punctuation">(</span><span class="token string">"人人都会设计模式：观察者模式"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isAttch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TigerChainSubject<span class="token punctuation">)</span>iWxServerSubject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAttchObserver</span><span class="token punctuation">(</span>zhaoLiu<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isAttch<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zhaoLiu<span class="token punctuation">.</span><span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"你好！你还没有关注 TigerChain ，请关注先，谢谢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们看到和现实情况一样，普通微信用户关注公号作者，然后作者发送文章，用户就可以收到文章了</p><ul><li>6、运行查看结果</li></ul><img src="/2019/07/06/observer/wx_result.png" title="TgierChain 发送一篇文章结果"><blockquote><p>2、狼王开会</p></blockquote><p>话说冬天来了，狼得找过冬的食物，狼王组织如开了紧急会议，下面的群狼都看着狼王传递会议精神和安排任务，此时狼王就是被观察者，群狼就是观察者，我们来看看 UML</p><p><code>狼王开会简单的 UML</code></p><img src="/2019/07/06/observer/wolf_observer.jpg" title="狼王开会简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、抽象被观察者功能 IWolf.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 抽象的被观察者 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加观察者</span>    <span class="token keyword">void</span> <span class="token function">attchObserver</span><span class="token punctuation">(</span>NormalWolf observer<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移除观察者</span>    <span class="token keyword">void</span> <span class="token function">detchObserver</span><span class="token punctuation">(</span>NormalWolf observer<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通知观察者</span>    <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、抽象观察者普通的狼 NormalWolf.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by 抽象的观察者，普通的狼 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">NormalWolf</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拿到被观察者的引用</span>    <span class="token keyword">protected</span> IWolf iWolf <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 收到狼王下达的命令     * @param str     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">reciveCommand</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义具体的被观察者狼王 LangWang.</li></ul><p>由于一个狼群中只有一个狼王，所以狼王是一个单例「顺便把单例模式也用一把」</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 狼王「被观察者，下面的狼都看狼王的眼色行事」，是一个单例模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LangWang</span> <span class="token keyword">implements</span> <span class="token class-name">IWolf</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LangWang instance <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">LangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LangWang <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LangWang<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 除过狼王外的狼「观察者」</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>NormalWolf<span class="token operator">></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 狼王下达的命令</span>    <span class="token keyword">private</span> String mingLing  <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attchObserver</span><span class="token punctuation">(</span>NormalWolf observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detchObserver</span><span class="token punctuation">(</span>NormalWolf observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>NormalWolf observer<span class="token operator">:</span>observers<span class="token punctuation">)</span><span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">reciveCommand</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 下达命令     * @param mingLing     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xiaDaMingling</span><span class="token punctuation">(</span>String mingLing<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mingLing <span class="token operator">=</span> mingLing <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyObserver</span><span class="token punctuation">(</span>mingLing<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义一个观察者侦查狼 ZhenChaLang.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 侦查狼，另一个观察者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhenChaLang</span> <span class="token keyword">extends</span> <span class="token class-name">NormalWolf</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ZhenChaLang</span><span class="token punctuation">(</span>IWolf iWolf<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iWolf <span class="token operator">=</span> iWolf <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iWolf<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reciveCommand</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"侦查狼：狼王开会传递的信息是 \n"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这里我们实例化一个侦查狼的时候就会把它注册到被观察者中，也就是狼王开会的时候，群狼肯定狼群中的一员「外来狼可不行」，只有内部狼「内部会员」才有资格开会「这种关系就相当于注册这个过程」</p><ul><li>5、定义另一个观察者捕猎狼 BuLieLang.</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 捕猎狼---观察者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuLieLang</span> <span class="token keyword">extends</span> <span class="token class-name">NormalWolf</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">BuLieLang</span><span class="token punctuation">(</span>IWolf iWolf<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iWolf <span class="token operator">=</span> iWolf <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加观察者，即捕猎狼放在狼王组织中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iWolf<span class="token punctuation">.</span><span class="token function">attchObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reciveCommand</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"捕猎狼：狼王开会传递的信息是 \n"</span><span class="token operator">+</span>string<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>测试类 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用单例模式</span>        LangWang langWang <span class="token operator">=</span> LangWang<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        BuLieLang buLieLang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuLieLang</span><span class="token punctuation">(</span>langWang<span class="token punctuation">)</span> <span class="token punctuation">;</span>        ZhenChaLang zhenChaLang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhenChaLang</span><span class="token punctuation">(</span>langWang<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 狼王下达命令就是发送通知</span>        langWang<span class="token punctuation">.</span><span class="token function">xiaDaMingling</span><span class="token punctuation">(</span><span class="token string">"1、分工合作，捕猎狼根据侦查狼反馈看机行事 \n"</span> <span class="token operator">+</span>                                     <span class="token string">"2、侦查狼永远把危险放在第一位，遇到危险第一时间提醒大家撤退"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/06/observer/langwang_observer.png" title="狼王观察者 demo 结果"><p>狼王下达命令就是发送通知，那么现场中的狼都会收到通知，典型的观察者模式</p><blockquote><p>3、自定义 EventBus</p></blockquote><p>在 Android 中我们常常使用 EventBus,它相当于是一个单例广播，我们来自定义一个简单的 EventBus 「不考虑线程切换」，其实它也是一种观察者模式「俗称发布、订阅模式」</p><p><code>自定义　EventBus 简单的 UML</code></p><img src="/2019/07/06/observer/CustomEventBus_UML.jpg" title="自定义 EventBus 简单的 UML"><p>代码这里不贴了，我已经上传到 github 上了，大家可以自行看看：<a href="https://github.com/tigerchain/DesignPattern/tree/master/app/src/main//designpattern/jun/com/designpattern/Observer/CustomEventBus" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern/tree/master/app/src/main//designpattern/jun/com/designpattern/Observer/CustomEventBus</a></p><h3 id="三、Android-源码中的观察者模式"><a href="#三、Android-源码中的观察者模式" class="headerlink" title="三、Android 源码中的观察者模式"></a>三、Android 源码中的观察者模式</h3><blockquote><p>1、RecyclerView 中使用观察者模式</p></blockquote><p><code>RecyclerView 中观察者模式简单的 UML</code></p><img src="/2019/07/06/observer/RecyclerViewObserverUml.jpg" title="RecyclerView 中观察者模式简单的 UML"><p>源码就不分析了「贴出代码估计又得一篇来说」，给出下面流程，大家自行看一下就明白了，动动手印象更深</p><p><code>从 setAdapter 开始看一下观察者流程</code></p><img src="/2019/07/06/observer/setadapter_call_step.png" title="setAdapter 观察者流程"><blockquote><p>2、ViewTreeObserver </p></blockquote><p>ViewTreeObserver 是用来监听视图树的观察者，如果视图树发生全局改变的时候就会收到通知</p><p>其中，被观察者是 ViewTree ，观察者是 ViewTreeObserver</p><img src="/2019/07/06/observer/viewtreeobserver_listener.png" title="观察者 ViewTreeObserver"><p><code>抽取 ViewTreeObserver 部分代码讲解</code></p><p>这里说说 view.getViewTreeObserver().addOnGlobalLayoutListener(xxx) 场景，其它的雷同</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ViewTreeObserver</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnGlobalLayoutListener</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 添加监听器</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOnGlobalLayoutListener</span><span class="token punctuation">(</span>OnGlobalLayoutListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkIsAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOnGlobalLayoutListeners <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOnGlobalLayoutListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArray</span><span class="token operator">&lt;</span>OnGlobalLayoutListener<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mOnGlobalLayoutListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 分发事件相当于发送通知，即被观察者调用--View</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">dispatchOnGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> CopyOnWriteArray<span class="token operator">&lt;</span>OnGlobalLayoutListener<span class="token operator">></span> listeners <span class="token operator">=</span> mOnGlobalLayoutListeners<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> listeners<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            CopyOnWriteArray<span class="token punctuation">.</span>Access<span class="token operator">&lt;</span>OnGlobalLayoutListener<span class="token operator">></span> access <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> access<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    access<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                listeners<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>现在我们有了观察者 ViewTreeObserver ，观察者是 ViewTree 我们说了，主要问题的就是 dispatchOnGlobalLayout 谁调用了，只有触发了这个方法那么事件就回调回来了「这个方法肯定是被观察者调用了，系统调用的」，方法在 ViewRootImpl「关于 ViewRootImpl 可自行去查看，不在本篇的范围」 中体现出来了</p><p><code>看看 ViewRootImpl 的部分代码</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ViewRootImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ViewParent</span><span class="token punctuation">,</span>        View<span class="token punctuation">.</span>AttachInfo<span class="token punctuation">.</span>Callbacks<span class="token punctuation">,</span> ThreadedRenderer<span class="token punctuation">.</span>DrawCallbacks <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 执行测量</span>    <span class="token function">performMeasure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 执行布局</span>    <span class="token function">performLayout</span><span class="token punctuation">(</span>lp<span class="token punctuation">,</span> mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>triggerGlobalLayoutListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mAttachInfo<span class="token punctuation">.</span>mRecomputeGlobalAttributes <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意看这里，这里触发了 dispatchOnGlobalLayout 方法，系统调用</span>        mAttachInfo<span class="token punctuation">.</span>mTreeObserver<span class="token punctuation">.</span><span class="token function">dispatchOnGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 执行绘制</span>    <span class="token function">performDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>看到了没，mAttachInfo.mTreeObserver.dispatchOnGlobalLayout() 方法是在 ViewRootImpl 中调用了「即是 View 调用了，只要 View 树而已发生改变，就会调用」，是由系统调用的「View 的布局完成这后，就会调用」，并且还调用了自定义 View 的测量，布局，绘制方法。</p><p>使用场景：比如我们想在 Activity 的 onCreate() 方法中取得某个 View 的宽高，此时是取不到的，由于布局还没有完成加载之前取到的是 0 ,所以使用 view.getViewTreeObserver().addOnGlobalLayoutListener(xxx) 里面就可以获取到 view 的宽高了,demo 代码如下</p><pre class=" language-java"><code class="language-java">  view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 当layout执行结束后回调</span>                <span class="token comment" spellcheck="true">//使用完必须撤销监听（只测量一次），否则，会一直不停的不定时的测量，这比较耗性能</span>                view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Added in API level 16</span>                <span class="token comment" spellcheck="true">//view.getViewTreeObserver().removeGlobalOnLayoutListener(this);//废弃了</span>                <span class="token keyword">int</span> width <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> width2 <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//和上面的值是一样的</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>3、ListView</p></blockquote><p>ListView 中使用观察者模式和 RecyclerView 类似，大家可以扒扒这部分源码，这里就不说了</p><h3 id="四、观察者模式的优缺点"><a href="#四、观察者模式的优缺点" class="headerlink" title="四、观察者模式的优缺点"></a>四、观察者模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、解耦，被观察者只知道观察者列表「抽象接口」，被观察者不知道具体的观察者</li><li>2、被观察者发送通知，所有注册的观察者都会收到信息「可以实现广播机制」</li></ul><blockquote><p>缺点</p></blockquote><ul><li>1、如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时</li><li>2、观察者知道被观察者发送通知了，但是观察者不知道所观察的对象具体是如何发生变化的</li><li>3、如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃</li></ul><p>到此为止，我们的观察者模式就说完了，一定要扒扒 Android 源码中相应的观察者模式，你会有一种恍然大悟的感觉，转发是一种美德</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/">人人都会设计模式</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/DesignPattern" target="_blank" rel="noopener">人人都会设计模式</a> 方便大家查看</p><p><a href="https://mp.weixin.qq.com/s/8yRv41V3dkXOzwoeLBnqNQ" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05、代理模式</title>
      <link href="/2019/07/05/proxy/"/>
      <url>/2019/07/05/proxy/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/05/proxy/proxy_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 FactoryPatttern/Proxy 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是代理模式"><a href="#一、什么是代理模式" class="headerlink" title="一、什么是代理模式"></a>一、什么是代理模式</h3><h4 id="1、生活中的代理"><a href="#1、生活中的代理" class="headerlink" title="1、生活中的代理"></a>1、生活中的代理</h4><blockquote><p>1、微商代理</p></blockquote><p>代理在生活中就太多了，比如微商，在朋友圈中很多时候都可以看到微商说城招全国代理「不需要货源，不需要启动资金，只需要一个电话就能做生意，好吧我口才不好，没有人家吹的好」，这类代理就是替卖家出售商品</p><blockquote><p>2、追女孩</p></blockquote><p>遥想当年情窦初开「初中的时候」，喜欢上了一个女子，可是迫于害羞，就给女孩子写了几封情书，买了一束花「但是自己没有那个贼胆送」，就让我们班里一个和女孩认识的朋友交给她，现在想来原来帮我送情书的女生就是我的代理呀「帮我完成我想要完成的事」~~嘻嘻。话说谁还干类似的事，就在文章末尾点个赞</p><blockquote><p>3、代销店等</p></blockquote><p>其实就是现在的商店，以前小的时候听家乡人叫代销店，也是一种代理模式。细细一想，跑业务的也是代理，律师也是代理，明星的助理就是代理，京东送货机器人是代理，共享”女友”,那个”女友”也是代理「你懂得」，等等等等。不敢再说了，再说万物都成代理了「不好意思，又忘了吃药了」</p><h4 id="2、程序中的代理"><a href="#2、程序中的代理" class="headerlink" title="2、程序中的代理"></a>2、程序中的代理</h4><p>其实程序中使用的代理是非常多的，我们在编写 MVC 业务的时候就可以使用代理模式「可以让客户端使用代理仿问接口」，一般使用最多的是动态代理 </p><blockquote><p>代理模式的定义</p></blockquote><p>所谓代理就是代表某个真实对象，也就是代理拿到真实对象的引用然后就可以实现真实对象中的功能了</p><blockquote><p>代理模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>AbstractObject</td><td>接口或抽象类</td><td>抽象出共同的属性</td></tr><tr><td>RealObject</td><td>真实的类</td><td>实现了抽象角色</td></tr><tr><td>Prxoy</td><td>代理的类</td><td>实现了抽象角色，持有真实类的引用</td></tr></tbody></table><blockquote><p>代理模式简单的 UML</p></blockquote><img src="/2019/07/05/proxy/proxy_uml.jpg" title="代理模式简单的 UML"><blockquote><p>代理模式的分类</p></blockquote><ul><li>远程代理：为不同地理的对象提供局域网代表对象</li><li>虚拟代理：根据需要将资源消耗很大的对象进行延迟，真正需要的时候再创建</li><li>安全代理：控制用户的访问权限</li><li>智能代理：提供对目标对象额外的服务「使用最多的」</li></ul><blockquote><p>代理模式的实现方式「属于智能代理」</p></blockquote><ul><li>静态代理方法</li><li>动态代理方法</li></ul><h3 id="二、代理模式举例"><a href="#二、代理模式举例" class="headerlink" title="二、代理模式举例"></a>二、代理模式举例</h3><blockquote><p>1、帮忙追 MM</p></blockquote><p>话说在高中期间，小明看上了我们班一位女同学，可是小明是一个害羞胆小的人「有贼心没贼胆」，于是小明跑到我的跟前:Chain 哥，我看上了咱们班的小倩，你能帮我追一下吗 …. 。听小明巴拉巴拉一大堆，本着哥们义气的我非常爽快的答应了，就有了下面的追 MM 手段</p><p><code>简单的 UML</code></p><img src="/2019/07/05/proxy/prxoy_mm.jpg" title="我帮小明追 MM"><p><code>根据 UML 撸码--这里使用静态代理方法</code></p><ul><li>1、要追 MM 首先肯定有 MM ，定义 MM.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MM</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 姓名 </span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄 </span>    <span class="token keyword">private</span> String address <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 住址</span>    <span class="token keyword">public</span> <span class="token function">MM</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义一个追 MM 方法的接口 ZhuimmWay.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 追 MM 的方法，是一个抽象角色 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ZhuimmWay</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 送花</span>    <span class="token keyword">void</span> <span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写情书</span>    <span class="token keyword">void</span> <span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 买衣服</span>    <span class="token keyword">void</span> <span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 干一些其它的事</span>    <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、主人公小明上场 XiaoMing.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 主人公小明，真正的角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token keyword">implements</span> <span class="token class-name">ZhuimmWay</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 要追的 MM</span>    <span class="token keyword">private</span> MM mm <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">like</span><span class="token punctuation">(</span>MM mm<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mm <span class="token operator">=</span> mm <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 送给你一朵花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 给你八封情书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 这是给你买的衣服"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给 "</span><span class="token operator">+</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"说好听的话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给 "</span><span class="token operator">+</span>mm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"洗衣服，买单等等一系列手段"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、代理人 TigerChain 上场 ProxyTigerChain.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 代理人，我上场了，感觉像媒婆 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTigerChain</span> <span class="token keyword">implements</span> <span class="token class-name">ZhuimmWay</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> XiaoMing xiaoMing <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyTigerChain</span><span class="token punctuation">(</span>XiaoMing xiaoMing<span class="token punctuation">,</span> MM mm<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>xiaoMing <span class="token operator">=</span> xiaoMing <span class="token punctuation">;</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xiaoMing<span class="token punctuation">.</span><span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、一切准备就绪，开始追吧，来个测试类 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 主人公小明</span>        XiaoMing xiaoMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要追的人小倩</span>        MM xiaoqian <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MM</span><span class="token punctuation">(</span><span class="token string">"小倩"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小明委托我去帮他追小倩</span>        ProxyTigerChain proxyChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyTigerChain</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">,</span>xiaoqian<span class="token punctuation">)</span> <span class="token punctuation">;</span>        proxyChain<span class="token punctuation">.</span><span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyChain<span class="token punctuation">.</span><span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyChain<span class="token punctuation">.</span><span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyChain<span class="token punctuation">.</span><span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/05/proxy/mm_result.png" title="追 MM 方法验证"><p>上面的代码完美吗？完美个鸟鸟，试想把 Test 比做一个场景：比如是在 KTV ，我靠，小明不是害羞吗？竟然也出现在 KTV 中「如果小明能当明看着你帮他追小倩，早就自己动手了」，所以按正常逻辑小明不应该出现在 KTV「Test 中」</p><ul><li>7、修改代码，我们添加一个 ZhuimmFactory.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一个工厂类，这样就屏蔽了客户端对代理的感知 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhuimmFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ZhuimmWay <span class="token function">getInstance</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProxyTigerChain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MM</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>嘻嘻，不知不觉又用到以前学到的简单工厂模式了「学以致用，不错不错」，我们把代理事情都放在工厂中去做，这样客户端对代理是无感知的，这也符合程序开发的正常逻辑</p><ul><li>8、修改 Test 端调用代码 </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用者不知道调用的是代理类还是真实类，这才是正常的逻辑呀</span>        ZhuimmWay zhuimmWay <span class="token operator">=</span> ZhuimmFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"小倩"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        zhuimmWay<span class="token punctuation">.</span><span class="token function">giveFlowers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhuimmWay<span class="token punctuation">.</span><span class="token function">writeLoveLetters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhuimmWay<span class="token punctuation">.</span><span class="token function">buyClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhuimmWay<span class="token punctuation">.</span><span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>9、运行查看结果</li></ul><img src="/2019/07/05/proxy/mm_result.png" title="追 MM 方法验证"><p>想知道结局吗？很不幸，小倩也有点”白痴”，我提醒好多次是小明喜欢她「其实我最多是代理小明送花等这些事情，也就是说钱花小明的，美女我来追」，可是她最终还是看上我了「有点自恋」，所以以后追 MM 的时候，千万千万不要找代理「以上故事纯属虚构，如有雷同，那么小明以后就张点心吧」</p><blockquote><p>2、真假美猴王</p></blockquote><h5 id="1、使用静态代理完成"><a href="#1、使用静态代理完成" class="headerlink" title="1、使用静态代理完成"></a>1、使用静态代理完成</h5><p><code>六耳猕猴梦想简单的 UML</code></p><img src="/2019/07/05/proxy/Liuer.jpg" title="六耳猕猴梦想简单的 UML"><p><code>根据 UML 撸码</code></p><ul><li>1、定义抽象接口 IToWest.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created 抽象类，去西天的条件 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IToWest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保护唐僧</span>    <span class="token keyword">void</span> <span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//降妖除魔</span>    <span class="token keyword">void</span> <span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//上天入地</span>    <span class="token keyword">void</span> <span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义孙悟空类 SunWuKong.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Tigerchain * 悟空 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SunWuKong</span> <span class="token keyword">implements</span> <span class="token class-name">IToWest</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能 保护唐僧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能 降妖除魔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能 能上天入地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义六耳猕猴类「代理角色」 LiuErMiHou.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> prxoy<span class="token punctuation">.</span>monkeyking<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by Tigerchain * 悟空的代理六耳猕猴 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiuErMiHou</span> <span class="token keyword">extends</span> <span class="token class-name">SunWuKong</span> <span class="token keyword">implements</span> <span class="token class-name">IToWest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、测试 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 六耳 代理悟空 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        IToWest liuErMiHou <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiuErMiHou</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        liuErMiHou<span class="token punctuation">.</span><span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        liuErMiHou<span class="token punctuation">.</span><span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        liuErMiHou<span class="token punctuation">.</span><span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能去得了西天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、运行查看结果</li></ul><img src="/2019/07/05/proxy/liuer_result.png" title="六耳猕猴代理结果"><p>好了，上面我们看到我们使用代理类直接继承了真实的类「这也是代理的一个变种」，但是根据多用类组合少用继承的规则，我们还是少用这种继承形式的代理</p><p>以上是静态代理，静态代理有局限性，想如果悟空多了项技能，六耳猕猴就得学此项技能「感觉很像我们搞技术的，技术日新月异，得不断的学习才能进步」</p><p><code>静态代理的缺点：</code></p><ul><li>1、代理的方法如果很多，那么就要为每个方法都要代理，规模大的程序受不了</li><li>2、如果真实类中新添加一个方法或功能，那么代理类中就一一对应的写出来，这样不利于扩展并且增加代码维护成本</li><li>3、一个代理类只能代理一个真实的对象</li></ul><h5 id="2、使用动态代理完成"><a href="#2、使用动态代理完成" class="headerlink" title="2、使用动态代理完成"></a>2、使用动态代理完成</h5><p>动态代理就是代理类不是在代码中定义的，而是根据我们的指示动态生成的「通过反射机制动态生成代理者对象」，在编码阶段，你从代码上根本不知道谁代理谁，具体代理谁，好吧太绕了，直接看代码</p><blockquote><p>1、Proxy 类</p></blockquote><p>说动态代理之前，我们先来看看 java 中提供的 Proxy 类</p><p>看看这个类的注释一部分</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span><span class="token operator">*</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> Proxy<span class="token punctuation">}</span> provides <span class="token keyword">static</span> methods <span class="token keyword">for</span> creating dynamic proxy <span class="token operator">*</span> classes and instances<span class="token punctuation">,</span> and it is also the superclass of all <span class="token operator">*</span> dynamic proxy classes created by those methods<span class="token punctuation">.</span> <span class="token operator">*</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">*</span><span class="token operator">/</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略代码  <span class="token punctuation">}</span></code></pre><p>从注释可以看出 Proxy 提供一些静态方法来创建动态代理类和实例</p><p><code>Proxy 简单的 UML</code></p><img src="/2019/07/05/proxy/Proxy.jpg" title="Proxy 简单的 UML"><p><code>Proxy 主要方法讲解</code></p><p>Proxy 主要方法就是 newProxyInstance 这个方法</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>                                          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                          InvocationHandler h<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略若干代码 </span>    <span class="token comment" spellcheck="true">// 取得代理类</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl <span class="token operator">=</span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略若干代码 </span>    <span class="token comment" spellcheck="true">// 调用代理类的构造方法</span>    <span class="token keyword">final</span> Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>constructorParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略若干代码 </span>    <span class="token keyword">final</span> InvocationHandler ih <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 省略若干代码 </span>    <span class="token comment" spellcheck="true">// 通过代理类的构造方法生成代理类的实例</span>    <span class="token keyword">return</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>h<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>其中三个参数：</p><ul><li><strong>ClassLoader loader</strong>：代理类的类加载器</li><li><strong>Class&lt;?&gt;[] interfaces</strong>：代理类要实现的接口列表</li><li><strong>InvocationHandler h</strong>：调用处理程序</li></ul><p>从 newProxyInstance 方法中我们知道了代理对象是如何产生的了「注释很清楚了」</p><p><code>再看看 InvocationHandler</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Throwable<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中三个参数：</p><ul><li>Object proxy: 被代理的对象</li><li>Method method：要操作的方法</li><li>Object[] args：方法要传入的参数，可以没有，也可以有多个或 null </li></ul><p>InvocationHandler 接口中的方法就是执行被代理对象中的方法</p><blockquote><p>2、使用动态代理修改真假美猴王代码</p></blockquote><p><code>动态代理悟空 简单的UML</code></p><img src="/2019/07/05/proxy/LiuErdyproxy_uml.jpg" title="动态代理悟空 简单的UML"><p><code>根据 UML 撸码</code></p><p>只需要在原有代码的基础上添加一个动态类并且删掉六耳猕猴类「动态代理来了，小六你还不快撤」，然后修改 Test 即可</p><ul><li>1、添加动态代理类 ToWestProxy.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 动态代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToWestProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需要代理的对象即真实对象</span>    <span class="token keyword">private</span> Object delegate <span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span>Object delegate<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态构建一个代理</span>        <span class="token keyword">return</span>  Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>delegate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>delegate<span class="token punctuation">,</span>args<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过反射调用真实对象对应的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们看到上在被代理的对象是一个 Object 类型，所以可以看出这个代理类就是一个万能的代理，不仅仅可以代理悟空，牛魔王也能代理「扯远了」</p><ul><li>2、修改 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        IToWest sunWuKong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SunWuKong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取得动态代理</span>        IToWest proxy <span class="token operator">=</span> <span class="token punctuation">(</span>IToWest<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ToWestProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>sunWuKong<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">baohuTangSeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">xiangYaoChuMo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">shangTianRuDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我孙悟空能去得了西天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看到了，真实对象悟空随便你改，我再添加接口，方法，我动态代理不用动「如果是静态代理六耳猕猴，那就得随着悟空的修改必须得修改自己」</p><p>而且，我们还可以得出，这个动态代理不仅仅可以代理悟空，简直可以代理一切对象「不信你定义一个牛魔王试试」</p><ul><li>3、运行查看结果</li></ul><img src="/2019/07/05/proxy/liuer_result.png" title="查看结果"><p>简直 perfect</p><blockquote><p>3、自动售票机</p></blockquote><p>随着科技的发达，我们现在买车票的时候可以在自动售票机「代理售票人员」上购买</p><p><code>自动售票机简单的 UML</code></p><img src="/2019/07/05/proxy/dy_sller.jpg" title="自动售票机简单的 UML"><p><code>根据 UML 撸码--采用动态代理技术</code></p><ul><li>1、先来一个抽象角色 ISellTicket.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 定义一个抽象接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISellTicket</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 售票</span>    <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、要出票，当然有买的票的人 User.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 买票的人 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String uname <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> String address <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 地址</span>    <span class="token keyword">private</span> String sex <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 性别</span>    <span class="token keyword">private</span> String idNum <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 身份证号</span>    <span class="token keyword">private</span> String pay <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 掏票钱</span>    <span class="token keyword">public</span> String <span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> uname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUname</span><span class="token punctuation">(</span>String uname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getIdNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> idNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdNum</span><span class="token punctuation">(</span>String idNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idNum <span class="token operator">=</span> idNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pay<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPay</span><span class="token punctuation">(</span>String pay<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pay <span class="token operator">=</span> pay<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、真实对象售票员小张 XiaoZhangSeller.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created 真实的售票员小张 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoZhangSeller</span> <span class="token keyword">implements</span> <span class="token class-name">ISellTicket</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> User user <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">XiaoZhangSeller</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者的信息==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者姓名："</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票性别："</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者身份证号："</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getIdNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者住址："</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============================="</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在验证信息...信息无误,请支付票钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买票者支付:"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请稍等正在出票....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出票成功:从西安到宝鸡大巴进站去坐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、动态代理 DyAutoSellerProxy.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 自动出票机,为了演示名字这样想,其实这是一个万能的动态代理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DyAutoSellerProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object object <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DyAutoSellerProxy</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span>args<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、测试一下 Test.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by TigerChain * 测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义个买票者</span>        User tigerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span><span class="token string">"TigerChain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中国陕西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setIdNum</span><span class="token punctuation">(</span><span class="token string">"610326************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tigerChain<span class="token punctuation">.</span><span class="token function">setPay</span><span class="token punctuation">(</span><span class="token string">"45.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 真实的买票员小张</span>        ISellTicket iSellTicket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoZhangSeller</span><span class="token punctuation">(</span>tigerChain<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态代理</span>        DyAutoSellerProxy dyAutoSellerProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DyAutoSellerProxy</span><span class="token punctuation">(</span>iSellTicket<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态创建一个出票机，把出票交给出票机去处理</span>        ISellTicket iSellTicket1 <span class="token operator">=</span> <span class="token punctuation">(</span>ISellTicket<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>iSellTicket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>iSellTicket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dyAutoSellerProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        iSellTicket1<span class="token punctuation">.</span><span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/05/proxy/autoseller_result.png" title="自动出票机结果"><p>自么样一个自动售票机就完成了「完全代理了人工去卖票」</p><p><strong>PS：</strong>这个 Demo 使用动态代理实现的，请大家自行使用静态代理实现本 Demo ，一定要动手实践哦</p><blockquote><p>4、AIDL 进行进程间通讯「远程代理」</p></blockquote><p>AIDL「Android 接口定义语言，是一种语言，其实就是 Android 中的远程 Service」，再说 AIDL 之前就不得不说 Binder「这里简洁明了的说一下 Binder 是什么，不展开深入讨论，如果深入展开，三天三夜也说不完」</p><p><code>什么是 Binder</code></p><p>由于两个进程不能直接进行通讯「为了安全系统有进程隔离机制」，所以两个进程之间是不能<strong>直接</strong>进行通讯的。Binder 可以说是 Android 系统中最重要的架构之一。Binder 是连接 Client「进程」 和 Server「进程」 的一个桥梁,Binder 是进程间通信的方式之一，在 Android 用的灰常灰常的多</p><p>我们先来看看 Android 的架构图像</p><img src="/2019/07/05/proxy/ape_fwk_all.png" title="Android 的架构图像"><p>图片来自 Android 的源码官站:<a href="https://source.android.com/devices/" target="_blank" rel="noopener">https://source.android.com/devices/</a></p><p>从 Android 的框架图中我们可以看到，应用程序框架层和系统服务层之间就是通过 Binder IPC 进行通讯的,说 Binder 机制前，我们先了解几个特点</p><ul><li>1、两个进程之间不能直接通信</li><li>2、内核可以仿问进程中的所有数据</li><li>3、两个进程之间不能直接进行通信，我们可以借助内核做中转达到间接通信的目的「Binder 就是这种机制」</li></ul><p><code>Binder 下两个进程通信的简易流程</code></p><img src="/2019/07/05/proxy/binder_arc.png" title="Binder 两个进程通信简易流程"><p><strong>PS:</strong> 以上图是便于理解所以抽象出来一张图，真实的 Binder 比这个过程复杂的多，这牵扯到 java 层的 Binder ，native 层的 Binder 等等「这不是我们讨论的重点」，方便我们理解，我们可以认为客户端的进程拿到服务端的引用，所以就可以调用服务端进程的方法了</p><p>说了这么多，这跟代理有个毛关系呢，别急我们写一个 AIDL 的实例分析一下：</p><p><code>AIDL demo 简单的 UML</code></p><img src="/2019/07/05/proxy/aidl_demo.jpg" title="AIDL demo 简单的 UML"><p><code>根据 uml 写代码</code></p><p>我们写一个简单的通过 Client 进程调用 Server 进程返回一个字符串功能，为了方便起见，我们直接在一个项目中创建「Server 开启在另一个进程中，开两个 APP 进行通信大家可以自行试一下，道理一模一样的」</p><ul><li>1、在项目中新建一个 AIDL 文件「在 AS 中的 APP上直接右键　new AIDL 即可」</li></ul><pre class=" language-aidl"><code class="language-aidl">interface CustomAIDL {    String getStr() ;}</code></pre><p>此时我们点击一下图标构造一下项目，此时会在 <code>app\build\generated\source\aidl\debug\包名\CustomAIDL.java</code> 文件「把 AS 切换到 project 视图下很容易找到」，这是 IDE 帮我们自动生成的</p><ul><li>2、定义一个远程服务 AIDLRemoteService.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 创建一个远程服务 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AIDLRemoteService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CustomAIDL<span class="token punctuation">.</span>Stub aidl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomAIDL<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">" 我是远程服务返回的 HELLO "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> aidl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义 AidlActivity 测试调用 「核心代码给出，其余代码看 Demo 即可」</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AidlActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">{</span> <span class="token keyword">private</span> CustomAIDL customAIDL <span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略若干代码<span class="token comment" spellcheck="true">// 客户端连接服务</span><span class="token keyword">private</span> ServiceConnection serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">,</span> IBinder service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            customAIDL <span class="token operator">=</span> CustomAIDL<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span> <span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"service:"</span><span class="token punctuation">,</span><span class="token string">"onServiceConnected"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            isServerStarted <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            customAIDL <span class="token operator">=</span> null <span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"service:"</span><span class="token punctuation">,</span><span class="token string">"onServiceDisconnected"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            isServerStarted <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">;</span> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_bind_service<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 绑定服务</span>                <span class="token function">bindService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>AidlActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>AIDLRemoteService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>serviceConnection<span class="token punctuation">,</span> Context<span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_test_method<span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isServerStarted<span class="token punctuation">)</span><span class="token punctuation">{</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>AidlActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"请先绑定服务先"</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    String str <span class="token operator">=</span> customAIDL<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>AidlActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略若干代码<span class="token punctuation">}</span></code></pre><ul><li>4、在 mainifests 中注册服务</li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.Proxy.AIDL.AIDLRemoteService<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:reomte<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span></code></pre><p>我这里给服务定义了一个 process ，那说明这个服务是运行在一个新进程中的</p><ul><li>5、测试一下，运行查看结果</li></ul><p>我们看一下当前项目进程情况 </p><img src="/2019/07/05/proxy/aidl_remote.png" title="AIDL 运行结果"><p>的确是两个进程「AidlActivity 和 AIDLRemoteService 分别在两个进程中」，我们定义的 remote 也显示出来了,看一下结果</p><img src="/2019/07/05/proxy/aidl.gif" title="AIDL 结果"><p>怎么样，两个进程之间完美的进行了通信了</p><p>通个毛呢？这和 proxy 有个啥关系呀「巴拉巴拉这么久」，不要急吗？软件开发有一条宗旨：先让它运行起来「我们先把 Demo 运行起来再说吗：咳咳又到了吃药的时间了」，我们来分析一下上面的调用过程</p><p><code>过程分析</code></p><ul><li>1、还记得我们上面说的 AD 帮我们自动生成的 CustomAIDL.java 文件吗，我们来一窥它的真容「以下代码是格式化后的」</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这里的 IInterface 代表远程 Server　对象有什么能力</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomAIDL</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Local-side IPC implementation stub class.     */</span>    <span class="token comment" spellcheck="true">// 在 server 端调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Binder</span> <span class="token keyword">implements</span> <span class="token class-name">designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String DESCRIPTOR <span class="token operator">=</span> <span class="token string">"designpattern.jun.com.designpattern.CustomAIDL"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Construct the stub at attach it to the interface.         */</span>        <span class="token keyword">public</span> <span class="token function">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Cast an IBinder object into an designpattern.jun.com.designpattern.CustomAIDL interface,         * generating a proxy if needed.         * 其中的 android.os.IBinder obj 对象是驱动给们的，这个就是我们绑定 service ,在 onServiceConnecttion 回调里面这个对象拿到一个远程的 Service          */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL <span class="token function">asInterface</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IInterface iin <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iin <span class="token keyword">instanceof</span> <span class="token class-name">designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// client 和 Server 在同一个进程调用 后面 debug 可以验证</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL<span class="token punctuation">)</span> iin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// cliet 和 Server 不在同一个进程调用代理对象 后面 debug 可以验证</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel data<span class="token punctuation">,</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 给客户端写数据</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> INTERFACE_TRANSACTION<span class="token operator">:</span> <span class="token punctuation">{</span>                    reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> TRANSACTION_getStr<span class="token operator">:</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String _result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>_result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 运行在客户端 server 进程的远程代理，实现对远程对象的仿问</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">designpattern<span class="token punctuation">.</span>jun<span class="token punctuation">.</span>com<span class="token punctuation">.</span>designpattern<span class="token punctuation">.</span>CustomAIDL</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder mRemote<span class="token punctuation">;</span>            <span class="token function">Proxy</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mRemote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> DESCRIPTOR<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 读取服务端写过来的数据</span>                android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _data <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel _reply <span class="token operator">=</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Parcel<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String _result<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span>Stub<span class="token punctuation">.</span>TRANSACTION_getStr<span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _result <span class="token operator">=</span> _reply<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TRANSACTION_getStr <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">.</span>FIRST_CALL_TRANSACTION <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这下看到 Proxy 了吧「是不是有点小激动呢」，我们来分析一下</p><img src="/2019/07/05/proxy/aidl_lc.png" title="AIDL 简单的流程图"><p>上面的图就是一个简单的 AIDL 的流程图，方便理解认为 CustomAIDL.stub 就是远程进程，它把信息注册到 Binder 中， CustomAIDL.Stub.Proxy 就是一个代理，代理什么呢？代理远程的 Binder ，远程 Binder 把方法传给 Client 就完成了两个进程间通信「详细过程比这个复杂」，对于 Binder 的入门介绍可以参看：<a href="http://weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="noopener">Binder 学习指南</a> 还是非常不错的，建议看三遍以上</p><p><strong>PS:</strong>这里再说一点，以上情况是针对 client 和 server 在两个进程间的通信，如果 client 和 server 在一个进程中，则 CustomAIDL.Stub.Proxy 就不会调用「在同一个进程中，我自己就能调自己还代理个毛呀」，不信？以结果征服你</p><p><code>client 和 server 同一进程和不同进程分析</code></p><ul><li>1、不同进程</li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.Proxy.AIDL.AIDLRemoteService<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:reomte<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span></code></pre><p>通过以上配置，我们可以看到 AIDLRemoteService 是运行在单独进程中的，我们在 CustomAIDL.java 中的 asInterface 方法中 debug 跟一下看看结果</p><img src="/2019/07/05/proxy/aidl_proxy.gif" title="AIDL 调用 Proxy"><p>通过图我们可以看出，如果 client 和 server 不在同一个进程中，那么代码就会走到</p><img src="/2019/07/05/proxy/aidl_call_proxy.png" title="调用代理"><p>调用代理的地方—CustomAIDL.Stub.Proxy,并传递远程代理的对象</p><ul><li>2、在同一进程</li></ul><p>去掉 service 中的 android:process=”:reomte” 则 client 和 server 就在同一进程了</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.Proxy.AIDL.AIDLRemoteService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       </code></pre><p>同理 debug 看结果</p><img src="/2019/07/05/proxy/aidl_notcall_proxy.png" title="不调用 proxy"><p>对比上面的图我们就知道了，这里的 iin 不为空，进入了　if 的方法体「没有调用代理」，至此上面的结果验证完毕</p><p>关于 AIDL 远程代理就说到这里了，如果对 Binder 想要深入了解，可以自行回去研究「这不在本节的范围内」</p><p>WTF 一个 AIDL 说了这么大半天，希望大家不要晕「我都有点晕了」</p><p><strong>源码地址：</strong> <a href="https://github.com/githubchen001/DesignPattern" target="_blank" rel="noopener">https://github.com/githubchen001/DesignPattern</a> 看 proxy/aidl 这部分</p><h3 id="三、Android-源码中的代理模式"><a href="#三、Android-源码中的代理模式" class="headerlink" title="三、Android 源码中的代理模式"></a>三、Android 源码中的代理模式</h3><p>其实通过上面的 AIDL 实验，我们就可以知道 Binder 使用的就是远程代理模式，Android 中的源码使用非常多，我就不一一分析了「说的太多人会受不鸟」，感兴趣的朋友可以自行分析，我这里贴出一张图，大家可以看</p><img src="/2019/07/05/proxy/ipc.png" title="IPC"><p>我们看看应用程序框架层的 XXXManager 对应田系统层的 XXXService 它们之间通过使用 AIDL 来进行跨进程通信，有兴趣可以扒扒这部分的源码看一下</p><h3 id="四、代理模式的优缺点"><a href="#四、代理模式的优缺点" class="headerlink" title="四、代理模式的优缺点"></a>四、代理模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、代理模式拿到的真实对象的引用，把真实对象很好的保护起来安全性高</li><li>2、扩展性好</li></ul><blockquote><p>缺点</p></blockquote><ul><li>增加了系统的复杂度，增加了额外好多的代码「设计模式好像都是这样」</li></ul><p>到此为止，我们把代理模式就说完了，由于这篇篇幅比较大，Android 源码也没有给大家分析「希望大家自行去看看，希望你有一种哦~原来是这样的赶脚」，其它的虚拟代理，缓存代理大家有兴趣也可以试试</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://segmentfault.com/a/1190000007997113" target="_blank" rel="noopener">小米开放平台:彻底理解ANDROID BINDER通信架构（上）</a></li><li><a href="http://weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="noopener">Binder学习指南</a> 建议看三遍以上，非常基础的一步步介绍 Binder </li></ul><p>到此为止我们简单明了的介绍完了策略模式，最后说一下：一定要亲手试试哦！</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/">人人都会设计模式</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/DesignPattern" target="_blank" rel="noopener">人人都会设计模式</a> 方便大家查看</p><p><a href="https://mp.weixin.qq.com/s/JNRTSwQz4W1C2QxKdfe84A" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04、适配器模式</title>
      <link href="/2019/07/04/adapter/"/>
      <url>/2019/07/04/adapter/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/04/adapter/adapter_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 Adapter 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是适配器模式"><a href="#一、什么是适配器模式" class="headerlink" title="一、什么是适配器模式"></a>一、什么是适配器模式</h3><h4 id="1、生活中的适配器"><a href="#1、生活中的适配器" class="headerlink" title="1、生活中的适配器"></a>1、生活中的适配器</h4><p>比如电脑转接器「这里主要是指连接电脑和投影仪的」，以我的 MAC 电脑为例子，我们公司的投影支持 VGA 和 HDMI ，但是我的 MAC 电脑只有一个 MINI DP 接口，如何把 MINI DP 转成 VGA 或 HDMI ，那么我就卖了这个玩意「全称 MINI DP 转 VGA &amp; HDMI 适配器」，这东西就是一个适配器</p><img src="/2019/07/04/adapter/converter.jpg" title="MINI DP 转 VGA &amp; HDMI 适配器"><p>这个适配器就可以把 MAC 和有 VGA 或 HDMI 的设备连接起来了，如下：</p><img src="/2019/07/04/adapter/converter2.jpg" title="MINI DP 转 VGA &amp; HDMI 适配器"><p>类似的还有电脑电源适配器，变压器「也是一种适配器」，其实净水器也可以看作是一种适配器「把杂水变成纯净水」，等等</p><h4 id="2、程序中的适配器"><a href="#2、程序中的适配器" class="headerlink" title="2、程序中的适配器"></a>2、程序中的适配器</h4><p>比如我们对接第三方的接口到我们的系统「对方给我们的接口，我们现在的接口对接不起来」</p><img src="/2019/07/04/adapter/sysnoadapter.png" title="我们接口和三方接口"><p>我们就需要写一个中间层「适配器」，做为一个桥梁，把两个接口连接起来</p><img src="/2019/07/04/adapter/syshasadapter.png" title="接口或系统之间的适配器"><blockquote><p>适配器模式的定义 </p></blockquote><p>通俗的说适配器模式就是把两个不兼容的接口连接起来，类似一个桥梁的作用</p><img src="/2019/07/04/adapter/adapter_define.jpg" title="适配器模式类比"><p><strong>注：</strong>适配器模式类比一个桥梁作用「它的作用不仅仅连接这么简单，还有转化等操作，桥梁就是为了方便理解」</p><blockquote><p>适配器模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Target</td><td>目标角色</td><td>是一个接口，也就是我们期待要转化成的接口</td></tr><tr><td>Adaptee</td><td>源角色</td><td>原始的类或接口对象</td></tr><tr><td>Adapter</td><td>适配器角色</td><td>把源角色转化成目标角色的类</td></tr></tbody></table><blockquote><p>适配器模式的分类 </p></blockquote><ul><li>1、类适配器模式</li></ul><p><code>类适配器简单的 UML</code></p><img src="/2019/07/04/adapter/ClassAdapter.jpg" title="类适配器简单的 UML"><p><strong>总结一下就是</strong>：适配器「Adapter」继承源类「Src」并且实现目标「Dst」接口,来实现 Src–&gt;Dst 的转换</p><ul><li>2、对象适配器模式</li></ul><p><code>对象适配器简单的 UML</code></p><img src="/2019/07/04/adapter/ObjectAdapter.jpg" title="对象适配器简单的 UML"><p><strong>总结一下就是</strong>：适配器「Adapter」持有源类「Src」的引用,并实现目标「Dst」接口,来实现 Src–&gt; Dst 的转化</p><ul><li>3、接口适配器模式</li></ul><p>对于这种模式「资料上也没有说有这种模式，我是在写代码的过程中发现可以这样写」，我持保留意见，如果有什么问题，大家完全可以说适配器模式的分类就有以上两种模式，可我认为这是适配器模式的一个变种</p><p><code>接口适配器简单的 UML</code></p><img src="/2019/07/04/adapter/interadapter.jpg" title="接口适配器"><p><strong>*总结一下就是:</strong> 适配器实现源和目标，把源转化成目标这么一个过程</p><h3 id="二、适配器模式举例"><a href="#二、适配器模式举例" class="headerlink" title="二、适配器模式举例"></a>二、适配器模式举例</h3><blockquote><p>1、Mac 电脑连接投影仪适配器</p></blockquote><p>以开头的例子为例子, MAC 电脑要连接投影仪器，需要一个 MINI DP 转 VGA &amp; HDMI 适配器，然后才能连接上投影仪</p><p>所以这里目标是 VGAORHDMI ，源是 MINI DP 适配器就是上面的那根线</p><p><code>类适配投影仪和 MAC 电脑简单的 UML</code></p><img src="/2019/07/04/adapter/MINIDP2HDMI.jpg" title="适配投影仪和 MAC 电脑简单的 UML"><p><code>根据 UML 撸码</code></p><blockquote><p>使用类适配器模式</p></blockquote><ul><li>1、定义目标接口 VgaOrHdmi </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 目标角色，对投影仪来说就要 VAG 或 HDMI * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VgaOrHdmi</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**输出 VGA 或是 Hdmi 接口*/</span>    String <span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义源类 MiniDp</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 源角色，MAC 电脑上的 MINIDP 接口 * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiniDp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">outPutMinkDp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是 mac 上的 MiniDp 输入接口"</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义适配器类 MidiDp2VgaOrHdmiAdapter </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 适配器，既是 MINIDP 接口也是 VAGORHDMI 接口，这样就可以把 MINIDP 转成 * VAG OR HDMI 接口 * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MidiDp2VgaOrHdmiAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MiniDp</span> <span class="token keyword">implements</span> <span class="token class-name">VgaOrHdmi</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token function">convertMiniDp2VgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 把 MINIDP 转化成 VAG 或 HDMI 方法     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">convertMiniDp2VgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//拿到源</span>        String str <span class="token operator">=</span> <span class="token function">outPutMinkDp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token string">" \n 经过适配器转化 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为这简单起见，这里直接修改源</span>        str <span class="token operator">=</span> <span class="token string">"输出变成  VGA 和 HDMI 接口"</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> str <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义打印机类 Projector</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 这是投影仪，我就是 VGA 和 HDMI 接口的 * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Projector</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 我要的就是 VGA 或者 HDMI 接口</span>        <span class="token keyword">public</span> String <span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span>VgaOrHdmi vgaOrHdmi<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> vgaOrHdmi<span class="token punctuation">.</span><span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、定义测试类 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试类 * @auther TigerChain */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//投影仪</span>        Projector projector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Projector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//适配器</span>        VgaOrHdmi adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MidiDp2VgaOrHdmiAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后得到投影仪想要的 VAG or HDMI 即可</span>        String str <span class="token operator">=</span> projector<span class="token punctuation">.</span><span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、运行查看结果</li></ul><img src="/2019/07/04/adapter/classadapter_mini2vga.png" title="适配投影仪和 MAC 电脑简单的结果"><p>完美转化了有木有</p><blockquote><p>对象适配器实现上述例子</p></blockquote><p><code>对象适配投影仪和 MAC 电脑简单的 UML</code></p><p>是不是和上面的图一样？错，肯定不一样，一样我还贴出来「我又没病」，只有一点改变，就是适配器不是继承源，而是持有源的引用，代码修改起来非常简单，只是修改适配器即可「别的代码都是一样的」</p><ul><li>1、修改 MidiDp2VgaOrHdmiAdapter </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 适配器，既是 MINIDP 接口也是 VAGORHDMI 接口，这样就可以把 MINIDP 转成 * VAG OR HDMI 接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MidiDp2VgaOrHdmiAdapter</span>  <span class="token keyword">implements</span> <span class="token class-name">VgaOrHdmi</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 修改之处 1 </span>    <span class="token keyword">private</span> MiniDp miniDp <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改之处 2</span>    <span class="token keyword">public</span> <span class="token function">MidiDp2VgaOrHdmiAdapter</span><span class="token punctuation">(</span>MiniDp miniDp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>miniDp <span class="token operator">=</span> miniDp <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getVgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token function">convertMiniDp2VgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 把 MINIDP 转化成 VAG 或 HDMI 方法     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">convertMiniDp2VgaOrHdmi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 修改之处 3  拿到源</span>        String str <span class="token operator">=</span> miniDp<span class="token punctuation">.</span><span class="token function">outPutMinkDp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token string">" \n 经过适配器转化 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为这简单起见，这里直接修改源</span>        str <span class="token operator">=</span> <span class="token string">"输出变成  VGA 和 HDMI 接口"</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> str <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>2、修改测试类，并运行查看结果</li></ul><p>修改测试类</p><img src="/2019/07/04/adapter/objectadatper_test.png" title="对象适配器测试类"><p>结果和上面是一样的</p><img src="/2019/07/04/adapter/classadapter_mini2vga.png" title="对象适配器实现 mini2vga"><p>适配器模式一般情况下不是软件设计的时候就要考虑的一种模式，它是一种随着软件的维护可能由于不同的开发人员，不同的产品，不同的厂家造成的功能类似而接口不相同的情况下一种解决方案「只有碰到无法改变原有设计和代码的情况下，才考虑适配」</p><blockquote><p>2、成龙初探好莱坞</p></blockquote><p>我们的功夫明星成龙初闯好莱坞的时候有一个最大的障碍就是语言问题「英文不太熟悉」，那么最早的时候都是有翻译者的，那么这个翻译员就充当了适配器的角色「把英文翻译成中文，或者把中文翻译成英文」</p><p><code>翻译员简单的 UML</code></p><img src="/2019/07/04/adapter/jackiechan.jpg" title="翻译员简单的 UML]"><p><code>根据 UML 擼代码</code></p><ul><li>1、新建 ISpeakEn 接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISpeakEn</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 说英文</span>    String <span class="token function">speakEnglish</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、新建 ISpeakCn 接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISpeakCn</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 说中文</span>    String <span class="token function">speakCn</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>3、翻译的接口「适配器」 Iinterpreter </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. * 翻译的接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iinterpreter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 中文翻译成英文</span>    <span class="token keyword">void</span> <span class="token function">chinese2English</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 英文翻译成中文</span>    <span class="token keyword">void</span> <span class="token function">english2Chinese</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>4、具体的翻译员小张 ZhangTranslation</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. * 举个例子，成龙有一个张翻译，能把英文翻译成中文，也能把中文翻译成英文 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangTranslation</span> <span class="token keyword">implements</span> <span class="token class-name">Iinterpreter</span><span class="token punctuation">,</span>ISpeakCn<span class="token punctuation">,</span>ISpeakEn<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chinese2English</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">translationC2E</span><span class="token punctuation">(</span><span class="token function">speakCn</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">english2Chinese</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">translationE2C</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 翻译英文--> 中文</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">translationE2C</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小张把 "</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">" 翻译成中文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 翻译中文--> 英文</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">translationC2E</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小张把 "</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">" 翻译成英文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">speakCn</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">speakEnglish</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、来一个老外「要对话肯定要有关建人物呀」 Foreigner </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. * 一个老外用英文给成龙打招呼 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foreigner</span> <span class="token keyword">implements</span> <span class="token class-name">ISpeakEn</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">speakEnglish</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String say <span class="token operator">=</span> <span class="token string">"Wills say："</span><span class="token operator">+</span>str <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> say <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>6、成龙上场「另一个关建人物」 JackieChan</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JackieChan</span> <span class="token keyword">implements</span> <span class="token class-name">ISpeakCn</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">speakCn</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String say <span class="token operator">=</span> <span class="token string">"成龙说："</span><span class="token operator">+</span>str <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> say <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>7、测试对话 Test</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by tigerchain on 11/12/17. * 这是一个成龙对话老外的测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 成龙说了一句话</span>        JackieChan jackieChan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JackieChan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        String str <span class="token operator">=</span> jackieChan<span class="token punctuation">.</span><span class="token function">speakCn</span><span class="token punctuation">(</span><span class="token string">"你好 wills"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 老外说了一句</span>        Foreigner foreigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foreigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> foreigner<span class="token punctuation">.</span><span class="token function">speakEnglish</span><span class="token punctuation">(</span><span class="token string">"Hello Jackie Chain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 张翻译翻译</span>        ZhangTranslation zhangTranslation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhangTranslation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        zhangTranslation<span class="token punctuation">.</span><span class="token function">chinese2English</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        zhangTranslation<span class="token punctuation">.</span><span class="token function">english2Chinese</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>8、运行查看结果</li></ul><img src="/2019/07/04/adapter/sayresult.png" title="成龙对话结果"><p>怎么样这个张翻译「适配器」还不错吧，当然适配器模式也会进化，会变种，但是万变不离其宗「上面 Demo 就可以看作是一个变种的适配器模式」</p><h3 id="三、Android-源码中的适配器模式"><a href="#三、Android-源码中的适配器模式" class="headerlink" title="三、Android 源码中的适配器模式"></a>三、Android 源码中的适配器模式</h3><p><code>ListAdapter</code></p><p>没有搞错吧，上一节不是说了 ListAdapter 是一种策略模式吗？没错它也是一种适配器模式「从名字就可以看出来」</p><p><code>ListAdapter 适配器简单的 UML</code></p><img src="/2019/07/04/adapter/ListAdapter.jpg" title="ListAdapter 适配器 UML"><p>从上图可以看出，BaseAdapter 是一个基础适配器，下面子类是具体各自的适配器，这些适配器的作用就是把数据 List<t>，Cusor 等转化成 ListAdapter 接口，最终让客户端 ListView 来调用「可以通俗的说就是把数据适配到 View 上面」</t></p><p><code>以 ArrayAdapter&lt;T&gt; 源码分析一下</code></p><ul><li>1、先看看 Adapter </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasStableIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">,</span> View var2<span class="token punctuation">,</span> ViewGroup var3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getItemViewType</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getViewTypeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><ul><li>2、ListAdapter 继承 Adapter 接口，所以拥有 Adapter 所有功能</li><li>3、BaseAdapter 实现 ListAdapter 所以不仅拥有 ListAdapteer 的所有能力</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ListAdapter</span><span class="token punctuation">,</span> SpinnerAdapter<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//省略苦干代码</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">areAllItemsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> View <span class="token function">getDropDownView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getView</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> convertView<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemViewType</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getViewTypeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>3、再来看看 ArrayAdapter<t></t></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayAdapter</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Filterable</span><span class="token punctuation">,</span> ThemedSpinnerAdapter <span class="token punctuation">{</span> <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> mObjects<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//列出其中一个构造方法 </span>     <span class="token keyword">public</span> <span class="token function">ArrayAdapter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@LayoutRes</span> <span class="token keyword">int</span> resource<span class="token punctuation">,</span>            <span class="token annotation punctuation">@IdRes</span> <span class="token keyword">int</span> textViewResourceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> textViewResourceId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mObjects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@Nullable</span> T <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> T item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mObjects<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> View convertView<span class="token punctuation">,</span>            <span class="token annotation punctuation">@NonNull</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">createViewFromResource</span><span class="token punctuation">(</span>mInflater<span class="token punctuation">,</span> position<span class="token punctuation">,</span> convertView<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> mResource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//其它代码流省略</span><span class="token punctuation">}</span></code></pre><p>我们通过源码可以看到 ArrayAdapter<t> 就是把 List<t> 的数据源采用一系列方法转化成 ListAdapter 需要的几种方法 getView getPosition 等等「这就是一个适配的过程」</t></t></p><p><code>ListAdapter 既是策略模式又是适配器模式</code></p><p>根据选择模式使用那种适配器 ListAdapter 就是策略模式，但是根据每个策略所实现功能「它就是适配器模式」</p><h3 id="四、适配器模式的优缺点"><a href="#四、适配器模式的优缺点" class="headerlink" title="四、适配器模式的优缺点"></a>四、适配器模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>1、客户端只关心适配器，对客户端来说更简单</li><li>2、现有类的复用而不需要改变，解决了现有类和目标类环境不一致的问题</li><li>3、解耦「目标类和适配器解耦」，不用改变原有的代码，再一个就是某天目标大变了，那么我们再编写一个适配器就可以了「原来的适配器可以扔掉了，就像某天你的 MAC 笔记本坏了，电源适配器就可以扔了–这是一个玩笑，除非是适配器不适用新买的 MAC」</li></ul><blockquote><p>缺点</p></blockquote><ul><li>1、适配器编写过程需要多方考虑「可能会很复杂」</li><li>2、适配器把一个接口转化成另一个接口，在客户端会给人误导，明明传入的是 A 接口，最后成 B 了，让人很晕</li></ul><p>到此为止，我们就介绍完了适配器模式，亲自尝试一下吧</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/">人人都会设计模式</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/DesignPattern" target="_blank" rel="noopener">人人都会设计模式</a> 方便大家查看</p><p><a href="https://mp.weixin.qq.com/s/zEDfH6faQfkWDeoRcaRKRA" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03、策略模式</title>
      <link href="/2019/07/03/strategy/"/>
      <url>/2019/07/03/strategy/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/03/strategy/strategy.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 Strategy 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是策略模式"><a href="#一、什么是策略模式" class="headerlink" title="一、什么是策略模式"></a>一、什么是策略模式</h3><h4 id="1、-生活中的策略"><a href="#1、-生活中的策略" class="headerlink" title="1、 生活中的策略"></a>1、 生活中的策略</h4><p>比如说我要出行旅游，那么出行方式有–飞机、自驾游、火车等，这几种方式就是策略。再比如：某大型商场搞活动–满 100 元送杯子，满 300 减 50 ，满 1000 元抽奖「一等将彩色电视机」，这种活动也是策略。在游戏中，我们打一个普通的怪使用普通的招即可，打大 BOSS 就要是用大招，这也是一种策略 …</p><h4 id="2、程序中的策略"><a href="#2、程序中的策略" class="headerlink" title="2、程序中的策略"></a>2、程序中的策略</h4><p>就是对各个算法的一个封装「不是实现算法，而是封装算法」，让客户端非常容易的调用，省掉了客户端　if else 恶心的判断，让客户端独立于各个策略</p><p>这里举一个简单的例子：比如我们在 Android 中一定会使用到 http 网络请求，请求库太多了，大概有 AsyncHttpclient,OkhttpClient,Volley 等「具体的策略」，那么我们完全可以使用一个策略模式，定义一个抽像策略，然后把各个请求策略封装，客户想使用哪个就使用哪个，非常灵活和方便</p><p>策略模式和简单工厂很相似，确有不同，策略是一种行为模式，而简单工厂是创建型模式「创建对象」 后面再说</p><blockquote><p>策略模式的定义 </p></blockquote><p>策略是对算法的封装，是一种形为模式，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换</p><blockquote><p>策略的特点</p></blockquote><ul><li>是一种行为模式，对算法封装，使得客户端独立于各个策略</li><li>扩展性强，添加策略无非就是添加一个具体的实现类而已，代价非常低</li></ul><blockquote><p>策略模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Strategy</td><td>抽象的策略</td><td>是一个接口或抽象类</td></tr><tr><td>ConcreteStrategy</td><td>具体的策略类</td><td>实现了抽象的策略</td></tr><tr><td>Context</td><td>一个普通的类</td><td>上下文环境，持有 Stragegy 的引用</td></tr></tbody></table><blockquote><p>策略模式简单的 UML</p></blockquote><img src="/2019/07/03/strategy/Strategy.jpg" title="策略模式"><h3 id="二、策略模式举例"><a href="#二、策略模式举例" class="headerlink" title="二、策略模式举例"></a>二、策略模式举例</h3><blockquote><p>1、曹操败走华荣道</p></blockquote><p>我们知道三国演义中曹操败走华容道的故事，相传在赤壁之战之后，曹操的船舰被刘备烧了，曹操逃离时面前有两条路：1、平坦的大路。2、泥泞的华容道。面对这两条路，曹操没有选择大路而选择有炊烟的小路「华容道路」，理由—实则虚之，虚则实之，那么曹操在选择道路的时候其实就是选择策略</p><p><code>败走华容道的简单的 UML</code></p><img src="/2019/07/03/strategy/huarong.jpg" title="败走华荣道"><p><code>根据 UML 编码</code></p><ul><li>1、定义一个路的抽象策略</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象的策略，定义逃跑路线 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRunStrategy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 逃跑线路</span>    <span class="token keyword">void</span> <span class="token function">escapeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义具体的路径–大路</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体的策略一走大路 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Highroad</span> <span class="token keyword">implements</span> <span class="token class-name">IRunStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">escapeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"走大路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义具体路线–华容道</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体的策略二走华容道 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaRongRoad</span> <span class="token keyword">implements</span> <span class="token class-name">IRunStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">escapeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"走华容道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、定义上下文，选择方式</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 上下文 持有 IRunStrategy 的引用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextRunStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IRunStrategy iRunStrategy <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ContextRunStrategy</span><span class="token punctuation">(</span>IRunStrategy iRunStrategy<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iRunStrategy <span class="token operator">=</span> iRunStrategy <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 选择道路     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">choiceRoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        iRunStrategy<span class="token punctuation">.</span><span class="token function">escapeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、主角曹操登场，看看曹操是如何选择道路的</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 曹操选择路线 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaoCao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 曹操疑心重，选择了华容道，对曹操来说至于杂样走华容道，不关心，死多少人也不关心，只关心我要走这条道就好         */</span>        IRunStrategy huaRongRoad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaRongRoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        ContextRunStrategy contextRunStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextRunStrategy</span><span class="token punctuation">(</span>huaRongRoad<span class="token punctuation">)</span> <span class="token punctuation">;</span>        contextRunStrategy<span class="token punctuation">.</span><span class="token function">choiceRoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>真的走了华容道，好吧 no zuo no die ，我们可以看到上面曹操选择逃跑路线都是行为，所以很适合策略模式「策略模式就是一种选择模式，当你举棋不定的时候就使用策略模式」</p><p><strong>注意：</strong> 策略的核心不是如何实现算法，而是如何更优雅的把这些算法组织起来，让客户端非常好调用「虽然策略非常多，可以自由切换，但是同一时间客户端只能调用一个策略，其实也很好理解，你不可能同时既坐飞机，又坐火车」。</p><blockquote><p>2、出行旅行方式</p></blockquote><p>经过上面的曹操败走华荣道，我们对策略有了感觉了吧，那么下来我们趁热打铁，再来一发，我们都知道出去旅行一般方式：坐飞机、坐火车、坐大巴、自驾游等等，这一个个的出行方式就是策略，接下来我给出简单的 UML 图，代码部分请各自自行实现「道理都懂，你的生活质量还是没有提高，方法再多也不见有多成功，就是因为实践太少，动手才是真理，靠–忘记吃药了，脉动回来」</p><p><code>出行方式简单的 UML</code></p><img src="/2019/07/03/strategy/travel_strategy.jpg" title="出行策略 UML"><p><code>代码实现</code></p><p>大家根据出行的 UML 图实现代码即可「非常简单，相信都可以实现」</p><blockquote><p>3、Android 中使用策略场景</p></blockquote><p><code>段子来了</code></p><p>先看个段子，轻松一下「注以下只是一个简单举例，库不分先后，俗话说没有最好，只有最适合」</p><p>相信做 Android 的朋友都离不开网络请求，有一天你「小明」发现了一个传说中很好的网络请求库 AsyncHttpClient ，你高兴的把网络请求相关的 API 都实现了，经理看到了说不错不错，写的很快吗，突然有一天，经理说：小明 AsyncHttpClient 好多 API 过时了「随着 Android 版本的更新」，并且对 RestFul 支持的不太友好，我看到一个叫 Retorfit2「听说是最好的网络」 的库，默认支持 OkHttp ，用 Retorfit 把 AsyncHttpClient 替换了吧，非常简单对你来说，小明这时估计心里飘过了一千匹羊驼「我靠，为麻不早说」，又过了一些时间，经理又说，小明呀，Volley 是 Google 推荐的网络请求库，你换成 Volley 库吧，小明此时估计把经理的八辈祖宗都问候了一遍，又是一通加班加点的改，最后 Happy 的改好了。后面又有一个牛 B 的库，经理又让替换，小明哭了「为什么受伤的总是我」…</p><p>看到这里大家应该想到了，上面的请求场景就是一个个的策略，如果小明按照策略模式走下来，只是添加扩展子策略，压根原来的方法毛都不用改，只能说，小明呀，你可张点心吧。</p><p><code>MVP + 策略模式</code></p><p>下面我们使用 MVP + 策略模式模拟一个简单的登录功能，实现上面小明的需求</p><p><code>MVP+retorfit+rx 请求策略简单的 UML</code></p><img src="/2019/07/03/strategy/mvp+http.jpg" title="MVP+策略登录 UML"><p><code>根据 UML 撸码</code></p><p>首先我们要使用　AsyncHttpClient、Retorfit 等，先添加配置 Gradle「项目 Module 的 build.gradle中」</p><pre class=" language-gradle"><code class="language-gradle">compile 'com.squareup.retrofit2:retrofit:2.3.0'compile 'io.reactivex.rxjava2:rxandroid:2.0.1'compile 'io.reactivex.rxjava2:rxjava:2.1.5'compile 'com.loopj.android:android-async-http:1.4.9'</code></pre><p><strong>注：</strong> 以下代码纯粹是为了演示策略模式，顺手写的，好多细节可能没有考虑到，但是基本框架就是这样的，可以自行完善</p><ul><li>1、分别新建 MVP 的基类接口,IPresenter,IModel,IView</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description MVP 中的 Presnter 基类 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPresenter</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description MVP 中的 Model 基类 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IModel</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description MVP 中的 View 基类 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IView</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>2、新建 MVP 的关联接口 <code>ILoginContact.java</code> 「当然也可以不写此类，直接写登录 MVP 的直接子类」</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> designpattern<span class="token punctuation">.</span>tigerchain<span class="token punctuation">.</span>com<span class="token punctuation">.</span>mvphttpstrategy<span class="token punctuation">.</span>mvp<span class="token punctuation">;</span><span class="token keyword">import</span> designpattern<span class="token punctuation">.</span>tigerchain<span class="token punctuation">.</span>com<span class="token punctuation">.</span>mvphttpstrategy<span class="token punctuation">.</span>mvp<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>Observable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Description MVP 的关联类「也可以单独创建 MVP 就是有点乱」 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoginContact</span> <span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">LoginView</span> <span class="token keyword">extends</span> <span class="token class-name">IView</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//显示进度条</span>        <span class="token keyword">void</span> <span class="token function">showProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//隐藏进度条</span>        <span class="token keyword">void</span> <span class="token function">hideProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//登录成功</span>        <span class="token keyword">void</span> <span class="token function">loadSuccess</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//登录失败</span>        <span class="token keyword">void</span> <span class="token function">loadFailed</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取得用户名</span>        String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取得用户密码</span>        String <span class="token function">getUserPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清除输入框</span>        <span class="token keyword">void</span> <span class="token function">clearEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户名和密码不能为空</span>        <span class="token keyword">void</span> <span class="token function">editnotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">LoginPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">IPresenter</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 登录功能         */</span>        <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 清除输入框架内容         */</span>        <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">ILoginModel</span> <span class="token keyword">extends</span> <span class="token class-name">IModel</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/***         * 登录的方法，其实这里就是一个抽象策略，至于你使用 retrofit 还是 asynchttpClient 还是 Volley 那是自己的事情         * @param uName         * @param uPass         * @return         */</span>        Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span>String uName<span class="token punctuation">,</span> String uPass<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中 ILoginModel 就是一个抽象策略，这里是登录功能</p><ul><li>3、分别实现具体的策略「使用不同的网络请求库调用登录 API」</li></ul><p><code>具体策略1：使用 AsyncHttpClient 调用登录</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 具体策略使用 AsyncHttpClient 来调用登录 API * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsynchHppClientImplLogimModel</span> <span class="token keyword">implements</span> <span class="token class-name">ILoginContact<span class="token punctuation">.</span>ILoginModel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">final</span> String uName<span class="token punctuation">,</span> <span class="token keyword">final</span> String uPass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> ObservableEmitter<span class="token operator">&lt;</span>User<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                AsyncHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 这里就是一个请求 没有真正的对接服务器，只是一个演示</span>                client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AsyncHttpResponseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token keyword">int</span> statusCode<span class="token punctuation">,</span> Header<span class="token punctuation">[</span><span class="token punctuation">]</span> headers<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responseBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>uName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"TigerChain"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> uPass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                            user<span class="token punctuation">.</span><span class="token function">setuName</span><span class="token punctuation">(</span>uName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            user<span class="token punctuation">.</span><span class="token function">setUpass</span><span class="token punctuation">(</span>uPass<span class="token punctuation">)</span><span class="token punctuation">;</span>                            e<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                            e<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                            e<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token keyword">int</span> statusCode<span class="token punctuation">,</span> Header<span class="token punctuation">[</span><span class="token punctuation">]</span> headers<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responseBody<span class="token punctuation">,</span> Throwable error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>具体策略2：使用 Volley 调用登录 API</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 具体策略使用 Volley 实现登录功能 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolleyImplLoginModel</span> <span class="token keyword">implements</span> <span class="token class-name">ILoginContact<span class="token punctuation">.</span>ILoginModel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">final</span> String uName<span class="token punctuation">,</span> <span class="token keyword">final</span> String uPass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> ObservableEmitter<span class="token operator">&lt;</span>User<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/***                 * 这里调用和 Volley 相关的 API 实现登录即可                 */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>具体策略3：使用 RetorFit 调用登录 API</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 具体策略 使用 RetorFit 实现登录功能性 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetorFitImplLoginModel</span> <span class="token keyword">implements</span> <span class="token class-name">ILoginContact<span class="token punctuation">.</span>ILoginModel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">final</span> String uName<span class="token punctuation">,</span> <span class="token keyword">final</span> String uPass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ILoginRetorfitApi loginService <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ILoginRetorfitApi<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>uName<span class="token punctuation">,</span>uPass<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中 User 和 ILoginRetorfitApi 类分别是：</p><pre class=" language-java"><code class="language-java"># User<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">/** * @Description 普通人的 Java * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String uName <span class="token punctuation">;</span>    <span class="token keyword">private</span> String Upass <span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> uName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setuName</span><span class="token punctuation">(</span>String uName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uName <span class="token operator">=</span> uName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUpass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Upass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpass</span><span class="token punctuation">(</span>String upass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Upass <span class="token operator">=</span> upass<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"># ILoginRetorfitApi<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">/** * @Description Retorfit API * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILoginRetorfitApi</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    Observable<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span>                            <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"passWord"</span><span class="token punctuation">)</span>String passWord<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>4、策略中的上下文「这里就是我们具体的 P」 LoginPresenterImpl.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description MVP 中的P ，就相当于策略中Context * @Creator junjun（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginPresenterImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ILoginContact<span class="token punctuation">.</span>LoginPresenter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ILoginContact<span class="token punctuation">.</span>ILoginModel iLoginModel <span class="token punctuation">;</span>    <span class="token keyword">private</span> ILoginContact<span class="token punctuation">.</span>LoginView loginView <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LoginPresenterImpl</span><span class="token punctuation">(</span>ILoginContact<span class="token punctuation">.</span>LoginView loginView<span class="token punctuation">,</span>ILoginContact<span class="token punctuation">.</span>ILoginModel iLoginModel<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iLoginModel <span class="token operator">=</span> iLoginModel <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loginView <span class="token operator">=</span> loginView <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uName <span class="token operator">=</span> loginView<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        String uPass <span class="token operator">=</span> loginView<span class="token punctuation">.</span><span class="token function">getUserPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>uName<span class="token punctuation">)</span> <span class="token operator">||</span> TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>uPass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            loginView<span class="token punctuation">.</span><span class="token function">editnotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        loginView<span class="token punctuation">.</span><span class="token function">showProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iLoginModel<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>uName<span class="token punctuation">,</span>uPass<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//                subscribeOn(Schedulers.io()) 由于 AsyncHttpClient 本身就是在子线程去请求的，所以这里为了演示把这个去掉</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loginView<span class="token punctuation">.</span><span class="token function">loadSuccess</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loginView<span class="token punctuation">.</span><span class="token function">loadFailed</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误，登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        loginView<span class="token punctuation">.</span><span class="token function">hideProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loginView<span class="token punctuation">.</span><span class="token function">hideProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        loginView<span class="token punctuation">.</span><span class="token function">clearEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>到此为止，我们的 MVP+RX+Retorfit 带策略的登录功能就完成了。</p><ul><li>5、客户端调用「在 Activity 中调用」</li></ul><p>下面来看客户调用，不贴代码了「放一张部分代码截图」，后面放出全部 DEMO 大家自行查看</p><img src="/2019/07/03/strategy/mvpLoginStrategy.png" title="mvpLoginStrategy"><p>怎么样，通过以上几个例子，相信我们对策略模式有了很好的理解了</p><ul><li>6、最后运行看一下</li></ul><img src="/2019/07/03/strategy/login.gif" title="登录 DEMO"><p>demo 没有实现完毕，其中 Retorfit 和 Volley 没有完善，有兴趣的可以自行完善</p><blockquote><p>Demo 地址：<a href="https://github.com/githubchen001/mvp-rx-loginStrategy" target="_blank" rel="noopener">https://github.com/githubchen001/mvp-rx-loginStrategy</a></p></blockquote><h3 id="三、Android-源码中的策略模式"><a href="#三、Android-源码中的策略模式" class="headerlink" title="三、Android 源码中的策略模式"></a>三、Android 源码中的策略模式</h3><blockquote><p>1、TimeInterpolator 时间插值器</p></blockquote><p>做过动画的朋友都知道，插值器的概念，一句话就是：设置不同的插值器，动画可以以不同的速度模型来执行</p><p><code>先看看 TimeInterpolator 和它的直接子类</code></p><img src="/2019/07/03/strategy/interploator.png" title="TimeInterpolator"><p><code>TimeInterpolator 的 UML</code></p><img src="/2019/07/03/strategy/TimeInterpolator.jpg" title="TimeInterpolator 的 UML"><p>从 UML 图就可以看出 TimeInterpolator 是一个典型的策略模式，你想使用那种插件器，是客户端的事情，并且结合工厂模式创建各自的插件器</p><blockquote><p>2、ListAdapter </p></blockquote><p>乍一看好像没有见过这个东东呀，但是我说一个你肯定知道 ListView 知道吧，BaseAdapter「实现了 ListAdapter」 知道吧 ，大家以前肯定都使用过 ListView 「虽然现在推荐使用 RecyclerView ，但是它依然被很多人使用」,它就是一个策略，我们来分析一下</p><p><code>ListAdaper 和它的直接子类</code></p><img src="/2019/07/03/strategy/listadapter.png" title="listadapter"><p><code>ListAdapter 的简单的 UML</code></p><img src="/2019/07/03/strategy/ListAdapter.jpg" title="listadapter 简单的 UML"><p>以上只是 ListAdapter 简单的一个 UML 图「问题说明即可，真正的 ListAdapter 比这复杂多」，从上面可以看到 ListAdapter 典型的一个策略模式，有兴趣的朋友可以自行跟一下源码</p><blockquote><p>3、RecyclerView.LayoutManager</p></blockquote><p><code>RecyclerView.LayoutManager 和它的子类</code></p><img src="/2019/07/03/strategy/layoutmanager.png" title="layoutmanager"><p><code>RecyclerView.LayoutManager 简单的 UML</code></p><img src="/2019/07/03/strategy/RecyclerView.LayoutManager.jpg" title="RecyclerView.LayoutManager"><p>可以看到 RecyclerView.LayoutManager 也是一个策略模式</p><p>其实不知不觉中我们使用了好多策略模式，只是没有注意罢了，细细想想，是不是那么回事，再多例子不再举了。有兴趣的朋友可以自已去扒扒 Android 源码看看那部分使用的是策略模式</p><h3 id="四、策略模式和简单工厂模式"><a href="#四、策略模式和简单工厂模式" class="headerlink" title="四、策略模式和简单工厂模式"></a>四、策略模式和简单工厂模式</h3><p>策略模式和简单工厂非常相似，结构基本上一样，但是它们侧重点不一样</p><ul><li>策略模式：是一个行为模式，解决策略的切换和扩展，让策略独立于客户端</li><li>简单工厂模式：是一种创建模式「创建对象」，接收指令创建出具体的对象，让对象的创建和具体的使用客户无关</li></ul><p>但是我们在策略模式中可以使用简单工厂模式「把生成策略这一过程使用工厂去实现，这样好不好呢？适合就是最好的」</p><h3 id="五、策略模式的优缺点"><a href="#五、策略模式的优缺点" class="headerlink" title="五、策略模式的优缺点"></a>五、策略模式的优缺点</h3><p>既然策略模式使用这么广泛，那么策略模式是不是就是无敌了呢，没有一点点缺点？肯定不是的。</p><blockquote><p>优点：</p></blockquote><ul><li>1、结构清晰，把策略分离成一个个单独的类「替换了传统的 if else」</li><li>2、代码耦合度降低，安全性提高「各个策略的细节被屏蔽」</li></ul><blockquote><p>缺点：</p></blockquote><ul><li>1、客户端必须要知道所有的策略类，否则你不知道该使用那个策略，所以策略模式适用于提前知道所有策略的情况下</li><li>2、增加了类的编写，本来只需要 if else 即可「但是这是所有模式和架构的通病呀」</li></ul><p>到此为止我们简单明了的介绍完了策略模式，最后说一下：一定要亲手试试哦！</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/">人人都会设计模式</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/DesignPattern" target="_blank" rel="noopener">人人都会设计模式</a> 方便大家查看</p><p><a href="https://mp.weixin.qq.com/s/QL1yj0D6I7Ij0uYQyQmX5Q" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02、单例模式</title>
      <link href="/2019/07/02/singleton/"/>
      <url>/2019/07/02/singleton/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/02/singleton/singleton_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 SingleTon 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是单例模式"><a href="#一、什么是单例模式" class="headerlink" title="一、什么是单例模式"></a>一、什么是单例模式</h3><h4 id="1、-生活中的单例"><a href="#1、-生活中的单例" class="headerlink" title="1、 生活中的单例"></a>1、 生活中的单例</h4><p>一个男人只能有一个媳妇「正常情况」，一个人只能有一张嘴，通常一个公司只有一个 CEO ，一个狼群中只有一个狼王等等</p><h4 id="2、程序中的单例"><a href="#2、程序中的单例" class="headerlink" title="2、程序中的单例"></a>2、程序中的单例</h4><p>一句话，就是保证一个类仅有一个实例即可「new 一次」，其实好多人都不把单例当作成一个设计模式，只是当作是一个工具类而已，因为它的确很简单，并且当你面视的时候面视官问你设计模式的时候估计都会说：可以说说你的你了解的设计模式吗「单例除外」。虽然很简单，但是我们还是要掌握和了解它</p><blockquote><p>单例模式的定义</p></blockquote><p>单例单例就是单一的实例，单例模式就保证一个类仅有一个实例，并且提供一个可以仿问的全局方法可以访问它</p><blockquote><p>单例模式的应用</p></blockquote><ul><li>网站的计数器</li><li>应用配置</li><li>多线程池一般也采用单例去设计</li><li>数据库配置,数据库连接池</li><li>其它等等</li></ul><blockquote><p>单例的特点</p></blockquote><ul><li>不能被外部实例化，只能自己内部实例化自己</li><li>单例生成的对象是独一无二的「节省资源」</li></ul><blockquote><p>单例模式的结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Singleton</td><td>单例类</td><td>就是一个普通的类</td></tr><tr><td>getInstance()</td><td>一个静态方法</td><td>提供类的实例</td></tr></tbody></table><blockquote><p>单例模式的 UML </p></blockquote><img src="/2019/07/02/singleton/SingleTon.jpg" title="单例 UML"><p>从上图我们可以了解到编写一个单例的基本步骤「我称之为三步法」</p><ul><li>1、成员变量静态化</li><li>2、构造方法私有化</li><li>3、实例方法静态化</li></ul><p>简单的代码结构就是</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SingleTon</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon instance <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在实际开发中，我们按照以上三步法就可以创建出一个单例来「直接用方法套用即可」</p><h3 id="二、单例模式举例"><a href="#二、单例模式举例" class="headerlink" title="二、单例模式举例"></a>二、单例模式举例</h3><blockquote><p>单例模式举例</p></blockquote><p>比如在一个狼群当中，只有一个狼王，有若干侦察员、捕猎员等等，这样就组成了一个狼群，下面看简单的 java 代码「代码只是用来演示单例模式，参考即可」</p><p><code>先看看狼王单例简单的 UML</code></p><img src="/2019/07/02/singleton/wolf.png" title="狼王单例"><p><code>根据 UML 编码</code></p><ul><li>1、定义一个狼的接口，比如这里是下达任务</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义一个侦察狼，它是放哨和探路的</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 侦察狼 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhenChaLang</span> <span class="token keyword">implements</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行狼王交行的任务</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 去探路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fangShao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 去放哨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、定义一个捕猎狼，猎羊</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 捕猎狼 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuLieLang</span> <span class="token keyword">implements</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 去猎羊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、主角狼王上场，统一安排规划</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 狼王 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LangWang</span> <span class="token keyword">implements</span> <span class="token class-name">IWolf</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LangWang langWang <span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token function">LangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狼王产生了--构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LangWang <span class="token function">getLangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> langWang<span class="token punctuation">)</span><span class="token punctuation">{</span>            langWang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狼王对应的地址："</span><span class="token operator">+</span>langWang<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> langWang <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LangWang<span class="token punctuation">.</span><span class="token function">getLangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LangWang<span class="token punctuation">.</span><span class="token function">getLangWang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buLie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 安排一些工作给下属狼 比如侦查狼</span>        ZhenChaLang zhenChaLang1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhenChaLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"侦察狼 "</span><span class="token operator">+</span>zhenChaLang1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhenChaLang1<span class="token punctuation">.</span><span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZhenChaLang zhenChaLang2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhenChaLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"侦察狼 "</span><span class="token operator">+</span>zhenChaLang2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zhenChaLang2<span class="token punctuation">.</span><span class="token function">fangShao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buLie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BuLieLang buLieLang1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuLieLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"捕猎狼 "</span><span class="token operator">+</span>buLieLang1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buLieLang1<span class="token punctuation">.</span><span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BuLieLang buLieLang2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuLieLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"捕猎狼 "</span><span class="token operator">+</span>buLieLang2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buLieLang1<span class="token punctuation">.</span><span class="token function">doSomting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到狼王是一个单例的「一个狼群确实只有一个狼王」，下面我们来验证一下结果</p><img src="/2019/07/02/singleton/singleton_deom.png" title="狼王单例 demo"><p>我们可以看到，虽然我们调用了两次狼王实例方法确实都是同一个狼王，而不侦查狼和捕猎狼分别是不同的狼，这就是一个单例的使用，各自体会一下。</p><p>上面狼王的例子中我们使用的是非线程安全的懒汉式单例模式，单例模式有好几种实现方式，下面我们来说说这几种实现方式</p><blockquote><p>单例模式的几种实现方式</p></blockquote><h4 id="1、饿汉式"><a href="#1、饿汉式" class="headerlink" title="1、饿汉式"></a>1、饿汉式</h4><p>饿汉式单例模式如其名，是一个饿货，类的实例在类加载的时候就初始化出来「把这一过程当作一个汉堡，也就是说必须要把汉堡提前准备好，饿货就知道吃」</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>1、是线程安全的</li><li>2、类不是延时加载「直接是类加载的时候就初始化」</li></ul><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li><code>优点：</code>没有加锁，执行效率非常高「其实是以空间来换时间」</li><li><code>缺点：</code>在类加载的时候就会初始化，浪费内存「你知道我要不要使用这个实例吗，你就给我初始化，太任性了」</li></ul><h5 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、成员变量静态化  饿汉式直接在类加载的时候就初始化实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2、构造方法私有化</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3、实例公有方法静态化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2、懒汉式线程不安全"><a href="#2、懒汉式线程不安全" class="headerlink" title="2、懒汉式线程不安全"></a>2、懒汉式线程不安全</h4><p>懒汉式单例模式，是在我需要的时候才去初始化实例，也就是说在类加载的时候，静态成员变量是 null 的，只有需要它的时候才去初始化实例，所以懒汉式可以延时加载</p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li>1、线程不安全</li><li>2、延时初始化类，在我需要的时候「也就调用 getInstance」的时候才去初始化化</li></ul><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>延时初始化类，省资源，不想用的时候就不会浪费内存</li><li>2、<code>缺点：</code>线程不安全，多线程操作就会有问题</li></ul><h5 id="演示代码-1"><a href="#演示代码-1" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、类变量静态化 类加载的时候是空的，所以不开辟内存</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon instance <span class="token operator">=</span> null <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2、构造方法私有化，这没什么好说的</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3、实例方法公有并且静态化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span>             instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3、懒汉式线程安全"><a href="#3、懒汉式线程安全" class="headerlink" title="3、懒汉式线程安全"></a>3、懒汉式线程安全</h4><p>懒汉式线程安全比懒汉式线程不全多了一个线程安全</p><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><ul><li>1、线程安全</li><li>2、延时初始化类，在我需要的时候「也就调用 getInstance」的时候才去初始化化</li></ul><h5 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>延时初始化类，省资源，不想用的时候就不会浪费内存，并且线程安全</li><li>2、<code>缺点：</code>虽然线程安全，但是加了锁对性能影响非常大「相当于排队获取资源，没有拿到锁子就干等」</li></ul><h5 id="演示代码-2"><a href="#演示代码-2" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleTon instance <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在这里加一个同步锁，这样就保证线程安全了</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instalce<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4、DCL「双重检查锁-double-checked-locking」-单例"><a href="#4、DCL「双重检查锁-double-checked-locking」-单例" class="headerlink" title="4、DCL「双重检查锁:double-checked locking」 单例"></a>4、DCL「双重检查锁:double-checked locking」 单例</h4><p>如其名，双检锁，这种方式单例模式在多线程的情况下能提高性能</p><h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h5><ul><li>1、线程安全</li><li>2、延时初始化类，在我需要的时候「也就调用 getInstance」的时候才去初始化化</li></ul><h5 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>延时初始化类，省资源，不想用的时候就不会浪费内存，并且线程安全，双重加锁，多线程仿问性能达到提升「后面详细说 WHY」</li><li>2、<code>缺点：</code>虽然线程安全，但是加了锁对性能影响非常大「相当于排队获取资源，没有拿到锁子就干等」</li></ul><h5 id="演示代码-3"><a href="#演示代码-3" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DCLSingleTon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**1、成员变量静态化**/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DCLSingleTon instance <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**2、构造方法私有化*/</span>    <span class="token keyword">private</span> <span class="token function">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**3、实例方法静态化**/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DCLSingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//第一次检查</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DCLSingleTon<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　<span class="token comment" spellcheck="true">//加锁</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第二次检查</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>双检锁性能提高</p></blockquote><p>那么这种方式，如何保证线程并且有很好的性能呢，首先安全安全不说了看到 synchronized 关键字我们就知道了，这里说一下为什么说性能比 3 中的提高了呢</p><p>我们知道线程安全性能主要是出在 synchronized 锁上，我们只要能保证锁最小化调用即可</p><p>从上面代码可以看出，只有第一次当 instance 为空的时候，才会去调用 synchronized 中的方法，以后就直接返回 synchronized 实例了，也就说 synchronized 只调用一次，所以在多线程上性能会大大的提升</p><blockquote><p>指令重排引起 DCL 问题</p></blockquote><p>这样做看起来很不错，解决了多线程问题并延时加载，并且同步一次性能有了不错的提升，但是这样做仍然会有问题，这和 Java 的内存模型有关「这种内存模型可以让处理器大大的提高执行效率」</p><p>如果再深入的说，就要说 JAVA 的内存模型了「这不在本节范围之内」，大家只要记住，Java 的指令重排会导致多线程问题「单线程不会受影响」，指令排序通俗的说就是代码执行顺序改变了，比如:以下一个简单的例子「下面代码只是为了说明问题，并不是真实情况下的代码」</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"b = "</span><span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果按照正常情况下肯定结果是 a=1,b=2。但是如果指令排序多线程情况下就有可能会出现 a=0,b=2 ，也就是 a = 1 和 b =2 调用顺序反过来了「便于理解，实际比这个复杂多了」，这样就大概解释了指令重排，详细可以看看美团点评技术团队的<a href="https://tech.meituan.com/java-memory-reordering.html" target="_blank" rel="noopener">Java内存访问重排序的研究</a> 讲的还是非常好的</p><blockquote><p>DCL 遇到指令重排出现问题分析</p></blockquote><p>上面的问题要从 <code>instance = new SingleTon()</code> 这句初始化开始「由于这是很多条指令，JVM 可能会指令重排，也叫乱序执行」，这个过程分成三个步骤</p><ul><li>1、给 instance 分配内存</li><li>2、然后调用 SingleTon 的构造方法初始化成员变量</li><li>3、把 instance 对象指向分配的内存空间(到这一步，那么 instance 肯定就是非空的)</li></ul><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>如果按照 1 2 3 执行顺序那么也就存在什么问题，可是实际情况是 2 3 执行顺序是不确定的「指令重排序」，这时结果就会成 1 3 2 ，那么问题来了，假如按后者来说，3 刚执行完毕，2 还没有开始之前，突然被另外一个线程2抢占了，此时 instance 已经非空的「但是却没有初始化」，那么线程2会直接返回 instance 去使用，结果就是挂了</p><img src="/2019/07/02/singleton/nosafe_dclsingleton.png" title="不安全的 DCL 单例"><p>好了，既然找到了问题，那么解决办法有以下两种</p><ul><li>1、不让 2 3 步骤发生指令排序</li><li>2、让保证初始化 intance 时只有一个线程来操作「就是单线程操作，单线程不会存在排序问题」</li></ul><h5 id="解决方案一：不发生指令排序"><a href="#解决方案一：不发生指令排序" class="headerlink" title="解决方案一：不发生指令排序"></a>解决方案一：不发生指令排序</h5><p>使用 volatile 关键字「Java 5 之后 volatile 就可以禁止对指令重新排序 」，就可以指令不发生重排，修改代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DCLSingleTon</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**1、成员变量静态化**/</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> DCLSingleTon instance <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**2、构造方法私有化*/</span>    <span class="token keyword">private</span> <span class="token function">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**3、实例方法静态化**/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DCLSingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//第一次检查</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DCLSingleTon<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　<span class="token comment" spellcheck="true">//加锁</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">==</span> instance<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第二次检查</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当然了，Java 5 之后才能完美的使用 volatile ，那么之前如何解决 DCL 安全问题呢？可以使用 Thread Local ，临时变量等具体可以看关于 DCL 的讲解以及改善 <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" target="_blank" rel="noopener">双重锁定被破坏声明</a> 说的非常的好</p><h5 id="解决方案二：静态内存部类-其实就是我们要说的第-5-种单例模式"><a href="#解决方案二：静态内存部类-其实就是我们要说的第-5-种单例模式" class="headerlink" title="解决方案二：静态内存部类 其实就是我们要说的第 5 种单例模式"></a>解决方案二：静态内存部类 其实就是我们要说的第 5 种单例模式</h5><p>利用 classloder 的机制来保证初始化 instance 时只有一个线程。JVM 在类初始化阶段会获取一个锁，这个锁可以同步多个线程对同一个类的初始化</p><p>修改代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DCLSingleTon</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingleTonHolder</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DCLSingleTon instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DCLSingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> SingleTonHolder<span class="token punctuation">.</span>instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5、静态内部类单例模式"><a href="#5、静态内部类单例模式" class="headerlink" title="5、静态内部类单例模式"></a>5、静态内部类单例模式</h4><p>静态内部类可以允许指令重排，但是对别的线程是不可见的，那么就想当于单线程指令重排对结果是没有影响的「这是内存模型的特点」，我们来一下单线程的执行行时序图，我们来看 <code>SingleTon instence = new SingleTon()</code> 这一过程</p><img src="/2019/07/02/singleton/thread_run_time.jpg" title="线程执行时序图"><p>所以静态内存类单例，你就可以理解成一个线程把上述过程做完了，所以别的线程看不见，所以不会出现时间排序的问题</p><p>只要保证 2 在 4 的前面，那么 2 3 是否重排，对结果都是没有影响的「在单线程的情况下」</p><h5 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h5><ul><li>1、线程安全</li><li>2、延时初始化类，在我需要的时候「也就调用 getInstance」的时候才去初始化化</li></ul><h5 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>延时初始化类，省资源，不想用的时候就不会浪费内存,并且线程安全，还可以执行其它的静态方法</li><li>2、<code>缺点：</code> –</li></ul><h5 id="演示代码-4"><a href="#演示代码-4" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingleTonHolder</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DCLSingleTon instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DCLSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> SingleTonHolder<span class="token punctuation">.</span>instance <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="/2019/07/02/singleton/static_single.png" title="静态内部类单例"><h4 id="6、枚举类单例"><a href="#6、枚举类单例" class="headerlink" title="6、枚举类单例"></a>6、枚举类单例</h4><p>枚举类单例模式是 《Effective Java》 作者极力推荐的单例的方法</p><h5 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h5><p>特点也就是检举类的特点，我们先看看枚举类的特点吧，多说无用，我们结合 java 代码来分析</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一周的枚举，这里为了说明问题，只列举到周三</span><span class="token keyword">public</span> <span class="token keyword">enum</span> EnumDemo <span class="token punctuation">{</span>  MONDAY<span class="token punctuation">,</span>  TUESDAY<span class="token punctuation">,</span>  WEDNESDAY <span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">donSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上就是一个简单的枚举 Java 类，我们反编译来看一下它的实现机制是杂样的，在这里我使用 <a href="https://varaneckas.com/jad/" target="_blank" rel="noopener">jad</a> 来反编译「当然你也可以使用 javap 来反编译还能看到二制」,以上 java 代码反编译出来的结果如下：</p><img src="/2019/07/02/singleton/enum_dcode.png" title="枚举类单例"><p>从以上反编译出来的代码图我们可以看出以下几点信息：</p><ul><li>1、枚举类类型是 final 的「不可以被继承」</li><li>2、构造方法是私有的「也只能私有，不允许被外部实例化，符合单例」</li><li>3、类变量是静态的</li><li>4、没有延时初始化，随着类的初始化就初始化了「从上面静态代码块中可以看出」</li><li>5、由 4 可以知道枚举也是线程安全的</li></ul><p>以上就是枚举类的特点，很符合单例模式，并且集成上以上几种单例模式的优点</p><h5 id="优缺点-5"><a href="#优缺点-5" class="headerlink" title="优缺点"></a>优缺点</h5><ul><li>1、<code>优点：</code>除以上特点优点之外，枚举类还有两个优点：<code>写法简单</code>、<code>支持序列化和反序列化操作「以上的单例序列化和反序列化会破坏单例模式」</code>、<code>并且反射也不能调用构造方法</code></li><li>2、<code>缺点：</code> –</li></ul><h5 id="演示代码-5"><a href="#演示代码-5" class="headerlink" title="演示代码"></a>演示代码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span>  EnumSingleTon <span class="token punctuation">{</span>    INSTACE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个枚举原素，代表 EnumSingleTon 一个实例</span>    <span class="token comment" spellcheck="true">/**     * 枚举中的构造方法只能写成 private 或是不写「不写默认就是 private」，所以枚举防止外部来实例化对象     */</span>    <span class="token function">EnumSingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 一些额外的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSometing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"枚举类单例"</span><span class="token punctuation">,</span><span class="token string">"这是枚举单例中的方法"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般情况下，不建议使用第 2 种和第 3 种懒汉式单例，建议使用第 1 种饿汉式单例，如果项目中明确要使用延时加载那么使用第 5 种静态内存类的单例，如果有序列化反序列化操作可以使用第 6 种单例模式，如果是其它需求可以使用第 4 种 DCL 单例</p><h3 id="三、Android-中的单例模式"><a href="#三、Android-中的单例模式" class="headerlink" title="三、Android 中的单例模式"></a>三、Android 中的单例模式</h3><blockquote><p>1、 InputMethodManager 类</p></blockquote><p>InputMethodManager 就一个服务类「输入法类」源码目录 <code>Androidsdk\sources\android-26\android\view\inputmethod</code>,部分代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INPUT_METHOD_SERVICE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">InputMethodManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略若干行代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">static</span> InputMethodManager sInstance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略若干行代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 以下是构造方法，没有声明权限就是私有的</span>    <span class="token function">InputMethodManager</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServiceNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>IInputMethodManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>                ServiceManager<span class="token punctuation">.</span><span class="token function">getServiceOrThrow</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INPUT_METHOD_SERVICE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> looper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 以下是构造方法，没有声明权限就是私有的</span>    <span class="token function">InputMethodManager</span><span class="token punctuation">(</span>IInputMethodManager service<span class="token punctuation">,</span> Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mService <span class="token operator">=</span> service<span class="token punctuation">;</span>        mMainLooper <span class="token operator">=</span> looper<span class="token punctuation">;</span>        mH <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">H</span><span class="token punctuation">(</span>looper<span class="token punctuation">)</span><span class="token punctuation">;</span>        mIInputContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControlledInputConnectionWrapper</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span>                mDummyInputConnection<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InputMethodManager <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>InputMethodManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputMethodManager</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServiceNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略若干行代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>从上面代码可以看出，InputMethodManager 是一个典型的– <code>线程安全的懒汉式单例</code></p><blockquote><p>2、Editable 类</p></blockquote><p>文件目录:frameworks/base/core/java/android/text/Editable.java 部分代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Editable<span class="token punctuation">.</span>Factory sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editable<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * Returns the standard Editable Factory.  */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Editable<span class="token punctuation">.</span>Factory <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </code></pre><p>可以看到非常典型的一个饿汉式单例模式</p><p>Android 源码中有非常多的单例模式的例子，这里就一一列举了，相信你看完上面的介绍绝对可以写出一个适合自己项目的单例了</p><p>到此为止，我们就把单例械说完了，动手试试吧</p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul><li>1、美团点评技术团队：<a href="https://tech.meituan.com/java-memory-reordering.html" target="_blank" rel="noopener">Java内存访问重排序的研究</a></li><li>2、双重锁定被破坏声明：<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" target="_blank" rel="noopener">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></li><li>3、方腾飞 《Java 并发编程的艺术》 第三章 Java 内存模型</li></ul><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/">人人都会设计模式</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/DesignPattern" target="_blank" rel="noopener">人人都会设计模式</a> 方便大家查看</p><p><a href="https://mp.weixin.qq.com/s/jXf8fbBubsBk0QaPKYGRkA" target="_blank" rel="noopener">阅读原文</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01、简单工厂模式</title>
      <link href="/2019/07/02/simplefactory/"/>
      <url>/2019/07/02/simplefactory/</url>
      
        <content type="html"><![CDATA[<img src="/2019/07/02/simplefactory/simplefactory_logo.png" title="本节大纲"><blockquote><p>版权声明：本文为博主原创文章，未经博主允许不得转载</p></blockquote><p> <strong>PS</strong>：转载请注明出处<br>作者: <a href="http://tigerchain.github.io">TigerChain</a><br>本文出自 <a href="http://tigerchain.github.io/categories/人人都会设计模式/">TigerChain  人人都会设计模式</a></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级</li><li>3、Demo 地址<br><a href="https://github.com/tigerchain/DesignPattern" target="_blank" rel="noopener">https://github.com/tigerchain/DesignPattern</a> 请看 FactoryPatttern/SimpleFactory 部分</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是简单工厂"><a href="#一、什么是简单工厂" class="headerlink" title="一、什么是简单工厂"></a>一、什么是简单工厂</h3><h4 id="1、-生活中的工厂"><a href="#1、-生活中的工厂" class="headerlink" title="1、 生活中的工厂"></a>1、 生活中的工厂</h4><p>简单工厂，从字面意思也能理解出来，就是一个很简单的工厂「W T F」，说了等于没有说是吧。我们先说说工厂吧</p><p>工厂就是一个制造厂，在生活中工厂太多太多了，比如车厂就是用来造车的，双汇就是出火腿肠的「当然不只是火腿」，烟草厂就是制作和加工香烟的，等等。</p><p>生活中的这些工厂是如何工作的呢？比如双汇制作火腿肠，肯定是把肉送进去，根据若干程序最后出来就是火腿。「如果想要鸡肉肠，那么加点鸡肉，玉米的加点玉米」，也就是说给定一些原材料「玉米、肉」出来的就是玉米肠，也就是说工厂就是输入东西—-然后制造出我想要的东西「至于你怎么样制造的，我管你呢」</p><h4 id="2、-程序中的工厂"><a href="#2、-程序中的工厂" class="headerlink" title="2、 程序中的工厂"></a>2、 程序中的工厂</h4><p>程序是源于生活的，所以程序中的工厂和生活中的工厂非常类似，生活工厂中的产品非常多，但是在程序中工厂的作用就是创造对象。</p><blockquote><p>简单工厂模式定义</p></blockquote><p>简单工厂模式又称为静态工厂模式，简单工厂模式的作用就是创建一个工厂类用来创建其它类的实例，至于类是怎么样创建的对用户来说是不可见的「屏蔽细节」</p><blockquote><p>简单工厂模式结构</p></blockquote><table><thead><tr><th>角色</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>Product</td><td>产品类</td><td>一般是一个抽象类或是接口</td></tr><tr><td>ConcreteProduct</td><td>具体的产品类</td><td>实现或是继承 Product</td></tr><tr><td>Factory</td><td>工厂类</td><td>用来创建具体的产品</td></tr></tbody></table><blockquote><p>简单工厂模式的 UML 图</p></blockquote><img src="/2019/07/02/simplefactory/simple_factory_uml.jpg" title="简单工厂 UML"><h3 id="二、简单工厂举例"><a href="#二、简单工厂举例" class="headerlink" title="二、简单工厂举例"></a>二、简单工厂举例</h3><p>比如我有苹果、桔子、等水果，然后有一个榨汁机，我给一个苹果就给我榨出苹果汁，给桔子就出桔汁。</p><blockquote><p>分析一下：</p></blockquote><p>在这个例子中，果汁就是我们的产品，而苹果汁，桔子汁就是我们的具体的产品，榨汁机就是我们的工厂,而苹果，桔子等水果就是我们输送的原材料</p><blockquote><p>写代码</p></blockquote><p>写代码之前先看看榨汁机工厂的 UML 图</p><img src="/2019/07/02/simplefactory/juice_uml.jpg" title="榨汁机工厂"><ul><li>1、定义抽象产品果汁接口 IJuice.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description 创建一个果汁接口 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IJuice</span> <span class="token punctuation">{</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//也可以声明一些其它的业务方法</span><span class="token punctuation">}</span></code></pre><ul><li>2、定义具体的产品，苹果汁「<code>AppleJuice.java</code>」，桔汁「<code>OrangeJuice.java</code>」</li></ul><pre class=" language-java"><code class="language-java"># AppleJuice<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">/** * @Description 一个具体的产品--- 苹果汁 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppleJuice</span> <span class="token keyword">implements</span> <span class="token class-name">IJuice</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"AppleJuice"</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"我是苹果汁"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"我是苹果汁"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"># OrangeJuice<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">/** * @Description 具体的产品桔子汁 * @Creator TigerChain（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrangeJuice</span> <span class="token keyword">implements</span> <span class="token class-name">IJuice</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"OrangeJuice"</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"我是桔子汁"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"我是桔子汁"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>3、创建榨汁机「工厂类」 JuiceFactory.java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Description  果汁机---工厂 * @Creator junjun（创建者） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JuiceFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据名称来生产不同的果汁     * @param name     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IJuice <span class="token function">createJuice</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        IJuice iJuice <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//苹果汁</span>            iJuice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleJuice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//桔子汁</span>            iJuice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrangeJuice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> iJuice <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>4、在 MainActivity 中使用</li></ul><p>核心代码，其它的代码是布局有两个按钮和一个文本，并且添加点击事件，这里不贴代码了。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_create_apple<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//对使用者来说，屏蔽了具体的细节,我管你杂榨汁呢</span>                IJuice appleJuice <span class="token operator">=</span> JuiceFactory<span class="token punctuation">.</span><span class="token function">createJuice</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                tv_show_result<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>appleJuice<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_create_orange<span class="token operator">:</span>                IJuice orangeJuice <span class="token operator">=</span> JuiceFactory<span class="token punctuation">.</span><span class="token function">createJuice</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                tv_show_result<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>orangeJuice<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>5、运行结果看果</li></ul><img src="/2019/07/02/simplefactory/smfactory_demo.gif" title="试试榨汁机"><p>这样我们一个简单的工厂模式就完了，是不是很简单「所以才叫简单工厂模式吗 (*^__^*)」</p><h3 id="三、从-Android-中看简单工厂"><a href="#三、从-Android-中看简单工厂" class="headerlink" title="三、从 Android 中看简单工厂"></a>三、从 Android 中看简单工厂</h3><blockquote><p>1、BitmapFactory</p></blockquote><p>在 Android 中我们经常使用 Bitmap ，其实和 Bitmap 相关的 BitmapFactory 就是一个简单工厂模式 </p><h5 id="我们来看看-BitmapFactory-的方法"><a href="#我们来看看-BitmapFactory-的方法" class="headerlink" title="我们来看看 BitmapFactory 的方法"></a>我们来看看 BitmapFactory 的方法</h5><img src="/2019/07/02/simplefactory/BitmapFactory_method.png" title="BitmapFactory_method"><p>可以看到 BitmapFactory 分为两类，一类是普通原静态方法「红色框中」，第二类是 JNI 调用的方法「黄色框内」</p><p>其实从字面意思我们也可以看到 BitmapFactory 就是 Bitmap 的工厂就是用来生成 Bitmap 的</p><p>概括起来 BitmapFactory 生成 Bitmap 无非就是根据三种输入源「各个参数」</p><ul><li>1、图片的路径</li><li>2、图片的二进制文件</li><li>3、图片的流</li></ul><p>好我们现在就拿简单工厂模式来分析 BitmapFactory ,为什么说 BitmapFactory 是一个简单工厂模式</p><h5 id="BitmapFactory-UML-分析"><a href="#BitmapFactory-UML-分析" class="headerlink" title="BitmapFactory UML 分析"></a>BitmapFactory UML 分析</h5><p>通过前面的学习，我们知道简单工厂模式要有一个产品「抽象类」，具体产品「实现类」，还要有一个工厂，我们拿这三样对比 BitmapFactory 就可以了 ，我们看到是这样的</p><img src="/2019/07/02/simplefactory/BitmapFactory.jpg" title="BitmapFactory 的简易 UML"><p>纳尼？这是简单工厂模式吗？怎么和简单工厂模式的结构匹配不上呢，话说我的产品接口呢？</p><p>这肯定是简单工厂模式，没看比我们前面的简单工厂模式结构还简单吗？*^__^*,还有谁 TM 说一定必须得有抽象产品这么一说「反正我没有说」，为什么呢？因为 BitmapFactory 很明确就是创建 bitmap 的「功能很单一」，这里的 bitmap 就是我的具体产品「只有这一个产品呀，你咬我呀」，我还需要抽象产品接口吗？肯定不需要了。</p><h5 id="BitmapFactory-生成-Bitmap-流程"><a href="#BitmapFactory-生成-Bitmap-流程" class="headerlink" title="BitmapFactory 生成 Bitmap 流程"></a>BitmapFactory 生成 Bitmap 流程</h5><p>大概看一个　BitmapFactory 生成 Bitmap 的一个流程吧，这里以 decodeFile(String filePath) 为例来说明</p><img src="/2019/07/02/simplefactory/bitmapfactory_decodefile.png" title="bitmapfactory_decodefile"><p>上图已经很清楚的看到使用 BitmapFactory.decodeFile(String filePath) 生成一张 Bitmap 的过程了「最后是调用 JNI 来生成 Bitmap 的」，其它的方法过程都是类似，其实这一张图就是生成一张 Bitmap 的细节，而使用 BitmapFactory 就是把这些细节都屏蔽了，我管你杂生成的，我给你一个图片路径你给我生成一个 Bitmap 就好了</p><blockquote><p>2、Executors </p></blockquote><p>我们对 Executors 应该不会陌生「这里不过多讲 Executors，只是感受一下简单工厂模式」，Executors 是用来创建线程池的，其它它也是一个工厂，我们来看看吧</p><h5 id="我们来看看-Executors-的方法"><a href="#我们来看看-Executors-的方法" class="headerlink" title="我们来看看 Executors 的方法"></a>我们来看看 Executors 的方法</h5><img src="/2019/07/02/simplefactory/executors_method.png" title="executors_method"><p>在这里，我只截取了部分方法，我们可以看到 Executors 有一些创建缓存线程池等等一系列方法，并且其中还有一个线程工厂「图中红色框，从名字可以看出」</p><h5 id="Executors-简单的-UML"><a href="#Executors-简单的-UML" class="headerlink" title="Executors 简单的 UML"></a>Executors 简单的 UML</h5><img src="/2019/07/02/simplefactory/Executors_uml.png" title="Executors 简单的UML"><p>上图是 Executors 简单的一个 UML 没有全部画出，大概意思基本上表明了，我们从图中可以看出，Executors 完全就是一个简单工厂模式，基本上符合我们简单工厂模式的结构，只不过多了几个接口和类而已「我们只看(1),(2),(3) 就完全符合简单工厂模式」，也就是我给你一些参数你给我创建我想要的线程池即可</p><h3 id="四、简单工厂的优缺点"><a href="#四、简单工厂的优缺点" class="headerlink" title="四、简单工厂的优缺点"></a>四、简单工厂的优缺点</h3><blockquote><p>优点：</p></blockquote><ul><li>实现起来非常简单「不然叫毛个简单工厂呢」，也充分利用了多态机制</li><li>解耦「使调用端不再创建对象，而是交给工厂去创建」，并且对内部实现屏蔽「调用端不知道具体实现」</li><li>分工明确，并且能更好的体现出代码含义</li></ul><blockquote><p>缺点</p></blockquote><ul><li>工厂静态方法无法继承</li><li>代码维护不容易，如果想要创建更多的具体实现的对象，需要大量修改工厂</li><li>违反开闭原则「对扩展开放，对修改关闭」，如果有一个新的对象要添加，那么就要修改工厂</li></ul><p>以上就是对简单工厂模式的一个介绍，确实挺简单的，到此为止，我们就说完了简单工厂模式</p><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 公号同名，订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/人人都会设计模式/">人人都会设计模式</a></p><p>我将源码发布到了 <a href="https://github.com/TigerChain/DesignPattern" target="_blank" rel="noopener">人人都会设计模式</a> 方便大家查看</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人人都会设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02、永不过时的 HelloWorld</title>
      <link href="/2019/06/29/flutterhelloworld/"/>
      <url>/2019/06/29/flutterhelloworld/</url>
      
        <content type="html"><![CDATA[<img src="/2019/06/29/flutterhelloworld/flutter_hello_page_logo.png" title="本节大纲"><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、目录结构"><a href="#一、目录结构" class="headerlink" title="一、目录结构"></a>一、目录结构</h3><p>在上一小节中我们介绍了 Flutter 的安装方法以及 Flutter 的开发环境「IDE」，并且运行了 Flutter 默认给我们生成的项目，但是代码我们应该写在那里以及项目的组成部分我们还是一概不知的，下面我们先来看看项目的目录吧</p><img src="/2019/06/29/flutterhelloworld/flutter_struct.jpg" title="flutter 的项目结构"><h4 id="1、基本结构"><a href="#1、基本结构" class="headerlink" title="1、基本结构"></a>1、基本结构</h4><p>如果熟悉 ReactNative 的童鞋对这个目录不会陌生，基本上来说就是 Android 和 IOS 来承载 flutter，一般情况下 Android 和 IOS 中的文件我们不会去动，除非要混合开发，而我们的 flutter 文件是在 lib 文件夹中的，并且入口文件是 main.dart，其它的没什么好说的，不过要注意一点就是 pubspec.yaml 文件它是 flutter 的配置文件，类似于 Android 中的 gradle 和 Manifest 文件，具体后面会说</p><h4 id="2、初识-main-dart-文件"><a href="#2、初识-main-dart-文件" class="headerlink" title="2、初识 main.dart 文件"></a>2、初识 main.dart 文件</h4><p>此文件是 flutter 的入口文件，默认会给我们生成一个界面，也就是我们上节看到的界面，我们来看看里面有啥东东</p><img src="/2019/06/29/flutterhelloworld/main_dart.jpg" title="默认的 main.dart 文件"><p>我靠啥东东吗「如果初学 flutter 看到这个东西会晕晕的」，在组件化流行之后「以 React/Vue 等为代表」，flutter 也不例外也是采用组件化「其实就是借鉴了 React，但是 Google 叫它为 Widget – 小部件，就是一个组件，和 React/Vue 的 Component 是一个东东」，一个 flutter 项目就是由一个个 Widget 组成的「关于如何定义 Widget 后面章节说，不在本节范围内」</p><p>总之一句话，这个 main.dart 文件第一次看不懂，看不懂，那么我们就不看了「后面通过学习，自然懂了」，只需要知道这个货就是 flutter 的入口文件即可</p><h3 id="二、手写-HelloWorld"><a href="#二、手写-HelloWorld" class="headerlink" title="二、手写 HelloWorld"></a>二、手写 HelloWorld</h3><h4 id="1、命令式和声明式"><a href="#1、命令式和声明式" class="headerlink" title="1、命令式和声明式"></a>1、命令式和声明式</h4><p>命令式和声明式是两种编程方式，我们来说说吧</p><p><strong>命令式</strong></p><p>命令式就是所有功能和属性是通过指令来响应的，玩过 jquery「操作 DOM」 都知道基本上事件驱动的都是基于此种模式的，举个例子吧，比如我们要取得输入框的值，使用 js 来操作    </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 取得 input 元素</span><span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>onChange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> value <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>就是发送一个消息告诉系统一步步如何去做</p><p><strong>声明式</strong></p><p>比如 React/Vue 或者是 Android 中的布局 xml 文件都是声明式的，它主要是告诉系统做什么，但是具体如何做是系统的事情，拿 Jquery 和 React/Vue 对比就非常清楚了，Jquery 通过命令式来操作 DOM 但是 React/Vue 把操作 DOM 屏蔽了，只要通过声明来实想要的效果，使用 vue 实现上述效果</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>flutter 属于声明式</strong></p><p>我们在写组件或界面的时候基本上都是给类似于 key:value 这种形式来指明我想的东西，至于东西杂样出来底层帮你做了「你不用关心」</p><h4 id="2、手写-helloworld"><a href="#2、手写-helloworld" class="headerlink" title="2、手写 helloworld"></a>2、手写 helloworld</h4><p>看到上面的 main.dart 文件我们晕晕的，那就直接把它内容删掉，只保留第一行「import 语句」，一个最简单的 flutter 应用只有一个 runApp 方法和一个组件，官网上说的很清楚，如下</p><img src="/2019/06/29/flutterhelloworld/minimal_fultter.jpg" title="最小的 flutter app]"><p>void main 就是程序的主入口，相当于 java 的 main 方法没什么好说的，通过 runApp 来加载组件并且将其添加到屏幕上，这是比较简单的 flutter 应用，但还不够简单，更简单应该就是 runApp 直接来个 组件如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span>     <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>       <span class="token string">'Hello'</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 文字方向，从左向右</span>       textDirection<span class="token punctuation">:</span> TextDirection<span class="token punctuation">.</span>ltr     <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>没啥说的看看效果吧，直接 flutter run 看效果</p><img src="/2019/06/29/flutterhelloworld/flutter_hello.jpg" title="文本左对齐"><p>看到了吧一个最简单的 flutter 应用就出来了，显示了一个 hello 但是位置被挡住了「没关系我们调整即可」</p><p>这里 Text 就是一个组件，如果想让 Hello 水平居中使用其 textAlign 属性来选择水平对齐方式，如果我们想让 hello 在屏幕的中间，则需要给 Text 外面套一个组件 Center 或 Align 即可，我们套一个 Center 来试试</p><img src="/2019/06/29/flutterhelloworld/flutter_hello_center.jpg" title="居中对齐"><p>如果我们在命令行输入 flutter run 运行起来以后，修改代码直接使用 shift+r「即 R」就可以实现热加载，不废话看效果</p><img src="/2019/06/29/flutterhelloworld/flutter_hello_center_code.gif" title="文本居中"><p>我们在 Text 外套了一个 Center 组件，然后我按了一个 R 所修改的效果就出来了「是不是感觉很爽」，有可能初次写这些东西的时候不清楚是什么意思，没关系我们说组件的时候会详细的介绍，只需要知道 Center 是一个组件里面有一个 child 组件 Text</p><h3 id="三、Flutter-组成"><a href="#三、Flutter-组成" class="headerlink" title="三、Flutter 组成"></a>三、Flutter 组成</h3><p>一个 flutter 应用是由各个组件组成的，面向对象是一切皆对象，React/Vue 一切皆组件，flutter 也是一切皆组件，提前说一下组件的组成方式，在 flutter 中通过组件嵌套的方式生成应用，这里就以上面的例子来说明吧</p><img src="/2019/06/29/flutterhelloworld/flutter_hello_center.jpg" title="组件组成"><p>此 demo 由一个 Center 组件和 Text 组件组成</p><img src="/2019/06/29/flutterhelloworld/hello_component.jpg" title="demo 组件组成图"><p>这没有什么好说的，当然这个 demo 太简单，真实情况比这复杂多了，但是再复杂的 flutter 应用也是由一个个组件组成的，如图所示</p><img src="/2019/06/29/flutterhelloworld/flutter_widget_tree.jpg" title="demo flutter 由一个个小部件组成"><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ul><li>1、了解 flutter 目录结构</li><li>2、手写 hello world ，并且了解命令式编程和声明式程序的区别</li><li>3、flutter 的组成以及组件化思想</li></ul><p>本节和上一小节是一个预热，下一小节我们说说 flutter 常用的组件，熟悉了这些组件「以及如何使用它们」我们就可以开干 flutter 应用的界面了</p><hr><p>作者: <a href="https://github.com/TigerChain" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容，公号「TigerChain」首发</p><p><img src="https://dev.tencent.com/u/TigerChain/p/blog_logo/git/raw/master/qrcode.jpg" alt="tigerchain"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从头整 Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01、环境搭建</title>
      <link href="/2019/06/15/flutterevninit/"/>
      <url>/2019/06/15/flutterevninit/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flutter_env_page_logo.png" alt="flutter 环境搭建大纲"></p><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是-Flutter"><a href="#一、什么是-Flutter" class="headerlink" title="一、什么是 Flutter"></a>一、什么是 Flutter</h3><h4 id="1、移动端几种开发模式"><a href="#1、移动端几种开发模式" class="headerlink" title="1、移动端几种开发模式"></a>1、移动端几种开发模式</h4><p>在说 flutter 是什么之前，我们先来看看目前移动端开发几种模式</p><ul><li>1、纯原生开发「即 native 开发」</li><li>2、纯的 webapp </li><li>3、hybrid 混合式开发</li></ul><p>除了第 1 个原生开发外，其余的两个现在基本上有两个方案，一种是基于原生的 webview 去做扩展和开发，第二种是使用 jsbridge 方案来直接调用原生控件来渲染</p><p>cordova appcan mui 等就是基于 webview 来扩展来使用 html、js来完成界面效果，这种方案性能是一个硬商，并且如 cordova 等如果有些功能不能满足我们还需要自定义原生去扩展插件功能，在这里 webview 的缺点都会体现出来</p><p>jsbridge 为代表的是 ReactNative、Weex ,没有 webview 直接把渲染工作交给系统去完成，这样性能就大大提升，但是跨平台特性不彻底，有时需要针对不同平台写不同的代码，并且开发者如果是一个人需要掌握 IOS/Android 两个平台的原生开发，但是 jsbridge 也是需要代价的这块也会有性能问题，那么有没有可以有原生体验，又不用 webview 和 jsbridge 当然有，native 开发「这不废话吗」，其实 flutter 就是在这种思路下诞生的</p><h4 id="2、flutter-是什么"><a href="#2、flutter-是什么" class="headerlink" title="2、flutter 是什么"></a>2、flutter 是什么</h4><p>flutter 是 Google 开源的一个可以高质量的编写 IOS/Android 的移动 UI 框架，flutter 重写了一套 UI 杠架，不基于 webview 也不基于 jsbridge ,是从头到尾彻底重写了甚至还包括他的开发语言「Dart 反正效率比 js 高」,它的渲染引擎是基于跨平台的 Skia 图形库来实现，可以简单的理解 flutter 上面的界面就是直接使用 canvas 画出来的</p><h3 id="二、flutter-开发环境"><a href="#二、flutter-开发环境" class="headerlink" title="二、flutter 开发环境"></a>二、flutter 开发环境</h3><p>flutter 可以在 Mac/Windows/Linux 上进行开发，由于个人电脑是 mac 电脑，所以以 mac 环境来说一下「其它平台类似」，总体来说就以下三步</p><h5 id="1、下载-Mac-环境下的-flutter-安装包"><a href="#1、下载-Mac-环境下的-flutter-安装包" class="headerlink" title="1、下载 Mac 环境下的 flutter 安装包"></a>1、下载 Mac 环境下的 flutter 安装包</h5><p>下载地址：<a href="https://flutter.io/docs/get-started/install/macos" target="_blank" rel="noopener">https://flutter.io/docs/get-started/install/macos</a></p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flutter_download.jpg" alt="flutter mac 版本下载"></p><p>点击下载即可</p><h5 id="2、解压安装包并且配置环境变量"><a href="#2、解压安装包并且配置环境变量" class="headerlink" title="2、解压安装包并且配置环境变量"></a>2、解压安装包并且配置环境变量</h5><p>把下载下来的 .zip 安装包解压到指定目录比如 installSoftWare<br>配置环境变量在 .bash_profile 或 .zshrc 中添加</p><pre><code>export PATH="$PATH:/`pwd`/installSoftWare/flutter/bin"</code></pre><p>其中 pwd 就是你在命令行默认界面 pwd 中出来的命令，一般是 /User/XXX，然后保存文件，基本上 flutter 就可以使用了，我们可以在命令行中试一下 flutter 命令</p><h5 id="3、安装-flutter-依赖"><a href="#3、安装-flutter-依赖" class="headerlink" title="3、安装 flutter 依赖"></a>3、安装 flutter 依赖</h5><p>经过上面两步 flutter 安装完成了，但是还需要安装一些依赖，我们配置完以后运行 flutter doctor 来检查一下缺少的依赖</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flutter_doctor.jpg" alt="flutter_doctor 检查依赖"></p><p>如图所示，我这里是把所需要的依赖安装完了，不是最初的状态，你直接运行会报好多 x 可以选择根据自己需要的安装，比如拿 AndroidStudio 开发那就安装 AndroidStudio 的依赖「在 AS 的 Plugins 中安装 flutter 即可」，在 Vs Code 中开发安装 flutter 插件即可，根据自己需要安装即可只要前第一个没有问题你配置个 Android/IOS 环境再加一个开发 IDE 依赖就可以了，这没什么好说的，如果有 x 号会提示你如何解决的</p><h3 id="三、来个-Demo-试一下"><a href="#三、来个-Demo-试一下" class="headerlink" title="三、来个 Demo 试一下"></a>三、来个 Demo 试一下</h3><p>这里我们使用两种方式来创建 flutterdemo 项目</p><h5 id="1、使用命令行创建"><a href="#1、使用命令行创建" class="headerlink" title="1、使用命令行创建"></a>1、使用命令行创建</h5><p>为了方便演示，我们在 Destop 创建一个 flutterdemo 项目，使用 flutter create xxx「项目名」 来创建项目</p><pre><code>cd ~cd Desktopflutter create flutterdemo  // 创建一个 flutter 项目</code></pre><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flutter_create_demo.jpg" alt="创建一个 flutter demo"></p><p>这样我们就创建出第一个 flutter 项目，在这期间我还偷偷的把 IOS 环境也安装了「嘿嘿」</p><p><strong>注意：</strong> flutter 在获取 package 的时候可能会非常慢，这一点官方也考虑到了，我们直接看 <a href="https://flutter.io/community/china" target="_blank" rel="noopener">https://flutter.io/community/china</a> 中说的非常详细，国内用户还需要在环境变量中配置以下内容「怎么样贴心吧」</p><pre><code>export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</code></pre><p>根据提示，我们来进入到项目中然后 run 一下，看看效果</p><pre><code>cd flutterdemoflutter run</code></pre><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flutter_run_not_device.jpg" alt="flutter 提示没有运行设备"></p><p>很不幸，没有运行起来，大概意思就是我们没有启动模拟器或真机，没事跟着提示走，运行 flutter emulators 查看有那些模拟器</p><pre><code>flutter emulators</code></pre><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flutter_emulators.jpg" alt="flutter 查看本机的模拟器"></p><p>可以看到我本地有一个 Android 模拟器和 一个 IOS 模拟器，那么接下来我们就可以启动模拟器了，当然前提是你必须有模拟器，如果没有先创建可以根据命令提示创建也可以在 AndroidStudio/Xcode 中创建效果一样，当然你也可以直接使用真机测试</p><p>使用 flutter emulators –launch <emulator id=""> 启动模拟器，在我本机我启动了我的 Android 模拟器</emulator></p><pre><code>flutter emulators --launch Nexus_5_API_25</code></pre><p>你可以对应自己的模拟器去开启</p><p>再次运行 flutter run </p><pre><code>flutter run </code></pre><p>没什么问题就会运行起来，在 Android 模拟器上我们创建的 Demo 张这个样子</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flutter_demo_runinandroid.jpg" alt="Android 设备运行 Demo"></p><p>在 IOS 模拟器上张这个样子</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/ios_flutter_run.jpg" alt="iOS 上运行 Demo"></p><p>如果 Android 和 IOS 模拟器都运行起来了，那么执行 flutter run 的时候会提示让你选择使用那个模拟器来运行项目</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/flutter_select_android_or_ios.jpg" alt="提示选择使用所运行起来的模拟器"></p><pre><code>flutter run -d &lt;deviceId&gt; </code></pre><p>使用此命令来选择运行那个模拟器其中 <strong>deviceId</strong> 对应上图中红色箭头指出的值，总之运行 flutter run 如果没有模拟器等等它会自动提示，你按照提示完成即可</p><h5 id="2、使用VsCode-创建项目"><a href="#2、使用VsCode-创建项目" class="headerlink" title="2、使用VsCode 创建项目"></a>2、使用VsCode 创建项目</h5><p>打开 vscode 创建按 ctrl/command +shift +p 输入 flutter 就会看到和 flutter 相关的一些命令「前提是你要在 vscode 中安装 flutter 插件」</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/vscode_flutter.jpg" alt="vscode 中安装 flutter 插件"></p><p>我们可以看到 flutter 的命令，我们直接使用 New Project 来创建一个 flutter 项目，然后选择一个目录或是创建一个目录来放置 flutter 项目，我这里在桌面上创建了一个 vscodeflutter 目录，然后就会自动创建出 flutter 的项目，张这个样子</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/vscode_flutter_strc.jpg" alt="vscode 创建的项目目录"></p><p>这样我们就成功的在 vscode 中创建了一个 flutter 项目，此时我们再使用 ctrl/command +shift +p 输入 flutter 命令可看一下</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/vscode_createproject_fluuter_cmd.jpg" alt="再次查看 flutter 命令"></p><p>我们可以看到我们创建了项目以后会多出几条命令，我们可以选择相应的命令比如加载模拟器等，然后我们我们打开 vscode 的 命令行输入 flutter run 来运行项目</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/vscode_flutter_run.jpg" alt="使用 flutter run 运行项目"></p><p>同样项目可以运行起来</p><h5 id="3、其它开发环境"><a href="#3、其它开发环境" class="headerlink" title="3、其它开发环境"></a>3、其它开发环境</h5><p>除了以上两种方式我们也可以使用 AndroidStudio 来创建 flutter 项目，我也在 Android 插件中安装了 flutter 就可以创建 flutter 项目了「它就会有 flutter 创建项目模版」，和创建一个普通的 Android 项目非常类似，同样可以在 AndroidStudio 启动以后去创建，或是打开一个项目然后选择</p><p><img src="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/as_create_flutter_project.jpg" alt="Android Studio 创建项目"></p><p>或打开某个工程中去创建</p><p>![Android Studio 创建项目方式二]<a href="https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/as_create_flutter_project2.png" target="_blank" rel="noopener">https://tigerchain.oss-cn-hangzhou.aliyuncs.com/flutter/imgs/as_create_flutter_project2.png</a>)</p><p>都是一样的，然后下一步操作即可，以上就把 flutter 的配置和创建介绍完了下面总结一下</p><h3 id="四、总结、扩展"><a href="#四、总结、扩展" class="headerlink" title="四、总结、扩展"></a>四、总结、扩展</h3><p>这节我们说了一下 flutter 的环境配置，基本上按照官方的步骤一步步来没有什么问题，就是要注意一下可能会出现一个依赖或插件安装时”卡死”的问题，这就需要科学上网或是使用 flutter 给国内开发得提供的配置通道基本上都能一路配置成功，大概总结一下</p><h5 id="1、flutter-高性能、跨平台"><a href="#1、flutter-高性能、跨平台" class="headerlink" title="1、flutter 高性能、跨平台"></a>1、flutter 高性能、跨平台</h5><p>flutter 是一个高性能的跨平台解决方案「彻底跨平台」，完全重写了底层没有 webview 没有 jsbridge 采用 canvas 直接绘制界面采用 gpu 去渲染，这也是不同于 RN ，Weex 和基于 webview 的 H5 开发，flutter 完全是另辟蹊径</p><h5 id="2、flutter-的开发环境"><a href="#2、flutter-的开发环境" class="headerlink" title="2、flutter 的开发环境"></a>2、flutter 的开发环境</h5><p>支持命令行、vscode/AndroidStudio/IDE 开发环境，安装配置也非常简单，我们可以选择自己喜欢的 IDE 去配置和开发即可</p><h5 id="3、flutter-目前现状"><a href="#3、flutter-目前现状" class="headerlink" title="3、flutter 目前现状"></a>3、flutter 目前现状</h5><blockquote><p>(1)、没有大规模使用</p></blockquote><p>目前来说 flutter 没有大规模的使用，都是一些大公司在调研和使用国外有 Google 等，国内 BAT 等都在调研，特别是阿里在推进 flutter 的使用，都是使用 flutter 来开发某几个界面或是模块「基本上也是试试水这里面有客观也有主观的因素」，比如阿里将闲鱼的几个界面就拿 flutter 重构了「也是调研了试试水，据说还行」，这不难理解，一个新的东西起来是需要时间的</p><blockquote><p>（2）、社区和三方插件少</p></blockquote><p>由于 flutter 的社区没有像 RN 等那样庞大和活跃，所以一些解决方案和三方插件比较少，特定的功能可能要自己去写，遇到问题也要自己去填坑，相信这随着时间的推进也都会改善</p><h5 id="4、该不该使用-flutter"><a href="#4、该不该使用-flutter" class="headerlink" title="4、该不该使用 flutter"></a>4、该不该使用 flutter</h5><p>先学会了再说吧，只有学到了才知道该使用它还是不能使用，没有最好的框和最牛 B 的技术只有结合公司实际情况来选择最适合公司的框架和技术才是王道「这句话我说了不下十遍」</p><p>对新的技术敬畏和好奇没什么坏处，学了能给技术选型加一个方案并且在大前端的背景下掌握 flutter 也没什么坏处并且在 Google 这样体量的公司之下去推 flutter 相信 flutter 会越走越好，别废什么话了，直接干就对了</p><p>到此为止，Flutter 的环境搭建就完成了</p><hr><p>作者: <a href="http://tigerchain.github.io">TigerChain</a> 订阅查看更多内容</p><p>本文出自 <a href="http://tigerchain.github.io">TigerChain</a>  <a href="http://tigerchain.github.io/categories/从头整-Flutter/">从头开始整 Flutter</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从头整 Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
