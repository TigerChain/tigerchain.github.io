<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TigerChain</title>
  
  <subtitle>TigerChain</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tigerchain.github.io/"/>
  <updated>2019-06-29T03:31:09.848Z</updated>
  <id>http://tigerchain.github.io/</id>
  
  <author>
    <name>TigerChain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>02、永不过时的 HelloWorld</title>
    <link href="http://tigerchain.github.io/2019/06/29/flutterhelloworld/"/>
    <id>http://tigerchain.github.io/2019/06/29/flutterhelloworld/</id>
    <published>2019-06-29T03:14:25.000Z</published>
    <updated>2019-06-29T03:31:09.848Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1586207-6bb336c8c3e5d2a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="本节大纲"></p><blockquote><p><strong>PS</strong>：转载请注明出处<br>作者: <a href="http://www.jianshu.com/u/3106a1da401f" target="_blank" rel="noopener">TigerChain</a><br>地址: <a href="https://www.jianshu.com/p/912ec2a640fb" target="_blank" rel="noopener">https://www.jianshu.com/p/912ec2a640fb</a><br>本文出自 <a href="https://www.jianshu.com/nb/35457993" target="_blank" rel="noopener">TigerChain 简书 从头开始整 Flutter系列</a></p></blockquote><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、目录结构"><a href="#一、目录结构" class="headerlink" title="一、目录结构"></a>一、目录结构</h3><p>在上一小节中我们介绍了 Flutter 的安装方法以及 Flutter 的开发环境「IDE」，并且运行了 Flutter 默认给我们生成的项目，但是代码我们应该写在那里以及项目的组成部分我们还是一概不知的，下面我们先来看看项目的目录吧</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-df330b7913c5a473.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="flutter 的项目结构"></p><h4 id="1、基本结构"><a href="#1、基本结构" class="headerlink" title="1、基本结构"></a>1、基本结构</h4><p>如果熟悉 ReactNative 的童鞋对这个目录不会陌生，基本上来说就是 Android 和 IOS 来承载 flutter，一般情况下 Android 和 IOS 中的文件我们不会去动，除非要混合开发，而我们的 flutter 文件是在 lib 文件夹中的，并且入口文件是 main.dart，其它的没什么好说的，不过要注意一点就是 pubspec.yaml 文件它是 flutter 的配置文件，类似于 Android 中的 gradle 和 Manifest 文件，具体后面会说</p><h4 id="2、初识-main-dart-文件"><a href="#2、初识-main-dart-文件" class="headerlink" title="2、初识 main.dart 文件"></a>2、初识 main.dart 文件</h4><p>此文件是 flutter 的入口文件，默认会给我们生成一个界面，也就是我们上节看到的界面，我们来看看里面有啥东东</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-d25a6539ff8f7985.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="默认的 main.dart 文件"></p><p>我靠啥东东吗「如果初学 flutter 看到这个东西会晕晕的」，在组件化流行之后「以 React/Vue 等为代表」，flutter 也不例外也是采用组件化「其实就是借鉴了 React，但是 Google 叫它为 Widget – 小部件，就是一个组件，和 React/Vue 的 Component 是一个东东」，一个 flutter 项目就是由一个个 Widget 组成的「关于如何定义 Widget 后面章节说，不在本节范围内」</p><p>总之一句话，这个 main.dart 文件第一次看不懂，看不懂，那么我们就不看了「后面通过学习，自然懂了」，只需要知道这个货就是 flutter 的入口文件即可</p><h3 id="二、手写-HelloWorld"><a href="#二、手写-HelloWorld" class="headerlink" title="二、手写 HelloWorld"></a>二、手写 HelloWorld</h3><h4 id="1、命令式和声明式"><a href="#1、命令式和声明式" class="headerlink" title="1、命令式和声明式"></a>1、命令式和声明式</h4><p>命令式和声明式是两种编程方式，我们来说说吧</p><p><strong>命令式</strong></p><p>命令式就是所有功能和属性是通过指令来响应的，玩过 jquery「操作 DOM」 都知道基本上事件驱动的都是基于此种模式的，举个例子吧，比如我们要取得输入框的值，使用 js 来操作    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 取得 input 元素</span><br><span class="line">var input = document.querySelector(&apos;input&apos;);</span><br><span class="line">input.onChange = function () &#123;</span><br><span class="line">  var value = input.value;</span><br><span class="line">  console.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是发送一个消息告诉系统一步步如何去做</p><p><strong>声明式</strong></p><p>比如 React/Vue 或者是 Android 中的布局 xml 文件都是声明式的，它主要是告诉系统做什么，但是具体如何做是系统的事情，拿 Jquery 和 React/Vue 对比就非常清楚了，Jquery 通过命令式来操作 DOM 但是 React/Vue 把操作 DOM 屏蔽了，只要通过声明来实想要的效果，使用 vue 实现上述效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">  alert(this.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>flutter 属于声明式</strong></p><p>我们在写组件或界面的时候基本上都是给类似于 key:value 这种形式来指明我想的东西，至于东西杂样出来底层帮你做了「你不用关心」</p><h4 id="2、手写-helloworld"><a href="#2、手写-helloworld" class="headerlink" title="2、手写 helloworld"></a>2、手写 helloworld</h4><p>看到上面的 main.dart 文件我们晕晕的，那就直接把它内容删掉，只保留第一行「import 语句」，一个最简单的 flutter 应用只有一个 runApp 方法和一个组件，官网上说的很清楚，如下</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-256fca2c199ebfeb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="最小的 flutter app"></p><p>void main 就是程序的主入口，相当于 java 的 main 方法没什么好说的，通过 runApp 来加载组件并且将其添加到屏幕上，这是比较简单的 flutter 应用，但还不够简单，更简单应该就是 runApp 直接来个 组件如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">  runApp(</span><br><span class="line">     new Text(</span><br><span class="line">       &apos;Hello&apos;,</span><br><span class="line">       // 文字方向，从左向右</span><br><span class="line">       textDirection: TextDirection.ltr</span><br><span class="line">     )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没啥说的看看效果吧，直接 flutter run 看效果</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-a1b1e571cf48045b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="文件左对齐"></p><p>看到了吧一个最简单的 flutter 应用就出来了，显示了一个 hello 但是位置被挡住了「没关系我们调整即可」</p><p>这里 Text 就是一个组件，如果想让 Hello 水平居中使用其 textAlign 属性来选择水平对齐方式，如果我们想让 hello 在屏幕的中间，则需要给 Text 外面套一个组件 Center 或 Align 即可，我们套一个 Center 来试试</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-929160fa72216a76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="居中对齐"></p><p>如果我们在命令行输入 flutter run 运行起来以后，修改代码直接使用 shift+r「即 R」就可以实现热加载，不废话看效果</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-2a11e81ece82a29f.gif?imageMogr2/auto-orient/strip" alt="文本居中"></p><p>我们在 Text 外套了一个 Center 组件，然后我按了一个 R 所修改的效果就出来了「是不是感觉很爽」，有可能初次写这些东西的时候不清楚是什么意思，没关系我们说组件的时候会详细的介绍，只需要知道 Center 是一个组件里面有一个 child 组件 Text</p><h3 id="三、Flutter-组成"><a href="#三、Flutter-组成" class="headerlink" title="三、Flutter 组成"></a>三、Flutter 组成</h3><p>一个 flutter 应用是由各个组件组成的，面向对象是一切皆对象，React/Vue 一切皆组件，flutter 也是一切皆组件，提前说一下组件的组成方式，在 flutter 中通过组件嵌套的方式生成应用，这里就以上面的例子来说明吧</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-70551db401d97fc1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="组件组成"></p><p>此 demo 由一个 Center 组件和 Text 组件组成</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-64572fb44e3f66c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="demo 组件组成图"></p><p>这没有什么好说的，当然这个 demo 太简单，真实情况比这复杂多了，但是再复杂的 flutter 应用也是由一个个组件组成的，如图所示</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-57b305be5f7ec94d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="flutter 由一个个小部件组成"></p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ul><li>1、了解 flutter 目录结构</li><li>2、手写 hello world ，并且了解命令式编程和声明式程序的区别</li><li>3、flutter 的组成以及组件化思想</li></ul><p>本节和上一小节是一个预热，下一小节我们说说 flutter 常用的组件，熟悉了这些组件「以及如何使用它们」我们就可以开干 flutter 应用的界面了</p><hr><p>作者: <a href="http://www.jianshu.com/u/3106a1da401f" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容，公号「TigerChain」同步<br>本文出自 <a href="http://www.jianshu.com/u/3106a1da401f" target="_blank" rel="noopener">TigerChain</a> 的 <a href="https://www.jianshu.com/nb/35457993" target="_blank" rel="noopener">从头开始整 Flutter</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1586207-6bb336c8c3e5d2a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/512&quot; 
      
    
    </summary>
    
      <category term="从头整 Flutter" scheme="http://tigerchain.github.io/categories/%E4%BB%8E%E5%A4%B4%E6%95%B4-Flutter/"/>
    
    
      <category term="移动端 前端 Flutter" scheme="http://tigerchain.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%89%8D%E7%AB%AF-Flutter/"/>
    
  </entry>
  
  <entry>
    <title>01、环境搭建</title>
    <link href="http://tigerchain.github.io/2019/06/10/flutterevninit/"/>
    <id>http://tigerchain.github.io/2019/06/10/flutterevninit/</id>
    <published>2019-06-10T13:05:00.000Z</published>
    <updated>2019-06-29T03:30:55.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1586207-214077cfd8cbc450.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="flutter 环境搭建大纲"></p><blockquote><p><strong>PS</strong>：转载请注明出处<br>作者: <a href="http://www.jianshu.com/u/3106a1da401f" target="_blank" rel="noopener">TigerChain</a><br>地址: <a href="https://www.jianshu.com/p/37d54189f639" target="_blank" rel="noopener">https://www.jianshu.com/p/37d54189f639</a><br>本文出自 <a href="https://www.jianshu.com/nb/35457993" target="_blank" rel="noopener">TigerChain 简书 从头开始整 Flutter系列</a></p></blockquote><blockquote><p>教程简介</p></blockquote><ul><li>1、阅读对象<br>本篇教程适合新手阅读，老手直接略过</li><li>2、教程难度<br>初级，本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</li></ul><blockquote><p>正文</p></blockquote><h3 id="一、什么是-Flutter"><a href="#一、什么是-Flutter" class="headerlink" title="一、什么是 Flutter"></a>一、什么是 Flutter</h3><h4 id="1、移动端几种开发模式"><a href="#1、移动端几种开发模式" class="headerlink" title="1、移动端几种开发模式"></a>1、移动端几种开发模式</h4><p>在说 flutter 是什么之前，我们先来看看目前移动端开发几种模式</p><ul><li>1、纯原生开发「即 native 开发」</li><li>2、纯的 webapp </li><li>3、hybrid 混合式开发</li></ul><p>除了第 1 个原生开发外，其余的两个现在基本上有两个方案，一种是基于原生的 webview 去做扩展和开发，第二种是使用 jsbridge 方案来直接调用原生控件来渲染</p><p>cordova appcan mui 等就是基于 webview 来扩展来使用 html、js来完成界面效果，这种方案性能是一个硬商，并且如 cordova 等如果有些功能不能满足我们还需要自定义原生去扩展插件功能，在这里 webview 的缺点都会体现出来</p><p>jsbridge 为代表的是 ReactNative、Weex ,没有 webview 直接把渲染工作交给系统去完成，这样性能就大大提升，但是跨平台特性不彻底，有时需要针对不同平台写不同的代码，并且开发者如果是一个人需要掌握 IOS/Android 两个平台的原生开发，但是 jsbridge 也是需要代价的这块也会有性能问题，那么有没有可以有原生体验，又不用 webview 和 jsbridge 当然有，native 开发「这不废话吗」，其实 flutter 就是在这种思路下诞生的</p><h4 id="2、flutter-是什么"><a href="#2、flutter-是什么" class="headerlink" title="2、flutter 是什么"></a>2、flutter 是什么</h4><p>flutter 是 Google 开源的一个可以高质量的编写 IOS/Android 的移动 UI 框架，flutter 重写了一套 UI 杠架，不基于 webview 也不基于 jsbridge ,是从头到尾彻底重写了甚至还包括他的开发语言「Dart 反正效率比 js 高」,它的渲染引擎是基于跨平台的 Skia 图形库来实现，可以简单的理解 flutter 上面的界面就是直接使用 canvas 画出来的</p><h3 id="二、flutter-开发环境"><a href="#二、flutter-开发环境" class="headerlink" title="二、flutter 开发环境"></a>二、flutter 开发环境</h3><p>flutter 可以在 Mac/Windows/Linux 上进行开发，由于个人电脑是 mac 电脑，所以以 mac 环境来说一下「其它平台类似」，总体来说就以下三步</p><h5 id="1、下载-Mac-环境下的-flutter-安装包"><a href="#1、下载-Mac-环境下的-flutter-安装包" class="headerlink" title="1、下载 Mac 环境下的 flutter 安装包"></a>1、下载 Mac 环境下的 flutter 安装包</h5><p>下载地址：<a href="https://flutter.io/docs/get-started/install/macos" target="_blank" rel="noopener">https://flutter.io/docs/get-started/install/macos</a></p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-4b2187b594d994dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="flutter mac 版本下载"></p><p>点击下载即可</p><h5 id="2、解压安装包并且配置环境变量"><a href="#2、解压安装包并且配置环境变量" class="headerlink" title="2、解压安装包并且配置环境变量"></a>2、解压安装包并且配置环境变量</h5><p>把下载下来的 .zip 安装包解压到指定目录比如 installSoftWare<br>配置环境变量在 .bash_profile 或 .zshrc 中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$PATH:/`pwd`/installSoftWare/flutter/bin&quot;</span><br></pre></td></tr></table></figure><p>其中 pwd 就是你在命令行默认界面 pwd 中出来的命令，一般是 /User/XXX，然后保存文件，基本上 flutter 就可以使用了，我们可以在命令行中试一下 flutter 命令</p><h5 id="3、安装-flutter-依赖"><a href="#3、安装-flutter-依赖" class="headerlink" title="3、安装 flutter 依赖"></a>3、安装 flutter 依赖</h5><p>经过上面两步 flutter 安装完成了，但是还需要安装一些依赖，我们配置完以后运行 flutter doctor 来检查一下缺少的依赖</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-ccd4141a5c44aa17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="flutter_doctor 检查依赖"></p><p>如图所示，我这里是把所需要的依赖安装完了，不是最初的状态，你直接运行会报好多 x 可以选择根据自己需要的安装，比如拿 AndroidStudio 开发那就安装 AndroidStudio 的依赖「在 AS 的 Plugins 中安装 flutter 即可」，在 Vs Code 中开发安装 flutter 插件即可，根据自己需要安装即可只要前第一个没有问题你配置个 Android/IOS 环境再加一个开发 IDE 依赖就可以了，这没什么好说的，如果有 x 号会提示你如何解决的</p><h3 id="三、来个-Demo-试一下"><a href="#三、来个-Demo-试一下" class="headerlink" title="三、来个 Demo 试一下"></a>三、来个 Demo 试一下</h3><p>这里我们使用两种方式来创建 flutterdemo 项目</p><h5 id="1、使用命令行创建"><a href="#1、使用命令行创建" class="headerlink" title="1、使用命令行创建"></a>1、使用命令行创建</h5><p>为了方便演示，我们在 Destop 创建一个 flutterdemo 项目，使用 flutter create xxx「项目名」 来创建项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">cd Desktop</span><br><span class="line">flutter create flutterdemo  // 创建一个 flutter 项目</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1586207-34088c7f3a89948a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="创建一个 flutter demo"></p><p>这样我们就创建出第一个 flutter 项目，在这期间我还偷偷的把 IOS 环境也安装了「嘿嘿」</p><p><strong>注意：</strong> flutter 在获取 package 的时候可能会非常慢，这一点官方也考虑到了，我们直接看 <a href="https://flutter.io/community/china" target="_blank" rel="noopener">https://flutter.io/community/china</a> 中说的非常详细，国内用户还需要在环境变量中配置以下内容「怎么样贴心吧」</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>根据提示，我们来进入到项目中然后 run 一下，看看效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd flutterdemo</span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1586207-cda505f12d6a8b1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="flutter 提示没有运行设备"></p><p>很不幸，没有运行起来，大概意思就是我们没有启动模拟器或真机，没事跟着提示走，运行 flutter emulators 查看有那些模拟器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter emulators</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1586207-1c4db248fd3ce1ce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="flutter 查看本机的模拟器"></p><p>可以看到我本地有一个 Android 模拟器和 一个 IOS 模拟器，那么接下来我们就可以启动模拟器了，当然前提是你必须有模拟器，如果没有先创建可以根据命令提示创建也可以在 AndroidStudio/Xcode 中创建效果一样，当然你也可以直接使用真机测试</p><p>使用 flutter emulators –launch <emulator id> 启动模拟器，在我本机我启动了我的 Android 模拟器</emulator></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter emulators --launch Nexus_5_API_25</span><br></pre></td></tr></table></figure><p>你可以对应自己的模拟器去开启</p><p>再次运行 flutter run </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure><p>没什么问题就会运行起来，在 Android 模拟器上我们创建的 Demo 张这个样子</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-6693499368aabc81.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="Android 设备运行 Demo"></p><p>在 IOS 模拟器上张这个样子</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-fba02694764ce129.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iOS 上运行 Demo"></p><p>如果 Android 和 IOS 模拟器都运行起来了，那么执行 flutter run 的时候会提示让你选择使用那个模拟器来运行项目</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-6e443729ac163d13.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="提示选择使用所运行起来的模拟器"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run -d &lt;deviceId&gt;</span><br></pre></td></tr></table></figure><p>使用此命令来选择运行那个模拟器其中 <strong>deviceId</strong> 对应上图中红色箭头指出的值，总之运行 flutter run 如果没有模拟器等等它会自动提示，你按照提示完成即可</p><h5 id="2、使用VsCode-创建项目"><a href="#2、使用VsCode-创建项目" class="headerlink" title="2、使用VsCode 创建项目"></a>2、使用VsCode 创建项目</h5><p>打开 vscode 创建按 ctrl/command +shift +p 输入 flutter 就会看到和 flutter 相关的一些命令「前提是你要在 vscode 中安装 flutter 插件」</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-fa423233710dd52d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="vscode 中安装 flutter 插件"></p><p>我们可以看到 flutter 的命令，我们直接使用 New Project 来创建一个 flutter 项目，然后选择一个目录或是创建一个目录来放置 flutter 项目，我这里在桌面上创建了一个 vscodeflutter 目录，然后就会自动创建出 flutter 的项目，张这个样子</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-ab8b800f8e512d4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="vscode 创建的项目目录"></p><p>这样我们就成功的在 vscode 中创建了一个 flutter 项目，此时我们再使用 ctrl/command +shift +p 输入 flutter 命令可看一下</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-d02966e2dadc939e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="再次查看 flutter 命令"></p><p>我们可以看到我们创建了项目以后会多出几条命令，我们可以选择相应的命令比如加载模拟器等，然后我们我们打开 vscode 的 命令行输入 flutter run 来运行项目</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-13dc60fb05255891.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="使用 flutter run 运行项目"></p><p>同样项目可以运行起来</p><h5 id="3、其它开发环境"><a href="#3、其它开发环境" class="headerlink" title="3、其它开发环境"></a>3、其它开发环境</h5><p>除了以上两种方式我们也可以使用 AndroidStudio 来创建 flutter 项目，我也在 Android 插件中安装了 flutter 就可以创建 flutter 项目了「它就会有 flutter 创建项目模版」，和创建一个普通的 Android 项目非常类似，同样可以在 AndroidStudio 启动以后去创建，或是打开一个项目然后选择</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-557e5a0bc950e656.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="Android Studio 创建项目"></p><p>或打开某个工程中去创建</p><p><img src="https://upload-images.jianshu.io/upload_images/1586207-99eb27e9a71c384c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/512" alt="Android Studio 创建项目方式二"></p><p>都是一样的，然后下一步操作即可，以上就把 flutter 的配置和创建介绍完了下面总结一下</p><h3 id="四、总结、扩展"><a href="#四、总结、扩展" class="headerlink" title="四、总结、扩展"></a>四、总结、扩展</h3><p>这节我们说了一下 flutter 的环境配置，基本上按照官方的步骤一步步来没有什么问题，就是要注意一下可能会出现一个依赖或插件安装时”卡死”的问题，这就需要科学上网或是使用 flutter 给国内开发得提供的配置通道基本上都能一路配置成功，大概总结一下</p><h5 id="1、flutter-高性能、跨平台"><a href="#1、flutter-高性能、跨平台" class="headerlink" title="1、flutter 高性能、跨平台"></a>1、flutter 高性能、跨平台</h5><p>flutter 是一个高性能的跨平台解决方案「彻底跨平台」，完全重写了底层没有 webview 没有 jsbridge 采用 canvas 直接绘制界面采用 gpu 去渲染，这也是不同于 RN ，Weex 和基于 webview 的 H5 开发，flutter 完全是另辟蹊径</p><h5 id="2、flutter-的开发环境"><a href="#2、flutter-的开发环境" class="headerlink" title="2、flutter 的开发环境"></a>2、flutter 的开发环境</h5><p>支持命令行、vscode/AndroidStudio/IDE 开发环境，安装配置也非常简单，我们可以选择自己喜欢的 IDE 去配置和开发即可</p><h5 id="3、flutter-目前现状"><a href="#3、flutter-目前现状" class="headerlink" title="3、flutter 目前现状"></a>3、flutter 目前现状</h5><blockquote><p>(1)、没有大规模使用</p></blockquote><p>目前来说 flutter 没有大规模的使用，都是一些大公司在调研和使用国外有 Google 等，国内 BAT 等都在调研，特别是阿里在推进 flutter 的使用，都是使用 flutter 来开发某几个界面或是模块「基本上也是试试水这里面有客观也有主观的因素」，比如阿里将闲鱼的几个界面就拿 flutter 重构了「也是调研了试试水，据说还行」，这不难理解，一个新的东西起来是需要时间的</p><blockquote><p>（2）、社区和三方插件少</p></blockquote><p>由于 flutter 的社区没有像 RN 等那样庞大和活跃，所以一些解决方案和三方插件比较少，特定的功能可能要自己去写，遇到问题也要自己去填坑，相信这随着时间的推进也都会改善</p><h5 id="4、该不该使用-flutter"><a href="#4、该不该使用-flutter" class="headerlink" title="4、该不该使用 flutter"></a>4、该不该使用 flutter</h5><p>先学会了再说吧，只有学到了才知道该使用它还是不能使用，没有最好的框和最牛 B 的技术只有结合公司实际情况来选择最适合公司的框架和技术才是王道「这句话我说了不下十遍」</p><p>对新的技术敬畏和好奇没什么坏处，学了能给技术选型加一个方案并且在大前端的背景下掌握 flutter 也没什么坏处并且在 Google 这样体量的公司之下去推 flutter 相信 flutter 会越走越好，别废什么话了，直接干就对了</p><p>到此为止，Flutter 的环境搭建就完成了</p><hr><p>作者: <a href="http://www.jianshu.com/u/3106a1da401f" target="_blank" rel="noopener">TigerChain</a> 订阅查看更多内容<br>本文出自 <a href="http://www.jianshu.com/u/3106a1da401f" target="_blank" rel="noopener">TigerChain</a>  <a href="https://www.jianshu.com/nb/35457993" target="_blank" rel="noopener">从头开始整 Flutter</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1586207-214077cfd8cbc450.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/512&quot; 
      
    
    </summary>
    
      <category term="从头整 Flutter" scheme="http://tigerchain.github.io/categories/%E4%BB%8E%E5%A4%B4%E6%95%B4-Flutter/"/>
    
    
      <category term="移动端 前端 Flutter" scheme="http://tigerchain.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E5%89%8D%E7%AB%AF-Flutter/"/>
    
  </entry>
  
</feed>
